
Universal_Firmware_26_01_21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a3c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08008b48  08008b48  00018b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cdc  08008cdc  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  08008cdc  08008cdc  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008cdc  08008cdc  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cdc  08008cdc  00018cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ce0  08008ce0  00018ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08008ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000035a8  20000350  08009034  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200038f8  08009034  000238f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c00  00000000  00000000  00020379  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000378e  00000000  00000000  00035f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f48  00000000  00000000  00039708  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d80  00000000  00000000  0003a650  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001af1d  00000000  00000000  0003b3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001137a  00000000  00000000  000562ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ba91  00000000  00000000  00067667  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f30f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d44  00000000  00000000  000f3174  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000350 	.word	0x20000350
 8000128:	00000000 	.word	0x00000000
 800012c:	08008b30 	.word	0x08008b30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000354 	.word	0x20000354
 8000148:	08008b30 	.word	0x08008b30

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	; (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	; (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2201      	movs	r2, #1
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	; (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	; (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f000 fe67 	bl	8000e5c <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 fc9e 	bl	8000ad4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000198:	2300      	movs	r3, #0
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f001 f86d 	bl	8001288 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 fc8e 	bl	8000ad4 <Error_Handler>
  }

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000598 	.word	0x20000598
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a29      	ldr	r2, [pc, #164]	; (8000288 <HAL_ADC_MspInit+0xc0>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d14a      	bne.n	800027e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b28      	ldr	r3, [pc, #160]	; (800028c <HAL_ADC_MspInit+0xc4>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a27      	ldr	r2, [pc, #156]	; (800028c <HAL_ADC_MspInit+0xc4>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b25      	ldr	r3, [pc, #148]	; (800028c <HAL_ADC_MspInit+0xc4>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b22      	ldr	r3, [pc, #136]	; (800028c <HAL_ADC_MspInit+0xc4>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a21      	ldr	r2, [pc, #132]	; (800028c <HAL_ADC_MspInit+0xc4>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b1f      	ldr	r3, [pc, #124]	; (800028c <HAL_ADC_MspInit+0xc4>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000218:	2301      	movs	r3, #1
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	481a      	ldr	r0, [pc, #104]	; (8000290 <HAL_ADC_MspInit+0xc8>)
 8000228:	f001 fdea 	bl	8001e00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800022c:	4b19      	ldr	r3, [pc, #100]	; (8000294 <HAL_ADC_MspInit+0xcc>)
 800022e:	4a1a      	ldr	r2, [pc, #104]	; (8000298 <HAL_ADC_MspInit+0xd0>)
 8000230:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000232:	4b18      	ldr	r3, [pc, #96]	; (8000294 <HAL_ADC_MspInit+0xcc>)
 8000234:	2200      	movs	r2, #0
 8000236:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000238:	4b16      	ldr	r3, [pc, #88]	; (8000294 <HAL_ADC_MspInit+0xcc>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800023e:	4b15      	ldr	r3, [pc, #84]	; (8000294 <HAL_ADC_MspInit+0xcc>)
 8000240:	2280      	movs	r2, #128	; 0x80
 8000242:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000244:	4b13      	ldr	r3, [pc, #76]	; (8000294 <HAL_ADC_MspInit+0xcc>)
 8000246:	f44f 7280 	mov.w	r2, #256	; 0x100
 800024a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800024c:	4b11      	ldr	r3, [pc, #68]	; (8000294 <HAL_ADC_MspInit+0xcc>)
 800024e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000252:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <HAL_ADC_MspInit+0xcc>)
 8000256:	2220      	movs	r2, #32
 8000258:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <HAL_ADC_MspInit+0xcc>)
 800025c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000260:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000262:	480c      	ldr	r0, [pc, #48]	; (8000294 <HAL_ADC_MspInit+0xcc>)
 8000264:	f001 fba4 	bl	80019b0 <HAL_DMA_Init>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 800026e:	f000 fc31 	bl	8000ad4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4a07      	ldr	r2, [pc, #28]	; (8000294 <HAL_ADC_MspInit+0xcc>)
 8000276:	621a      	str	r2, [r3, #32]
 8000278:	4a06      	ldr	r2, [pc, #24]	; (8000294 <HAL_ADC_MspInit+0xcc>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800027e:	bf00      	nop
 8000280:	3720      	adds	r7, #32
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	40012400 	.word	0x40012400
 800028c:	40021000 	.word	0x40021000
 8000290:	40010800 	.word	0x40010800
 8000294:	200005c8 	.word	0x200005c8
 8000298:	40020008 	.word	0x40020008

0800029c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002a2:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <MX_DMA_Init+0x38>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	4a0b      	ldr	r2, [pc, #44]	; (80002d4 <MX_DMA_Init+0x38>)
 80002a8:	f043 0301 	orr.w	r3, r3, #1
 80002ac:	6153      	str	r3, [r2, #20]
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <MX_DMA_Init+0x38>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	607b      	str	r3, [r7, #4]
 80002b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80002ba:	2200      	movs	r2, #0
 80002bc:	2100      	movs	r1, #0
 80002be:	200b      	movs	r0, #11
 80002c0:	f001 fb3f 	bl	8001942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80002c4:	200b      	movs	r0, #11
 80002c6:	f001 fb58 	bl	800197a <HAL_NVIC_EnableIRQ>

}
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40021000 	.word	0x40021000

080002d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 0310 	add.w	r3, r7, #16
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ec:	4b41      	ldr	r3, [pc, #260]	; (80003f4 <MX_GPIO_Init+0x11c>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a40      	ldr	r2, [pc, #256]	; (80003f4 <MX_GPIO_Init+0x11c>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b3e      	ldr	r3, [pc, #248]	; (80003f4 <MX_GPIO_Init+0x11c>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0310 	and.w	r3, r3, #16
 8000300:	60fb      	str	r3, [r7, #12]
 8000302:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000304:	4b3b      	ldr	r3, [pc, #236]	; (80003f4 <MX_GPIO_Init+0x11c>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a3a      	ldr	r2, [pc, #232]	; (80003f4 <MX_GPIO_Init+0x11c>)
 800030a:	f043 0320 	orr.w	r3, r3, #32
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b38      	ldr	r3, [pc, #224]	; (80003f4 <MX_GPIO_Init+0x11c>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0320 	and.w	r3, r3, #32
 8000318:	60bb      	str	r3, [r7, #8]
 800031a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031c:	4b35      	ldr	r3, [pc, #212]	; (80003f4 <MX_GPIO_Init+0x11c>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a34      	ldr	r2, [pc, #208]	; (80003f4 <MX_GPIO_Init+0x11c>)
 8000322:	f043 0304 	orr.w	r3, r3, #4
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b32      	ldr	r3, [pc, #200]	; (80003f4 <MX_GPIO_Init+0x11c>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0304 	and.w	r3, r3, #4
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000334:	4b2f      	ldr	r3, [pc, #188]	; (80003f4 <MX_GPIO_Init+0x11c>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a2e      	ldr	r2, [pc, #184]	; (80003f4 <MX_GPIO_Init+0x11c>)
 800033a:	f043 0308 	orr.w	r3, r3, #8
 800033e:	6193      	str	r3, [r2, #24]
 8000340:	4b2c      	ldr	r3, [pc, #176]	; (80003f4 <MX_GPIO_Init+0x11c>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f003 0308 	and.w	r3, r3, #8
 8000348:	603b      	str	r3, [r7, #0]
 800034a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000352:	4829      	ldr	r0, [pc, #164]	; (80003f8 <MX_GPIO_Init+0x120>)
 8000354:	f001 feae 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	2104      	movs	r1, #4
 800035c:	4827      	ldr	r0, [pc, #156]	; (80003fc <MX_GPIO_Init+0x124>)
 800035e:	f001 fea9 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000362:	2200      	movs	r2, #0
 8000364:	21c0      	movs	r1, #192	; 0xc0
 8000366:	4826      	ldr	r0, [pc, #152]	; (8000400 <MX_GPIO_Init+0x128>)
 8000368:	f001 fea4 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800036c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000372:	2301      	movs	r3, #1
 8000374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000376:	2300      	movs	r3, #0
 8000378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037a:	2302      	movs	r3, #2
 800037c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800037e:	f107 0310 	add.w	r3, r7, #16
 8000382:	4619      	mov	r1, r3
 8000384:	481c      	ldr	r0, [pc, #112]	; (80003f8 <MX_GPIO_Init+0x120>)
 8000386:	f001 fd3b 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800038a:	2304      	movs	r3, #4
 800038c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038e:	2301      	movs	r3, #1
 8000390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000392:	2300      	movs	r3, #0
 8000394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000396:	2302      	movs	r3, #2
 8000398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039a:	f107 0310 	add.w	r3, r7, #16
 800039e:	4619      	mov	r1, r3
 80003a0:	4816      	ldr	r0, [pc, #88]	; (80003fc <MX_GPIO_Init+0x124>)
 80003a2:	f001 fd2d 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80003a6:	2308      	movs	r3, #8
 80003a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003aa:	4b16      	ldr	r3, [pc, #88]	; (8000404 <MX_GPIO_Init+0x12c>)
 80003ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b2:	f107 0310 	add.w	r3, r7, #16
 80003b6:	4619      	mov	r1, r3
 80003b8:	4810      	ldr	r0, [pc, #64]	; (80003fc <MX_GPIO_Init+0x124>)
 80003ba:	f001 fd21 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80003be:	23c0      	movs	r3, #192	; 0xc0
 80003c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c2:	2301      	movs	r3, #1
 80003c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ca:	2302      	movs	r3, #2
 80003cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	4619      	mov	r1, r3
 80003d4:	480a      	ldr	r0, [pc, #40]	; (8000400 <MX_GPIO_Init+0x128>)
 80003d6:	f001 fd13 	bl	8001e00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 80003da:	2200      	movs	r2, #0
 80003dc:	2101      	movs	r1, #1
 80003de:	2009      	movs	r0, #9
 80003e0:	f001 faaf 	bl	8001942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80003e4:	2009      	movs	r0, #9
 80003e6:	f001 fac8 	bl	800197a <HAL_NVIC_EnableIRQ>

}
 80003ea:	bf00      	nop
 80003ec:	3720      	adds	r7, #32
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40021000 	.word	0x40021000
 80003f8:	40011000 	.word	0x40011000
 80003fc:	40010800 	.word	0x40010800
 8000400:	40010c00 	.word	0x40010c00
 8000404:	10110000 	.word	0x10110000

08000408 <Start_Symbol>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Function of start symbol transmission */
void Start_Symbol()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
	uint16_t mess = 0xFFFF;
 800040e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000412:	80fb      	strh	r3, [r7, #6]
	while(CDC_Transmit_FS(&mess, sizeof(mess)) == USBD_BUSY);
 8000414:	bf00      	nop
 8000416:	1dbb      	adds	r3, r7, #6
 8000418:	2102      	movs	r1, #2
 800041a:	4618      	mov	r0, r3
 800041c:	f007 feb4 	bl	8008188 <CDC_Transmit_FS>
 8000420:	4603      	mov	r3, r0
 8000422:	2b01      	cmp	r3, #1
 8000424:	d0f7      	beq.n	8000416 <Start_Symbol+0xe>
}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}

0800042e <Stop_Symbol>:

/* Function of stop symbol transmission */
void Stop_Symbol()
{
 800042e:	b580      	push	{r7, lr}
 8000430:	b082      	sub	sp, #8
 8000432:	af00      	add	r7, sp, #0
	uint16_t mess = 0xFFFE;
 8000434:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000438:	80fb      	strh	r3, [r7, #6]
	while(CDC_Transmit_FS(&mess, sizeof(mess)) == USBD_BUSY);
 800043a:	bf00      	nop
 800043c:	1dbb      	adds	r3, r7, #6
 800043e:	2102      	movs	r1, #2
 8000440:	4618      	mov	r0, r3
 8000442:	f007 fea1 	bl	8008188 <CDC_Transmit_FS>
 8000446:	4603      	mov	r3, r0
 8000448:	2b01      	cmp	r3, #1
 800044a:	d0f7      	beq.n	800043c <Stop_Symbol+0xe>
}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <True_Trigger_Mode>:
 * @brief	Function of True Trigger Mode
 * If module is triggered in "For" cycle, It fills CDC_Buf with ADC conversion to transmit by VCP.
 * If module isn't triggered in "For"  cycle, It do nothing.
 */
void True_Trigger_Mode()
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
	Trig_status = 0;
 800045a:	4b1d      	ldr	r3, [pc, #116]	; (80004d0 <True_Trigger_Mode+0x7c>)
 800045c:	2200      	movs	r2, #0
 800045e:	801a      	strh	r2, [r3, #0]
	ADC_Status = 1;
 8000460:	4b1c      	ldr	r3, [pc, #112]	; (80004d4 <True_Trigger_Mode+0x80>)
 8000462:	2201      	movs	r2, #1
 8000464:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<100; i++){}
 8000466:	2300      	movs	r3, #0
 8000468:	607b      	str	r3, [r7, #4]
 800046a:	e002      	b.n	8000472 <True_Trigger_Mode+0x1e>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3301      	adds	r3, #1
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2b63      	cmp	r3, #99	; 0x63
 8000476:	ddf9      	ble.n	800046c <True_Trigger_Mode+0x18>
	for (int i = 0; i<10000;i++)
 8000478:	2300      	movs	r3, #0
 800047a:	603b      	str	r3, [r7, #0]
 800047c:	e020      	b.n	80004c0 <True_Trigger_Mode+0x6c>
	{
		if(HAL_ADC_GetValue(&hadc1) > Trig_level)
 800047e:	4816      	ldr	r0, [pc, #88]	; (80004d8 <True_Trigger_Mode+0x84>)
 8000480:	f000 feed 	bl	800125e <HAL_ADC_GetValue>
 8000484:	4602      	mov	r2, r0
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <True_Trigger_Mode+0x88>)
 8000488:	881b      	ldrh	r3, [r3, #0]
 800048a:	429a      	cmp	r2, r3
 800048c:	d915      	bls.n	80004ba <True_Trigger_Mode+0x66>
		{
			Trig_status = 1;
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <True_Trigger_Mode+0x7c>)
 8000490:	2201      	movs	r2, #1
 8000492:	801a      	strh	r2, [r3, #0]
			while(Trig_status == 1){}
 8000494:	bf00      	nop
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <True_Trigger_Mode+0x7c>)
 8000498:	881b      	ldrh	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d0fb      	beq.n	8000496 <True_Trigger_Mode+0x42>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800049e:	2201      	movs	r2, #1
 80004a0:	2104      	movs	r1, #4
 80004a2:	480f      	ldr	r0, [pc, #60]	; (80004e0 <True_Trigger_Mode+0x8c>)
 80004a4:	f001 fe06 	bl	80020b4 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80004a8:	2001      	movs	r0, #1
 80004aa:	f000 fcb5 	bl	8000e18 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2104      	movs	r1, #4
 80004b2:	480b      	ldr	r0, [pc, #44]	; (80004e0 <True_Trigger_Mode+0x8c>)
 80004b4:	f001 fdfe 	bl	80020b4 <HAL_GPIO_WritePin>
			return ;
 80004b8:	e007      	b.n	80004ca <True_Trigger_Mode+0x76>
	for (int i = 0; i<10000;i++)
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	3301      	adds	r3, #1
 80004be:	603b      	str	r3, [r7, #0]
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	f242 720f 	movw	r2, #9999	; 0x270f
 80004c6:	4293      	cmp	r3, r2
 80004c8:	ddd9      	ble.n	800047e <True_Trigger_Mode+0x2a>
		}
	}
}
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000372 	.word	0x20000372
 80004d4:	2000036e 	.word	0x2000036e
 80004d8:	20000598 	.word	0x20000598
 80004dc:	20000000 	.word	0x20000000
 80004e0:	40010800 	.word	0x40010800

080004e4 <Auto_Trigger_Mode>:
 * If module is triggered in "For" cycle, It fills CDC_Buf with ADC conversion to transmit by VCP.
 * If module isn't triggered in "For"  cycle, It triggered forced after cycle.
 * This mode is useful to setting modules.
 */
void Auto_Trigger_Mode()
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
	ADC_Status = 1;
 80004ea:	4b28      	ldr	r3, [pc, #160]	; (800058c <Auto_Trigger_Mode+0xa8>)
 80004ec:	2201      	movs	r2, #1
 80004ee:	701a      	strb	r2, [r3, #0]
	Trig_status = 0;
 80004f0:	4b27      	ldr	r3, [pc, #156]	; (8000590 <Auto_Trigger_Mode+0xac>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i<100; i++){}
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
 80004fa:	e002      	b.n	8000502 <Auto_Trigger_Mode+0x1e>
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	3301      	adds	r3, #1
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2b63      	cmp	r3, #99	; 0x63
 8000506:	ddf9      	ble.n	80004fc <Auto_Trigger_Mode+0x18>
	for (int i = 0; i<10000;i++)
 8000508:	2300      	movs	r3, #0
 800050a:	603b      	str	r3, [r7, #0]
 800050c:	e020      	b.n	8000550 <Auto_Trigger_Mode+0x6c>
	{
		if(HAL_ADC_GetValue(&hadc1) > Trig_level)
 800050e:	4821      	ldr	r0, [pc, #132]	; (8000594 <Auto_Trigger_Mode+0xb0>)
 8000510:	f000 fea5 	bl	800125e <HAL_ADC_GetValue>
 8000514:	4602      	mov	r2, r0
 8000516:	4b20      	ldr	r3, [pc, #128]	; (8000598 <Auto_Trigger_Mode+0xb4>)
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	429a      	cmp	r2, r3
 800051c:	d915      	bls.n	800054a <Auto_Trigger_Mode+0x66>
		{
			Trig_status = 1;
 800051e:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <Auto_Trigger_Mode+0xac>)
 8000520:	2201      	movs	r2, #1
 8000522:	801a      	strh	r2, [r3, #0]
			while(Trig_status == 1){}
 8000524:	bf00      	nop
 8000526:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <Auto_Trigger_Mode+0xac>)
 8000528:	881b      	ldrh	r3, [r3, #0]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d0fb      	beq.n	8000526 <Auto_Trigger_Mode+0x42>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800052e:	2201      	movs	r2, #1
 8000530:	2104      	movs	r1, #4
 8000532:	481a      	ldr	r0, [pc, #104]	; (800059c <Auto_Trigger_Mode+0xb8>)
 8000534:	f001 fdbe 	bl	80020b4 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000538:	2001      	movs	r0, #1
 800053a:	f000 fc6d 	bl	8000e18 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	2104      	movs	r1, #4
 8000542:	4816      	ldr	r0, [pc, #88]	; (800059c <Auto_Trigger_Mode+0xb8>)
 8000544:	f001 fdb6 	bl	80020b4 <HAL_GPIO_WritePin>
			return ;
 8000548:	e01d      	b.n	8000586 <Auto_Trigger_Mode+0xa2>
	for (int i = 0; i<10000;i++)
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	3301      	adds	r3, #1
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	f242 720f 	movw	r2, #9999	; 0x270f
 8000556:	4293      	cmp	r3, r2
 8000558:	ddd9      	ble.n	800050e <Auto_Trigger_Mode+0x2a>
		}
	}
	Trig_status = 1;
 800055a:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <Auto_Trigger_Mode+0xac>)
 800055c:	2201      	movs	r2, #1
 800055e:	801a      	strh	r2, [r3, #0]
	while(Trig_status == 1){}
 8000560:	bf00      	nop
 8000562:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <Auto_Trigger_Mode+0xac>)
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d0fb      	beq.n	8000562 <Auto_Trigger_Mode+0x7e>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800056a:	2201      	movs	r2, #1
 800056c:	2104      	movs	r1, #4
 800056e:	480b      	ldr	r0, [pc, #44]	; (800059c <Auto_Trigger_Mode+0xb8>)
 8000570:	f001 fda0 	bl	80020b4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000574:	2001      	movs	r0, #1
 8000576:	f000 fc4f 	bl	8000e18 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2104      	movs	r1, #4
 800057e:	4807      	ldr	r0, [pc, #28]	; (800059c <Auto_Trigger_Mode+0xb8>)
 8000580:	f001 fd98 	bl	80020b4 <HAL_GPIO_WritePin>
	return ;
 8000584:	bf00      	nop
}
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	2000036e 	.word	0x2000036e
 8000590:	20000372 	.word	0x20000372
 8000594:	20000598 	.word	0x20000598
 8000598:	20000000 	.word	0x20000000
 800059c:	40010800 	.word	0x40010800

080005a0 <CDC_Send_Data>:
 * @brief	Function of transmitting data by VCP
 * Send start symbol, CDC_Transmit_Size amount of dots, stop symbol
 * @param CDC_Transmit_Size: number of dots of transmitting data
 */
void CDC_Send_Data(uint16_t CDC_Transmit_Size)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
	if((CDC_Status == 1)&&(CDC_Request == 1))
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <CDC_Send_Data+0x64>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d123      	bne.n	80005fa <CDC_Send_Data+0x5a>
 80005b2:	4b15      	ldr	r3, [pc, #84]	; (8000608 <CDC_Send_Data+0x68>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d11f      	bne.n	80005fa <CDC_Send_Data+0x5a>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c0:	4812      	ldr	r0, [pc, #72]	; (800060c <CDC_Send_Data+0x6c>)
 80005c2:	f001 fd77 	bl	80020b4 <HAL_GPIO_WritePin>
		Start_Symbol();
 80005c6:	f7ff ff1f 	bl	8000408 <Start_Symbol>
		while(CDC_Transmit_FS((uint8_t*)&CDC_Buf, sizeof(uint16_t)*CDC_Transmit_Size) == USBD_BUSY);
 80005ca:	bf00      	nop
 80005cc:	88fb      	ldrh	r3, [r7, #6]
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	4619      	mov	r1, r3
 80005d2:	480f      	ldr	r0, [pc, #60]	; (8000610 <CDC_Send_Data+0x70>)
 80005d4:	f007 fdd8 	bl	8008188 <CDC_Transmit_FS>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d0f6      	beq.n	80005cc <CDC_Send_Data+0x2c>
		Stop_Symbol();
 80005de:	f7ff ff26 	bl	800042e <Stop_Symbol>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e8:	4808      	ldr	r0, [pc, #32]	; (800060c <CDC_Send_Data+0x6c>)
 80005ea:	f001 fd63 	bl	80020b4 <HAL_GPIO_WritePin>
		CDC_Status = 0;
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <CDC_Send_Data+0x64>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
		CDC_Request = 0;
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <CDC_Send_Data+0x68>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]
	 }
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	2000036f 	.word	0x2000036f
 8000608:	20000370 	.word	0x20000370
 800060c:	40011000 	.word	0x40011000
 8000610:	2000060c 	.word	0x2000060c

08000614 <DAC_Write>:
/**
 * @brief	Function of setting voltage of DAC MCP4921
 * @param	val: value of gain on DAC, val = 0..4095
 */
void DAC_Write(uint16_t val)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	80fb      	strh	r3, [r7, #6]
	/* Init transmittion data: 4 register bits + 12 value bits */
	/* See MCP4921 datasheet */
	uint16_t dac_data = 0x7000 | (val&0x0FFF);
 800061e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000626:	b21b      	sxth	r3, r3
 8000628:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800062c:	b21b      	sxth	r3, r3
 800062e:	b29b      	uxth	r3, r3
 8000630:	81fb      	strh	r3, [r7, #14]
	uint8_t data[2];
	memcpy(&data, &dac_data, sizeof(data));
 8000632:	89fb      	ldrh	r3, [r7, #14]
 8000634:	81bb      	strh	r3, [r7, #12]

	/* SPI CS Low, SPI transmitt, SPI CS High */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	4809      	ldr	r0, [pc, #36]	; (8000660 <DAC_Write+0x4c>)
 800063c:	f001 fd3a 	bl	80020b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, sizeof(data), 0);
 8000640:	f107 010c 	add.w	r1, r7, #12
 8000644:	2300      	movs	r3, #0
 8000646:	2202      	movs	r2, #2
 8000648:	4806      	ldr	r0, [pc, #24]	; (8000664 <DAC_Write+0x50>)
 800064a:	f003 fee5 	bl	8004418 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	2180      	movs	r1, #128	; 0x80
 8000652:	4803      	ldr	r0, [pc, #12]	; (8000660 <DAC_Write+0x4c>)
 8000654:	f001 fd2e 	bl	80020b4 <HAL_GPIO_WritePin>
}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40010c00 	.word	0x40010c00
 8000664:	20002eec 	.word	0x20002eec

08000668 <While_Parser>:
/**
 * @brief	Function of parser in "while" cycle of firmware
 * Mode is main variable for choosing function_mode
 */
void While_Parser()
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	switch(Mode)
 800066c:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <While_Parser+0x60>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b03      	cmp	r3, #3
 8000672:	d826      	bhi.n	80006c2 <While_Parser+0x5a>
 8000674:	a201      	add	r2, pc, #4	; (adr r2, 800067c <While_Parser+0x14>)
 8000676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067a:	bf00      	nop
 800067c:	0800068d 	.word	0x0800068d
 8000680:	08000691 	.word	0x08000691
 8000684:	0800069b 	.word	0x0800069b
 8000688:	080006af 	.word	0x080006af
	{
	case Sleep_Mode_Num:
		__NOP();
 800068c:	bf00      	nop
		break;
 800068e:	e018      	b.n	80006c2 <While_Parser+0x5a>

	case Trace_Mode_Num:
		CDC_Send_Data(CDC_Size);
 8000690:	f241 3088 	movw	r0, #5000	; 0x1388
 8000694:	f7ff ff84 	bl	80005a0 <CDC_Send_Data>
		break;
 8000698:	e013      	b.n	80006c2 <While_Parser+0x5a>

	case True_Trigger_Mode_Num:
		True_Trigger_Mode();
 800069a:	f7ff fedb 	bl	8000454 <True_Trigger_Mode>
		CDC_Send_Data(DMA_Half*3);
 800069e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006a2:	f7ff ff7d 	bl	80005a0 <CDC_Send_Data>
		Mode = 0;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <While_Parser+0x60>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
		break;
 80006ac:	e009      	b.n	80006c2 <While_Parser+0x5a>

	case Auto_Trigger_Mode_Num:
		Auto_Trigger_Mode();
 80006ae:	f7ff ff19 	bl	80004e4 <Auto_Trigger_Mode>
		CDC_Send_Data(DMA_Half*3);
 80006b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006b6:	f7ff ff73 	bl	80005a0 <CDC_Send_Data>
		Mode = 0;
 80006ba:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <While_Parser+0x60>)
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
		break;
 80006c0:	bf00      	nop
	}
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000374 	.word	0x20000374

080006cc <CDC_Callback_Parser>:
 * @brief	Function of CDC_ReciveCallBack parsing
 * @param	mode: mode bit
 * @param	val: value for set mode
 */
void CDC_Callback_Parser(uint8_t mode, uint16_t val)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	460a      	mov	r2, r1
 80006d6:	71fb      	strb	r3, [r7, #7]
 80006d8:	4613      	mov	r3, r2
 80006da:	80bb      	strh	r3, [r7, #4]
	switch(mode)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	2b06      	cmp	r3, #6
 80006e0:	d82d      	bhi.n	800073e <CDC_Callback_Parser+0x72>
 80006e2:	a201      	add	r2, pc, #4	; (adr r2, 80006e8 <CDC_Callback_Parser+0x1c>)
 80006e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e8:	08000705 	.word	0x08000705
 80006ec:	0800070d 	.word	0x0800070d
 80006f0:	08000715 	.word	0x08000715
 80006f4:	0800071d 	.word	0x0800071d
 80006f8:	08000725 	.word	0x08000725
 80006fc:	0800072f 	.word	0x0800072f
 8000700:	08000737 	.word	0x08000737
	{
	case Sleep_Mode_Num:
		Mode = mode;
 8000704:	4a10      	ldr	r2, [pc, #64]	; (8000748 <CDC_Callback_Parser+0x7c>)
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	7013      	strb	r3, [r2, #0]
		break;
 800070a:	e018      	b.n	800073e <CDC_Callback_Parser+0x72>

	case Trace_Mode_Num:
		Mode = mode;
 800070c:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <CDC_Callback_Parser+0x7c>)
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	7013      	strb	r3, [r2, #0]
		break;
 8000712:	e014      	b.n	800073e <CDC_Callback_Parser+0x72>

	case True_Trigger_Mode_Num:
		Mode = mode;
 8000714:	4a0c      	ldr	r2, [pc, #48]	; (8000748 <CDC_Callback_Parser+0x7c>)
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	7013      	strb	r3, [r2, #0]
		break;
 800071a:	e010      	b.n	800073e <CDC_Callback_Parser+0x72>

	case Auto_Trigger_Mode_Num:
		Mode = mode;
 800071c:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <CDC_Callback_Parser+0x7c>)
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	7013      	strb	r3, [r2, #0]
		break;
 8000722:	e00c      	b.n	800073e <CDC_Callback_Parser+0x72>

	case Set_Gain_Num:
		DAC_Write(val);
 8000724:	88bb      	ldrh	r3, [r7, #4]
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ff74 	bl	8000614 <DAC_Write>
		break;
 800072c:	e007      	b.n	800073e <CDC_Callback_Parser+0x72>

	case Set_Trigger_Level_Num:
		Trig_level = val;
 800072e:	4a07      	ldr	r2, [pc, #28]	; (800074c <CDC_Callback_Parser+0x80>)
 8000730:	88bb      	ldrh	r3, [r7, #4]
 8000732:	8013      	strh	r3, [r2, #0]
		break;
 8000734:	e003      	b.n	800073e <CDC_Callback_Parser+0x72>

	case Request_Num:
		CDC_Request = 1;
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <CDC_Callback_Parser+0x84>)
 8000738:	2201      	movs	r2, #1
 800073a:	701a      	strb	r2, [r3, #0]
		break;
 800073c:	bf00      	nop
	}
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000374 	.word	0x20000374
 800074c:	20000000 	.word	0x20000000
 8000750:	20000370 	.word	0x20000370

08000754 <Trigger_DMA_Callback>:
/**
 * @brief	Function of HAL_ADC_ConvCpltCallback(DMA) for Auto and True Trigger mode
 * @param	half: half of active DMA buffer fo copy
 */
void Trigger_DMA_Callback(uint8_t half)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	if(ADC_Status == 1)
 800075e:	4b23      	ldr	r3, [pc, #140]	; (80007ec <Trigger_DMA_Callback+0x98>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d13d      	bne.n	80007e2 <Trigger_DMA_Callback+0x8e>
	{
		if(half == 0)
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d10e      	bne.n	800078a <Trigger_DMA_Callback+0x36>
			memcpy(&CDC_Buf[CDC_part*DMA_Half], &DMA_Buf[0],sizeof(uint16_t)*DMA_Half );
 800076c:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <Trigger_DMA_Callback+0x9c>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	2364      	movs	r3, #100	; 0x64
 8000774:	fb03 f302 	mul.w	r3, r3, r2
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	4a1e      	ldr	r2, [pc, #120]	; (80007f4 <Trigger_DMA_Callback+0xa0>)
 800077c:	4413      	add	r3, r2
 800077e:	22c8      	movs	r2, #200	; 0xc8
 8000780:	491d      	ldr	r1, [pc, #116]	; (80007f8 <Trigger_DMA_Callback+0xa4>)
 8000782:	4618      	mov	r0, r3
 8000784:	f008 f90e 	bl	80089a4 <memcpy>
 8000788:	e00d      	b.n	80007a6 <Trigger_DMA_Callback+0x52>
		else
			memcpy(&CDC_Buf[CDC_part*DMA_Half], &DMA_Buf[DMA_Half],sizeof(uint16_t)*DMA_Half );
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <Trigger_DMA_Callback+0x9c>)
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	461a      	mov	r2, r3
 8000790:	2364      	movs	r3, #100	; 0x64
 8000792:	fb03 f302 	mul.w	r3, r3, r2
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	4a16      	ldr	r2, [pc, #88]	; (80007f4 <Trigger_DMA_Callback+0xa0>)
 800079a:	4413      	add	r3, r2
 800079c:	22c8      	movs	r2, #200	; 0xc8
 800079e:	4917      	ldr	r1, [pc, #92]	; (80007fc <Trigger_DMA_Callback+0xa8>)
 80007a0:	4618      	mov	r0, r3
 80007a2:	f008 f8ff 	bl	80089a4 <memcpy>

		if(Trig_status == 1)
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <Trigger_DMA_Callback+0xac>)
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d106      	bne.n	80007bc <Trigger_DMA_Callback+0x68>
			CDC_part = CDC_part + 1;
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <Trigger_DMA_Callback+0x9c>)
 80007b0:	881b      	ldrh	r3, [r3, #0]
 80007b2:	3301      	adds	r3, #1
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <Trigger_DMA_Callback+0x9c>)
 80007b8:	801a      	strh	r2, [r3, #0]
 80007ba:	e002      	b.n	80007c2 <Trigger_DMA_Callback+0x6e>
		else
			CDC_part = 0;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <Trigger_DMA_Callback+0x9c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	801a      	strh	r2, [r3, #0]
		if(CDC_part == 3)
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <Trigger_DMA_Callback+0x9c>)
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	2b03      	cmp	r3, #3
 80007c8:	d10b      	bne.n	80007e2 <Trigger_DMA_Callback+0x8e>
		{
			CDC_Status = 1;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <Trigger_DMA_Callback+0xb0>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
			ADC_Status = 0;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <Trigger_DMA_Callback+0x98>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
			CDC_part = 0;
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <Trigger_DMA_Callback+0x9c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	801a      	strh	r2, [r3, #0]
			Trig_status = 0;
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <Trigger_DMA_Callback+0xac>)
 80007de:	2200      	movs	r2, #0
 80007e0:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2000036e 	.word	0x2000036e
 80007f0:	2000036c 	.word	0x2000036c
 80007f4:	2000060c 	.word	0x2000060c
 80007f8:	20002d5c 	.word	0x20002d5c
 80007fc:	20002e24 	.word	0x20002e24
 8000800:	20000372 	.word	0x20000372
 8000804:	2000036f 	.word	0x2000036f

08000808 <Trace_DMA_Callback>:
/**
 * @brief	Function of HAL_ADC_ConvCpltCallback(DMA) for Trace mode
 * @param	half: half of active DMA buffer fo copy
 */
void Trace_DMA_Callback(uint8_t half)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
	if(ADC_Status == 1)
 8000812:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <Trace_DMA_Callback+0x88>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d135      	bne.n	8000886 <Trace_DMA_Callback+0x7e>
	{
		if(half == 0)
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d10e      	bne.n	800083e <Trace_DMA_Callback+0x36>
			memcpy(&CDC_Buf[CDC_part*DMA_Half], &DMA_Buf[0],sizeof(uint16_t)*DMA_Half );
 8000820:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <Trace_DMA_Callback+0x8c>)
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	461a      	mov	r2, r3
 8000826:	2364      	movs	r3, #100	; 0x64
 8000828:	fb03 f302 	mul.w	r3, r3, r2
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	4a1a      	ldr	r2, [pc, #104]	; (8000898 <Trace_DMA_Callback+0x90>)
 8000830:	4413      	add	r3, r2
 8000832:	22c8      	movs	r2, #200	; 0xc8
 8000834:	4919      	ldr	r1, [pc, #100]	; (800089c <Trace_DMA_Callback+0x94>)
 8000836:	4618      	mov	r0, r3
 8000838:	f008 f8b4 	bl	80089a4 <memcpy>
 800083c:	e00d      	b.n	800085a <Trace_DMA_Callback+0x52>
		else
			memcpy(&CDC_Buf[CDC_part*DMA_Half], &DMA_Buf[DMA_Half],sizeof(uint16_t)*DMA_Half );
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <Trace_DMA_Callback+0x8c>)
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	461a      	mov	r2, r3
 8000844:	2364      	movs	r3, #100	; 0x64
 8000846:	fb03 f302 	mul.w	r3, r3, r2
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	4a12      	ldr	r2, [pc, #72]	; (8000898 <Trace_DMA_Callback+0x90>)
 800084e:	4413      	add	r3, r2
 8000850:	22c8      	movs	r2, #200	; 0xc8
 8000852:	4913      	ldr	r1, [pc, #76]	; (80008a0 <Trace_DMA_Callback+0x98>)
 8000854:	4618      	mov	r0, r3
 8000856:	f008 f8a5 	bl	80089a4 <memcpy>

		CDC_part = CDC_part + 1;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <Trace_DMA_Callback+0x8c>)
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	3301      	adds	r3, #1
 8000860:	b29a      	uxth	r2, r3
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <Trace_DMA_Callback+0x8c>)
 8000864:	801a      	strh	r2, [r3, #0]
		if(CDC_part == CDC_Parts)
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <Trace_DMA_Callback+0x8c>)
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	2b32      	cmp	r3, #50	; 0x32
 800086c:	d10b      	bne.n	8000886 <Trace_DMA_Callback+0x7e>
		{
			CDC_Status = 1;
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <Trace_DMA_Callback+0x9c>)
 8000870:	2201      	movs	r2, #1
 8000872:	701a      	strb	r2, [r3, #0]
			ADC_Status = 0;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <Trace_DMA_Callback+0x88>)
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
			CDC_part = 0;
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <Trace_DMA_Callback+0x8c>)
 800087c:	2200      	movs	r2, #0
 800087e:	801a      	strh	r2, [r3, #0]
			HAL_ADC_Stop_DMA(&hadc1);
 8000880:	4809      	ldr	r0, [pc, #36]	; (80008a8 <Trace_DMA_Callback+0xa0>)
 8000882:	f000 fca1 	bl	80011c8 <HAL_ADC_Stop_DMA>
		}
	}
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	2000036e 	.word	0x2000036e
 8000894:	2000036c 	.word	0x2000036c
 8000898:	2000060c 	.word	0x2000060c
 800089c:	20002d5c 	.word	0x20002d5c
 80008a0:	20002e24 	.word	0x20002e24
 80008a4:	2000036f 	.word	0x2000036f
 80008a8:	20000598 	.word	0x20000598

080008ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b0:	f000 fa50 	bl	8000d54 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b4:	f000 f822 	bl	80008fc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b8:	f7ff fd0e 	bl	80002d8 <MX_GPIO_Init>
  MX_DMA_Init();
 80008bc:	f7ff fcee 	bl	800029c <MX_DMA_Init>
  MX_ADC1_Init();
 80008c0:	f7ff fc44 	bl	800014c <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80008c4:	f007 fb9c 	bl	8008000 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80008c8:	f000 f908 	bl	8000adc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* Calibration of ADC (hadc1) for extra accuracy */
  HAL_ADCEx_Calibration_Start(&hadc1);
 80008cc:	4808      	ldr	r0, [pc, #32]	; (80008f0 <main+0x44>)
 80008ce:	f000 fec5 	bl	800165c <HAL_ADCEx_Calibration_Start>

  /* Start first DMA cycle */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) DMA_Buf, DMA_Size);
 80008d2:	22c8      	movs	r2, #200	; 0xc8
 80008d4:	4907      	ldr	r1, [pc, #28]	; (80008f4 <main+0x48>)
 80008d6:	4806      	ldr	r0, [pc, #24]	; (80008f0 <main+0x44>)
 80008d8:	f000 fb98 	bl	800100c <HAL_ADC_Start_DMA>

  /* Init PC13 State. Light is off. */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <main+0x4c>)
 80008e4:	f001 fbe6 	bl	80020b4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  While_Parser();
 80008e8:	f7ff febe 	bl	8000668 <While_Parser>
 80008ec:	e7fc      	b.n	80008e8 <main+0x3c>
 80008ee:	bf00      	nop
 80008f0:	20000598 	.word	0x20000598
 80008f4:	20002d5c 	.word	0x20002d5c
 80008f8:	40011000 	.word	0x40011000

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b094      	sub	sp, #80	; 0x50
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000906:	2228      	movs	r2, #40	; 0x28
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f008 f855 	bl	80089ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800092c:	2301      	movs	r3, #1
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800093a:	2301      	movs	r3, #1
 800093c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093e:	2302      	movs	r3, #2
 8000940:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000946:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000948:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800094c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000952:	4618      	mov	r0, r3
 8000954:	f002 ff62 	bl	800381c <HAL_RCC_OscConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800095e:	f000 f8b9 	bl	8000ad4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000962:	230f      	movs	r3, #15
 8000964:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000966:	2302      	movs	r3, #2
 8000968:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800096e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000972:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2102      	movs	r1, #2
 800097e:	4618      	mov	r0, r3
 8000980:	f003 f9cc 	bl	8003d1c <HAL_RCC_ClockConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800098a:	f000 f8a3 	bl	8000ad4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800098e:	2312      	movs	r3, #18
 8000990:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000996:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000998:	2300      	movs	r3, #0
 800099a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	4618      	mov	r0, r3
 80009a0:	f003 fb44 	bl	800402c <HAL_RCCEx_PeriphCLKConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80009aa:	f000 f893 	bl	8000ad4 <Error_Handler>
  }
}
 80009ae:	bf00      	nop
 80009b0:	3750      	adds	r7, #80	; 0x50
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin == GPIO_PIN_3)&&(ADC_Status == 0)&&(CDC_Status == 0))
 80009c2:	88fb      	ldrh	r3, [r7, #6]
 80009c4:	2b08      	cmp	r3, #8
 80009c6:	d113      	bne.n	80009f0 <HAL_GPIO_EXTI_Callback+0x38>
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <HAL_GPIO_EXTI_Callback+0x44>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d10f      	bne.n	80009f0 <HAL_GPIO_EXTI_Callback+0x38>
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x48>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d10b      	bne.n	80009f0 <HAL_GPIO_EXTI_Callback+0x38>
	{
		HAL_ADC_Stop_DMA(&hadc1);
 80009d8:	480a      	ldr	r0, [pc, #40]	; (8000a04 <HAL_GPIO_EXTI_Callback+0x4c>)
 80009da:	f000 fbf5 	bl	80011c8 <HAL_ADC_Stop_DMA>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) DMA_Buf, DMA_Size);
 80009de:	22c8      	movs	r2, #200	; 0xc8
 80009e0:	4909      	ldr	r1, [pc, #36]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x50>)
 80009e2:	4808      	ldr	r0, [pc, #32]	; (8000a04 <HAL_GPIO_EXTI_Callback+0x4c>)
 80009e4:	f000 fb12 	bl	800100c <HAL_ADC_Start_DMA>
		ADC_Status = 1;
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <HAL_GPIO_EXTI_Callback+0x44>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	701a      	strb	r2, [r3, #0]
 80009ee:	e000      	b.n	80009f2 <HAL_GPIO_EXTI_Callback+0x3a>
	}
	else
	{
		__NOP();
 80009f0:	bf00      	nop
	}
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2000036e 	.word	0x2000036e
 8000a00:	2000036f 	.word	0x2000036f
 8000a04:	20000598 	.word	0x20000598
 8000a08:	20002d5c 	.word	0x20002d5c

08000a0c <CDC_ReciveCallBack>:

void CDC_ReciveCallBack(uint8_t *Buf, uint32_t *Len)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
	memset(RX_Buf, 0, RX_Buf_Size);
 8000a16:	2240      	movs	r2, #64	; 0x40
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4810      	ldr	r0, [pc, #64]	; (8000a5c <CDC_ReciveCallBack+0x50>)
 8000a1c:	f007 ffcd 	bl	80089ba <memset>
	memcpy(RX_Buf, Buf, Len);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	461a      	mov	r2, r3
 8000a24:	6879      	ldr	r1, [r7, #4]
 8000a26:	480d      	ldr	r0, [pc, #52]	; (8000a5c <CDC_ReciveCallBack+0x50>)
 8000a28:	f007 ffbc 	bl	80089a4 <memcpy>

	uint16_t CDC_RX_Len = Len;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	81fb      	strh	r3, [r7, #14]
	uint8_t Mode_Byte = RX_Buf[0];
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <CDC_ReciveCallBack+0x50>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	737b      	strb	r3, [r7, #13]
	uint16_t Value_Bytes = atoi(&RX_Buf[1]);
 8000a36:	480a      	ldr	r0, [pc, #40]	; (8000a60 <CDC_ReciveCallBack+0x54>)
 8000a38:	f007 ff8c 	bl	8008954 <atoi>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	817b      	strh	r3, [r7, #10]
	CDC_Callback_Parser(Mode_Byte, Value_Bytes);
 8000a40:	897a      	ldrh	r2, [r7, #10]
 8000a42:	7b7b      	ldrb	r3, [r7, #13]
 8000a44:	4611      	mov	r1, r2
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fe40 	bl	80006cc <CDC_Callback_Parser>
	RX_Buf[CDC_RX_Len] = '\n';
 8000a4c:	89fb      	ldrh	r3, [r7, #14]
 8000a4e:	4a03      	ldr	r2, [pc, #12]	; (8000a5c <CDC_ReciveCallBack+0x50>)
 8000a50:	210a      	movs	r1, #10
 8000a52:	54d1      	strb	r1, [r2, r3]
}
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20002d1c 	.word	0x20002d1c
 8000a60:	20002d1d 	.word	0x20002d1d

08000a64 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	if(Mode == Trace_Mode_Num)
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_ADC_ConvCpltCallback+0x34>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d102      	bne.n	8000a7a <HAL_ADC_ConvCpltCallback+0x16>
		Trace_DMA_Callback(1);
 8000a74:	2001      	movs	r0, #1
 8000a76:	f7ff fec7 	bl	8000808 <Trace_DMA_Callback>
	if((Mode == Auto_Trigger_Mode_Num)||(Mode == True_Trigger_Mode_Num))
 8000a7a:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <HAL_ADC_ConvCpltCallback+0x34>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b03      	cmp	r3, #3
 8000a80:	d003      	beq.n	8000a8a <HAL_ADC_ConvCpltCallback+0x26>
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_ADC_ConvCpltCallback+0x34>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d102      	bne.n	8000a90 <HAL_ADC_ConvCpltCallback+0x2c>
		Trigger_DMA_Callback(1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff fe62 	bl	8000754 <Trigger_DMA_Callback>
			if(Trig_status == 1)
				Trig_status = 0;
		}
	}
	*/
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000374 	.word	0x20000374

08000a9c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	if(Mode == Trace_Mode_Num)
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d102      	bne.n	8000ab2 <HAL_ADC_ConvHalfCpltCallback+0x16>
			Trace_DMA_Callback(0);
 8000aac:	2000      	movs	r0, #0
 8000aae:	f7ff feab 	bl	8000808 <Trace_DMA_Callback>
	if((Mode == Auto_Trigger_Mode_Num)||(Mode == True_Trigger_Mode_Num))
 8000ab2:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b03      	cmp	r3, #3
 8000ab8:	d003      	beq.n	8000ac2 <HAL_ADC_ConvHalfCpltCallback+0x26>
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d102      	bne.n	8000ac8 <HAL_ADC_ConvHalfCpltCallback+0x2c>
		Trigger_DMA_Callback(0);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f7ff fe46 	bl	8000754 <Trigger_DMA_Callback>
			if(Trig_status == 1)
				Trig_status = 0;
		}
	}
	*/
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000374 	.word	0x20000374

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ada:	e7fe      	b.n	8000ada <Error_Handler+0x6>

08000adc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000ae2:	4a19      	ldr	r2, [pc, #100]	; (8000b48 <MX_SPI1_Init+0x6c>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000ae8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000af6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000afa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b0e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000b12:	2208      	movs	r2, #8
 8000b14:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000b2a:	220a      	movs	r2, #10
 8000b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000b30:	f003 fbee 	bl	8004310 <HAL_SPI_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000b3a:	f7ff ffcb 	bl	8000ad4 <Error_Handler>
  }

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20002eec 	.word	0x20002eec
 8000b48:	40013000 	.word	0x40013000

08000b4c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a22      	ldr	r2, [pc, #136]	; (8000bf0 <HAL_SPI_MspInit+0xa4>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d13d      	bne.n	8000be8 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b6c:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <HAL_SPI_MspInit+0xa8>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a20      	ldr	r2, [pc, #128]	; (8000bf4 <HAL_SPI_MspInit+0xa8>)
 8000b72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <HAL_SPI_MspInit+0xa8>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b84:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <HAL_SPI_MspInit+0xa8>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a1a      	ldr	r2, [pc, #104]	; (8000bf4 <HAL_SPI_MspInit+0xa8>)
 8000b8a:	f043 0308 	orr.w	r3, r3, #8
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <HAL_SPI_MspInit+0xa8>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0308 	and.w	r3, r3, #8
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000b9c:	2328      	movs	r3, #40	; 0x28
 8000b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4619      	mov	r1, r3
 8000bae:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <HAL_SPI_MspInit+0xac>)
 8000bb0:	f001 f926 	bl	8001e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bb4:	2310      	movs	r3, #16
 8000bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <HAL_SPI_MspInit+0xac>)
 8000bc8:	f001 f91a 	bl	8001e00 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <HAL_SPI_MspInit+0xb0>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
 8000be2:	4a06      	ldr	r2, [pc, #24]	; (8000bfc <HAL_SPI_MspInit+0xb0>)
 8000be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000be8:	bf00      	nop
 8000bea:	3728      	adds	r7, #40	; 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40013000 	.word	0x40013000
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40010c00 	.word	0x40010c00
 8000bfc:	40010000 	.word	0x40010000

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_MspInit+0x5c>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <HAL_MspInit+0x5c>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6193      	str	r3, [r2, #24]
 8000c12:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_MspInit+0x5c>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <HAL_MspInit+0x5c>)
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <HAL_MspInit+0x5c>)
 8000c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c28:	61d3      	str	r3, [r2, #28]
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <HAL_MspInit+0x5c>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_MspInit+0x60>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <HAL_MspInit+0x60>)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c52:	bf00      	nop
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40010000 	.word	0x40010000

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <NMI_Handler+0x4>

08000c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <MemManage_Handler+0x4>

08000c76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <BusFault_Handler+0x4>

08000c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <UsageFault_Handler+0x4>

08000c82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr

08000c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr

08000c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr

08000ca6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000caa:	f000 f899 	bl	8000de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000cb6:	2008      	movs	r0, #8
 8000cb8:	f001 fa14 	bl	80020e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <DMA1_Channel1_IRQHandler+0x10>)
 8000cc6:	f000 ff67 	bl	8001b98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200005c8 	.word	0x200005c8

08000cd4 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000cda:	f001 fb4c 	bl	8002376 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000360c 	.word	0x2000360c

08000ce8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000cee:	f001 fb42 	bl	8002376 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	2000360c 	.word	0x2000360c

08000cfc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d08:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d0a:	e003      	b.n	8000d14 <LoopCopyDataInit>

08000d0c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d0e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d10:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d12:	3104      	adds	r1, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d14:	480a      	ldr	r0, [pc, #40]	; (8000d40 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d18:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d1a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d1c:	d3f6      	bcc.n	8000d0c <CopyDataInit>
  ldr r2, =_sbss
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d20:	e002      	b.n	8000d28 <LoopFillZerobss>

08000d22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d24:	f842 3b04 	str.w	r3, [r2], #4

08000d28 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d2a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d2c:	d3f9      	bcc.n	8000d22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d2e:	f7ff ffe5 	bl	8000cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d32:	f007 fe13 	bl	800895c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d36:	f7ff fdb9 	bl	80008ac <main>
  bx lr
 8000d3a:	4770      	bx	lr
  ldr r3, =_sidata
 8000d3c:	08008ce4 	.word	0x08008ce4
  ldr r0, =_sdata
 8000d40:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d44:	20000350 	.word	0x20000350
  ldr r2, =_sbss
 8000d48:	20000350 	.word	0x20000350
  ldr r3, = _ebss
 8000d4c:	200038f8 	.word	0x200038f8

08000d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d50:	e7fe      	b.n	8000d50 <ADC1_2_IRQHandler>
	...

08000d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_Init+0x28>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_Init+0x28>)
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d64:	2003      	movs	r0, #3
 8000d66:	f000 fde1 	bl	800192c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f000 f808 	bl	8000d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d70:	f7ff ff46 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40022000 	.word	0x40022000

08000d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_InitTick+0x54>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_InitTick+0x58>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4619      	mov	r1, r3
 8000d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 fdf9 	bl	8001996 <HAL_SYSTICK_Config>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00e      	b.n	8000dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b0f      	cmp	r3, #15
 8000db2:	d80a      	bhi.n	8000dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db4:	2200      	movs	r2, #0
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f000 fdc1 	bl	8001942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc0:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <HAL_InitTick+0x5c>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e000      	b.n	8000dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000004 	.word	0x20000004
 8000dd8:	2000000c 	.word	0x2000000c
 8000ddc:	20000008 	.word	0x20000008

08000de0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_IncTick+0x1c>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <HAL_IncTick+0x20>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a03      	ldr	r2, [pc, #12]	; (8000e00 <HAL_IncTick+0x20>)
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	2000000c 	.word	0x2000000c
 8000e00:	20002f44 	.word	0x20002f44

08000e04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b02      	ldr	r3, [pc, #8]	; (8000e14 <HAL_GetTick+0x10>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr
 8000e14:	20002f44 	.word	0x20002f44

08000e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e20:	f7ff fff0 	bl	8000e04 <HAL_GetTick>
 8000e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e30:	d005      	beq.n	8000e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <HAL_Delay+0x40>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e3e:	bf00      	nop
 8000e40:	f7ff ffe0 	bl	8000e04 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d8f7      	bhi.n	8000e40 <HAL_Delay+0x28>
  {
  }
}
 8000e50:	bf00      	nop
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	2000000c 	.word	0x2000000c

08000e5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e64:	2300      	movs	r3, #0
 8000e66:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e0be      	b.n	8000ffc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d109      	bne.n	8000ea0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff f994 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f000 fb3b 	bl	800151c <ADC_ConversionStop_Disable>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eae:	f003 0310 	and.w	r3, r3, #16
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f040 8099 	bne.w	8000fea <HAL_ADC_Init+0x18e>
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f040 8095 	bne.w	8000fea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ec8:	f023 0302 	bic.w	r3, r3, #2
 8000ecc:	f043 0202 	orr.w	r2, r3, #2
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000edc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	7b1b      	ldrb	r3, [r3, #12]
 8000ee2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ee4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ef4:	d003      	beq.n	8000efe <HAL_ADC_Init+0xa2>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d102      	bne.n	8000f04 <HAL_ADC_Init+0xa8>
 8000efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f02:	e000      	b.n	8000f06 <HAL_ADC_Init+0xaa>
 8000f04:	2300      	movs	r3, #0
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7d1b      	ldrb	r3, [r3, #20]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d119      	bne.n	8000f48 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	7b1b      	ldrb	r3, [r3, #12]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d109      	bne.n	8000f30 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	035a      	lsls	r2, r3, #13
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	e00b      	b.n	8000f48 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f34:	f043 0220 	orr.w	r2, r3, #32
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f40:	f043 0201 	orr.w	r2, r3, #1
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	4b28      	ldr	r3, [pc, #160]	; (8001004 <HAL_ADC_Init+0x1a8>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	6812      	ldr	r2, [r2, #0]
 8000f6a:	68b9      	ldr	r1, [r7, #8]
 8000f6c:	430b      	orrs	r3, r1
 8000f6e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f78:	d003      	beq.n	8000f82 <HAL_ADC_Init+0x126>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d104      	bne.n	8000f8c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	051b      	lsls	r3, r3, #20
 8000f8a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f92:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <HAL_ADC_Init+0x1ac>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d10b      	bne.n	8000fc8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fba:	f023 0303 	bic.w	r3, r3, #3
 8000fbe:	f043 0201 	orr.w	r2, r3, #1
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fc6:	e018      	b.n	8000ffa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fcc:	f023 0312 	bic.w	r3, r3, #18
 8000fd0:	f043 0210 	orr.w	r2, r3, #16
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fdc:	f043 0201 	orr.w	r2, r3, #1
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fe8:	e007      	b.n	8000ffa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	f043 0210 	orr.w	r2, r3, #16
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	ffe1f7fd 	.word	0xffe1f7fd
 8001008:	ff1f0efe 	.word	0xff1f0efe

0800100c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a64      	ldr	r2, [pc, #400]	; (80011b4 <HAL_ADC_Start_DMA+0x1a8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d004      	beq.n	8001030 <HAL_ADC_Start_DMA+0x24>
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a63      	ldr	r2, [pc, #396]	; (80011b8 <HAL_ADC_Start_DMA+0x1ac>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d106      	bne.n	800103e <HAL_ADC_Start_DMA+0x32>
 8001030:	4b60      	ldr	r3, [pc, #384]	; (80011b4 <HAL_ADC_Start_DMA+0x1a8>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001038:	2b00      	cmp	r3, #0
 800103a:	f040 80b3 	bne.w	80011a4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001044:	2b01      	cmp	r3, #1
 8001046:	d101      	bne.n	800104c <HAL_ADC_Start_DMA+0x40>
 8001048:	2302      	movs	r3, #2
 800104a:	e0ae      	b.n	80011aa <HAL_ADC_Start_DMA+0x19e>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f000 fa0f 	bl	8001478 <ADC_Enable>
 800105a:	4603      	mov	r3, r0
 800105c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800105e:	7dfb      	ldrb	r3, [r7, #23]
 8001060:	2b00      	cmp	r3, #0
 8001062:	f040 809a 	bne.w	800119a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800106e:	f023 0301 	bic.w	r3, r3, #1
 8001072:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a4e      	ldr	r2, [pc, #312]	; (80011b8 <HAL_ADC_Start_DMA+0x1ac>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d105      	bne.n	8001090 <HAL_ADC_Start_DMA+0x84>
 8001084:	4b4b      	ldr	r3, [pc, #300]	; (80011b4 <HAL_ADC_Start_DMA+0x1a8>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d115      	bne.n	80010bc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001094:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d026      	beq.n	80010f8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010ba:	e01d      	b.n	80010f8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a39      	ldr	r2, [pc, #228]	; (80011b4 <HAL_ADC_Start_DMA+0x1a8>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d004      	beq.n	80010dc <HAL_ADC_Start_DMA+0xd0>
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a38      	ldr	r2, [pc, #224]	; (80011b8 <HAL_ADC_Start_DMA+0x1ac>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d10d      	bne.n	80010f8 <HAL_ADC_Start_DMA+0xec>
 80010dc:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <HAL_ADC_Start_DMA+0x1a8>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d007      	beq.n	80010f8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d006      	beq.n	8001112 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001108:	f023 0206 	bic.w	r2, r3, #6
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001110:	e002      	b.n	8001118 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2200      	movs	r2, #0
 8001116:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	4a25      	ldr	r2, [pc, #148]	; (80011bc <HAL_ADC_Start_DMA+0x1b0>)
 8001126:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	4a24      	ldr	r2, [pc, #144]	; (80011c0 <HAL_ADC_Start_DMA+0x1b4>)
 800112e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	4a23      	ldr	r2, [pc, #140]	; (80011c4 <HAL_ADC_Start_DMA+0x1b8>)
 8001136:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f06f 0202 	mvn.w	r2, #2
 8001140:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001150:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6a18      	ldr	r0, [r3, #32]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	334c      	adds	r3, #76	; 0x4c
 800115c:	4619      	mov	r1, r3
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f000 fc7f 	bl	8001a64 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001170:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001174:	d108      	bne.n	8001188 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001184:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001186:	e00f      	b.n	80011a8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001196:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001198:	e006      	b.n	80011a8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80011a2:	e001      	b.n	80011a8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40012400 	.word	0x40012400
 80011b8:	40012800 	.word	0x40012800
 80011bc:	08001591 	.word	0x08001591
 80011c0:	0800160d 	.word	0x0800160d
 80011c4:	08001629 	.word	0x08001629

080011c8 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d0:	2300      	movs	r3, #0
 80011d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d101      	bne.n	80011e2 <HAL_ADC_Stop_DMA+0x1a>
 80011de:	2302      	movs	r3, #2
 80011e0:	e039      	b.n	8001256 <HAL_ADC_Stop_DMA+0x8e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f996 	bl	800151c <ADC_ConversionStop_Disable>
 80011f0:	4603      	mov	r3, r0
 80011f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d128      	bne.n	800124c <HAL_ADC_Stop_DMA+0x84>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001208:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001212:	2b02      	cmp	r3, #2
 8001214:	d11a      	bne.n	800124c <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a1b      	ldr	r3, [r3, #32]
 800121a:	4618      	mov	r0, r3
 800121c:	f000 fc81 	bl	8001b22 <HAL_DMA_Abort>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10a      	bne.n	8001240 <HAL_ADC_Stop_DMA+0x78>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001232:	f023 0301 	bic.w	r3, r3, #1
 8001236:	f043 0201 	orr.w	r2, r3, #1
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	629a      	str	r2, [r3, #40]	; 0x28
 800123e:	e005      	b.n	800124c <HAL_ADC_Stop_DMA+0x84>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001244:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8001254:	7bfb      	ldrb	r3, [r7, #15]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr

08001276 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <HAL_ADC_ConfigChannel+0x20>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e0dc      	b.n	8001462 <HAL_ADC_ConfigChannel+0x1da>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b06      	cmp	r3, #6
 80012b6:	d81c      	bhi.n	80012f2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	3b05      	subs	r3, #5
 80012ca:	221f      	movs	r2, #31
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	4019      	ands	r1, r3
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	4613      	mov	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	3b05      	subs	r3, #5
 80012e4:	fa00 f203 	lsl.w	r2, r0, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	430a      	orrs	r2, r1
 80012ee:	635a      	str	r2, [r3, #52]	; 0x34
 80012f0:	e03c      	b.n	800136c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b0c      	cmp	r3, #12
 80012f8:	d81c      	bhi.n	8001334 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	3b23      	subs	r3, #35	; 0x23
 800130c:	221f      	movs	r2, #31
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	4019      	ands	r1, r3
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	6818      	ldr	r0, [r3, #0]
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	3b23      	subs	r3, #35	; 0x23
 8001326:	fa00 f203 	lsl.w	r2, r0, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	430a      	orrs	r2, r1
 8001330:	631a      	str	r2, [r3, #48]	; 0x30
 8001332:	e01b      	b.n	800136c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	3b41      	subs	r3, #65	; 0x41
 8001346:	221f      	movs	r2, #31
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	4019      	ands	r1, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	3b41      	subs	r3, #65	; 0x41
 8001360:	fa00 f203 	lsl.w	r2, r0, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b09      	cmp	r3, #9
 8001372:	d91c      	bls.n	80013ae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68d9      	ldr	r1, [r3, #12]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	3b1e      	subs	r3, #30
 8001386:	2207      	movs	r2, #7
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	4019      	ands	r1, r3
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	6898      	ldr	r0, [r3, #8]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4613      	mov	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4413      	add	r3, r2
 800139e:	3b1e      	subs	r3, #30
 80013a0:	fa00 f203 	lsl.w	r2, r0, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	e019      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6919      	ldr	r1, [r3, #16]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	2207      	movs	r2, #7
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	4019      	ands	r1, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	6898      	ldr	r0, [r3, #8]
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	fa00 f203 	lsl.w	r2, r0, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b10      	cmp	r3, #16
 80013e8:	d003      	beq.n	80013f2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013ee:	2b11      	cmp	r3, #17
 80013f0:	d132      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a1d      	ldr	r2, [pc, #116]	; (800146c <HAL_ADC_ConfigChannel+0x1e4>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d125      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d126      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001418:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b10      	cmp	r3, #16
 8001420:	d11a      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <HAL_ADC_ConfigChannel+0x1e8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a13      	ldr	r2, [pc, #76]	; (8001474 <HAL_ADC_ConfigChannel+0x1ec>)
 8001428:	fba2 2303 	umull	r2, r3, r2, r3
 800142c:	0c9a      	lsrs	r2, r3, #18
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001438:	e002      	b.n	8001440 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	3b01      	subs	r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f9      	bne.n	800143a <HAL_ADC_ConfigChannel+0x1b2>
 8001446:	e007      	b.n	8001458 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144c:	f043 0220 	orr.w	r2, r3, #32
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001460:	7bfb      	ldrb	r3, [r7, #15]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	40012400 	.word	0x40012400
 8001470:	20000004 	.word	0x20000004
 8001474:	431bde83 	.word	0x431bde83

08001478 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b01      	cmp	r3, #1
 8001494:	d039      	beq.n	800150a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f042 0201 	orr.w	r2, r2, #1
 80014a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014a6:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <ADC_Enable+0x9c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a1b      	ldr	r2, [pc, #108]	; (8001518 <ADC_Enable+0xa0>)
 80014ac:	fba2 2303 	umull	r2, r3, r2, r3
 80014b0:	0c9b      	lsrs	r3, r3, #18
 80014b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014b4:	e002      	b.n	80014bc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f9      	bne.n	80014b6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014c2:	f7ff fc9f 	bl	8000e04 <HAL_GetTick>
 80014c6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014c8:	e018      	b.n	80014fc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014ca:	f7ff fc9b 	bl	8000e04 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d911      	bls.n	80014fc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	f043 0210 	orr.w	r2, r3, #16
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e8:	f043 0201 	orr.w	r2, r3, #1
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e007      	b.n	800150c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b01      	cmp	r3, #1
 8001508:	d1df      	bne.n	80014ca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000004 	.word	0x20000004
 8001518:	431bde83 	.word	0x431bde83

0800151c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b01      	cmp	r3, #1
 8001534:	d127      	bne.n	8001586 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 0201 	bic.w	r2, r2, #1
 8001544:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001546:	f7ff fc5d 	bl	8000e04 <HAL_GetTick>
 800154a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800154c:	e014      	b.n	8001578 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800154e:	f7ff fc59 	bl	8000e04 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d90d      	bls.n	8001578 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	f043 0210 	orr.w	r2, r3, #16
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156c:	f043 0201 	orr.w	r2, r3, #1
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e007      	b.n	8001588 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b01      	cmp	r3, #1
 8001584:	d0e3      	beq.n	800154e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d127      	bne.n	80015fa <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015c0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015c4:	d115      	bne.n	80015f2 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d111      	bne.n	80015f2 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d105      	bne.n	80015f2 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ea:	f043 0201 	orr.w	r2, r3, #1
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f7ff fa36 	bl	8000a64 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80015f8:	e004      	b.n	8001604 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	4798      	blx	r3
}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f7ff fa3e 	bl	8000a9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001646:	f043 0204 	orr.w	r2, r3, #4
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f7ff fe11 	bl	8001276 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b087      	sub	sp, #28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001672:	2b01      	cmp	r3, #1
 8001674:	d101      	bne.n	800167a <HAL_ADCEx_Calibration_Start+0x1e>
 8001676:	2302      	movs	r3, #2
 8001678:	e086      	b.n	8001788 <HAL_ADCEx_Calibration_Start+0x12c>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ff4a 	bl	800151c <ADC_ConversionStop_Disable>
 8001688:	4603      	mov	r3, r0
 800168a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800168c:	7dfb      	ldrb	r3, [r7, #23]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d175      	bne.n	800177e <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001696:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800169a:	f023 0302 	bic.w	r3, r3, #2
 800169e:	f043 0202 	orr.w	r2, r3, #2
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80016a6:	4b3a      	ldr	r3, [pc, #232]	; (8001790 <HAL_ADCEx_Calibration_Start+0x134>)
 80016a8:	681c      	ldr	r4, [r3, #0]
 80016aa:	2002      	movs	r0, #2
 80016ac:	f002 fd74 	bl	8004198 <HAL_RCCEx_GetPeriphCLKFreq>
 80016b0:	4603      	mov	r3, r0
 80016b2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80016b6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80016b8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80016ba:	e002      	b.n	80016c2 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3b01      	subs	r3, #1
 80016c0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f9      	bne.n	80016bc <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fed5 	bl	8001478 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f042 0208 	orr.w	r2, r2, #8
 80016dc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80016de:	f7ff fb91 	bl	8000e04 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80016e4:	e014      	b.n	8001710 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80016e6:	f7ff fb8d 	bl	8000e04 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b0a      	cmp	r3, #10
 80016f2:	d90d      	bls.n	8001710 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	f023 0312 	bic.w	r3, r3, #18
 80016fc:	f043 0210 	orr.w	r2, r3, #16
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e03b      	b.n	8001788 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1e3      	bne.n	80016e6 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f042 0204 	orr.w	r2, r2, #4
 800172c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800172e:	f7ff fb69 	bl	8000e04 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001734:	e014      	b.n	8001760 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001736:	f7ff fb65 	bl	8000e04 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b0a      	cmp	r3, #10
 8001742:	d90d      	bls.n	8001760 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	f023 0312 	bic.w	r3, r3, #18
 800174c:	f043 0210 	orr.w	r2, r3, #16
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e013      	b.n	8001788 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1e3      	bne.n	8001736 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001772:	f023 0303 	bic.w	r3, r3, #3
 8001776:	f043 0201 	orr.w	r2, r3, #1
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001786:	7dfb      	ldrb	r3, [r7, #23]
}
 8001788:	4618      	mov	r0, r3
 800178a:	371c      	adds	r7, #28
 800178c:	46bd      	mov	sp, r7
 800178e:	bd90      	pop	{r4, r7, pc}
 8001790:	20000004 	.word	0x20000004

08001794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c6:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	60d3      	str	r3, [r2, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	2b00      	cmp	r3, #0
 8001808:	db0b      	blt.n	8001822 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	4906      	ldr	r1, [pc, #24]	; (800182c <__NVIC_EnableIRQ+0x34>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2001      	movs	r0, #1
 800181a:	fa00 f202 	lsl.w	r2, r0, r2
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	e000e100 	.word	0xe000e100

08001830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db0a      	blt.n	800185a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	490c      	ldr	r1, [pc, #48]	; (800187c <__NVIC_SetPriority+0x4c>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	440b      	add	r3, r1
 8001854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001858:	e00a      	b.n	8001870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4908      	ldr	r1, [pc, #32]	; (8001880 <__NVIC_SetPriority+0x50>)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	3b04      	subs	r3, #4
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	440b      	add	r3, r1
 800186e:	761a      	strb	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000e100 	.word	0xe000e100
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f1c3 0307 	rsb	r3, r3, #7
 800189e:	2b04      	cmp	r3, #4
 80018a0:	bf28      	it	cs
 80018a2:	2304      	movcs	r3, #4
 80018a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3304      	adds	r3, #4
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d902      	bls.n	80018b4 <NVIC_EncodePriority+0x30>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3b03      	subs	r3, #3
 80018b2:	e000      	b.n	80018b6 <NVIC_EncodePriority+0x32>
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	4313      	orrs	r3, r2
         );
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f8:	d301      	bcc.n	80018fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00f      	b.n	800191e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <SysTick_Config+0x40>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001906:	210f      	movs	r1, #15
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f7ff ff90 	bl	8001830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <SysTick_Config+0x40>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <SysTick_Config+0x40>)
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff2d 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001954:	f7ff ff42 	bl	80017dc <__NVIC_GetPriorityGrouping>
 8001958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	6978      	ldr	r0, [r7, #20]
 8001960:	f7ff ff90 	bl	8001884 <NVIC_EncodePriority>
 8001964:	4602      	mov	r2, r0
 8001966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff5f 	bl	8001830 <__NVIC_SetPriority>
}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff35 	bl	80017f8 <__NVIC_EnableIRQ>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ffa2 	bl	80018e8 <SysTick_Config>
 80019a4:	4603      	mov	r3, r0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e043      	b.n	8001a4e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <HAL_DMA_Init+0xa8>)
 80019ce:	4413      	add	r3, r2
 80019d0:	4a22      	ldr	r2, [pc, #136]	; (8001a5c <HAL_DMA_Init+0xac>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	091b      	lsrs	r3, r3, #4
 80019d8:	009a      	lsls	r2, r3, #2
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a1f      	ldr	r2, [pc, #124]	; (8001a60 <HAL_DMA_Init+0xb0>)
 80019e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2202      	movs	r2, #2
 80019e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80019fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80019fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr
 8001a58:	bffdfff8 	.word	0xbffdfff8
 8001a5c:	cccccccd 	.word	0xcccccccd
 8001a60:	40020000 	.word	0x40020000

08001a64 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_DMA_Start_IT+0x20>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e04a      	b.n	8001b1a <HAL_DMA_Start_IT+0xb6>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d13a      	bne.n	8001b0c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2202      	movs	r2, #2
 8001a9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0201 	bic.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 f972 	bl	8001da4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 020e 	orr.w	r2, r2, #14
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	e00f      	b.n	8001afa <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0204 	bic.w	r2, r2, #4
 8001ae8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f042 020a 	orr.w	r2, r2, #10
 8001af8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 0201 	orr.w	r2, r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	e005      	b.n	8001b18 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b14:	2302      	movs	r3, #2
 8001b16:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b085      	sub	sp, #20
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d008      	beq.n	8001b4a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2204      	movs	r2, #4
 8001b3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e020      	b.n	8001b8c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 020e 	bic.w	r2, r2, #14
 8001b58:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0201 	bic.w	r2, r2, #1
 8001b68:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b72:	2101      	movs	r1, #1
 8001b74:	fa01 f202 	lsl.w	r2, r1, r2
 8001b78:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
	...

08001b98 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d04f      	beq.n	8001c60 <HAL_DMA_IRQHandler+0xc8>
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d04a      	beq.n	8001c60 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0320 	and.w	r3, r3, #32
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d107      	bne.n	8001be8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0204 	bic.w	r2, r2, #4
 8001be6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a66      	ldr	r2, [pc, #408]	; (8001d88 <HAL_DMA_IRQHandler+0x1f0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d029      	beq.n	8001c46 <HAL_DMA_IRQHandler+0xae>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a65      	ldr	r2, [pc, #404]	; (8001d8c <HAL_DMA_IRQHandler+0x1f4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d022      	beq.n	8001c42 <HAL_DMA_IRQHandler+0xaa>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a63      	ldr	r2, [pc, #396]	; (8001d90 <HAL_DMA_IRQHandler+0x1f8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d01a      	beq.n	8001c3c <HAL_DMA_IRQHandler+0xa4>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a62      	ldr	r2, [pc, #392]	; (8001d94 <HAL_DMA_IRQHandler+0x1fc>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d012      	beq.n	8001c36 <HAL_DMA_IRQHandler+0x9e>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a60      	ldr	r2, [pc, #384]	; (8001d98 <HAL_DMA_IRQHandler+0x200>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00a      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x98>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a5f      	ldr	r2, [pc, #380]	; (8001d9c <HAL_DMA_IRQHandler+0x204>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d102      	bne.n	8001c2a <HAL_DMA_IRQHandler+0x92>
 8001c24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c28:	e00e      	b.n	8001c48 <HAL_DMA_IRQHandler+0xb0>
 8001c2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c2e:	e00b      	b.n	8001c48 <HAL_DMA_IRQHandler+0xb0>
 8001c30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c34:	e008      	b.n	8001c48 <HAL_DMA_IRQHandler+0xb0>
 8001c36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c3a:	e005      	b.n	8001c48 <HAL_DMA_IRQHandler+0xb0>
 8001c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c40:	e002      	b.n	8001c48 <HAL_DMA_IRQHandler+0xb0>
 8001c42:	2340      	movs	r3, #64	; 0x40
 8001c44:	e000      	b.n	8001c48 <HAL_DMA_IRQHandler+0xb0>
 8001c46:	2304      	movs	r3, #4
 8001c48:	4a55      	ldr	r2, [pc, #340]	; (8001da0 <HAL_DMA_IRQHandler+0x208>)
 8001c4a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 8094 	beq.w	8001d7e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c5e:	e08e      	b.n	8001d7e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	2202      	movs	r2, #2
 8001c66:	409a      	lsls	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d056      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x186>
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d051      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10b      	bne.n	8001ca0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 020a 	bic.w	r2, r2, #10
 8001c96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a38      	ldr	r2, [pc, #224]	; (8001d88 <HAL_DMA_IRQHandler+0x1f0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d029      	beq.n	8001cfe <HAL_DMA_IRQHandler+0x166>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a37      	ldr	r2, [pc, #220]	; (8001d8c <HAL_DMA_IRQHandler+0x1f4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d022      	beq.n	8001cfa <HAL_DMA_IRQHandler+0x162>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a35      	ldr	r2, [pc, #212]	; (8001d90 <HAL_DMA_IRQHandler+0x1f8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d01a      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x15c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a34      	ldr	r2, [pc, #208]	; (8001d94 <HAL_DMA_IRQHandler+0x1fc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d012      	beq.n	8001cee <HAL_DMA_IRQHandler+0x156>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a32      	ldr	r2, [pc, #200]	; (8001d98 <HAL_DMA_IRQHandler+0x200>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00a      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x150>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a31      	ldr	r2, [pc, #196]	; (8001d9c <HAL_DMA_IRQHandler+0x204>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d102      	bne.n	8001ce2 <HAL_DMA_IRQHandler+0x14a>
 8001cdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ce0:	e00e      	b.n	8001d00 <HAL_DMA_IRQHandler+0x168>
 8001ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ce6:	e00b      	b.n	8001d00 <HAL_DMA_IRQHandler+0x168>
 8001ce8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cec:	e008      	b.n	8001d00 <HAL_DMA_IRQHandler+0x168>
 8001cee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cf2:	e005      	b.n	8001d00 <HAL_DMA_IRQHandler+0x168>
 8001cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cf8:	e002      	b.n	8001d00 <HAL_DMA_IRQHandler+0x168>
 8001cfa:	2320      	movs	r3, #32
 8001cfc:	e000      	b.n	8001d00 <HAL_DMA_IRQHandler+0x168>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	4a27      	ldr	r2, [pc, #156]	; (8001da0 <HAL_DMA_IRQHandler+0x208>)
 8001d02:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d034      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d1c:	e02f      	b.n	8001d7e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	2208      	movs	r2, #8
 8001d24:	409a      	lsls	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d028      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x1e8>
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d023      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 020e 	bic.w	r2, r2, #14
 8001d46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d50:	2101      	movs	r1, #1
 8001d52:	fa01 f202 	lsl.w	r2, r1, r2
 8001d56:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d004      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	4798      	blx	r3
    }
  }
  return;
 8001d7e:	bf00      	nop
 8001d80:	bf00      	nop
}
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40020008 	.word	0x40020008
 8001d8c:	4002001c 	.word	0x4002001c
 8001d90:	40020030 	.word	0x40020030
 8001d94:	40020044 	.word	0x40020044
 8001d98:	40020058 	.word	0x40020058
 8001d9c:	4002006c 	.word	0x4002006c
 8001da0:	40020000 	.word	0x40020000

08001da4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dba:	2101      	movs	r1, #1
 8001dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b10      	cmp	r3, #16
 8001dd0:	d108      	bne.n	8001de4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001de2:	e007      	b.n	8001df4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	60da      	str	r2, [r3, #12]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
	...

08001e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b08b      	sub	sp, #44	; 0x2c
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e12:	e127      	b.n	8002064 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e14:	2201      	movs	r2, #1
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	f040 8116 	bne.w	800205e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b12      	cmp	r3, #18
 8001e38:	d034      	beq.n	8001ea4 <HAL_GPIO_Init+0xa4>
 8001e3a:	2b12      	cmp	r3, #18
 8001e3c:	d80d      	bhi.n	8001e5a <HAL_GPIO_Init+0x5a>
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d02b      	beq.n	8001e9a <HAL_GPIO_Init+0x9a>
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d804      	bhi.n	8001e50 <HAL_GPIO_Init+0x50>
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d031      	beq.n	8001eae <HAL_GPIO_Init+0xae>
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d01c      	beq.n	8001e88 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e4e:	e048      	b.n	8001ee2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	d043      	beq.n	8001edc <HAL_GPIO_Init+0xdc>
 8001e54:	2b11      	cmp	r3, #17
 8001e56:	d01b      	beq.n	8001e90 <HAL_GPIO_Init+0x90>
          break;
 8001e58:	e043      	b.n	8001ee2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e5a:	4a89      	ldr	r2, [pc, #548]	; (8002080 <HAL_GPIO_Init+0x280>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d026      	beq.n	8001eae <HAL_GPIO_Init+0xae>
 8001e60:	4a87      	ldr	r2, [pc, #540]	; (8002080 <HAL_GPIO_Init+0x280>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d806      	bhi.n	8001e74 <HAL_GPIO_Init+0x74>
 8001e66:	4a87      	ldr	r2, [pc, #540]	; (8002084 <HAL_GPIO_Init+0x284>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d020      	beq.n	8001eae <HAL_GPIO_Init+0xae>
 8001e6c:	4a86      	ldr	r2, [pc, #536]	; (8002088 <HAL_GPIO_Init+0x288>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d01d      	beq.n	8001eae <HAL_GPIO_Init+0xae>
          break;
 8001e72:	e036      	b.n	8001ee2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e74:	4a85      	ldr	r2, [pc, #532]	; (800208c <HAL_GPIO_Init+0x28c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d019      	beq.n	8001eae <HAL_GPIO_Init+0xae>
 8001e7a:	4a85      	ldr	r2, [pc, #532]	; (8002090 <HAL_GPIO_Init+0x290>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d016      	beq.n	8001eae <HAL_GPIO_Init+0xae>
 8001e80:	4a84      	ldr	r2, [pc, #528]	; (8002094 <HAL_GPIO_Init+0x294>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d013      	beq.n	8001eae <HAL_GPIO_Init+0xae>
          break;
 8001e86:	e02c      	b.n	8001ee2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	623b      	str	r3, [r7, #32]
          break;
 8001e8e:	e028      	b.n	8001ee2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	3304      	adds	r3, #4
 8001e96:	623b      	str	r3, [r7, #32]
          break;
 8001e98:	e023      	b.n	8001ee2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	3308      	adds	r3, #8
 8001ea0:	623b      	str	r3, [r7, #32]
          break;
 8001ea2:	e01e      	b.n	8001ee2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	330c      	adds	r3, #12
 8001eaa:	623b      	str	r3, [r7, #32]
          break;
 8001eac:	e019      	b.n	8001ee2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d102      	bne.n	8001ebc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	623b      	str	r3, [r7, #32]
          break;
 8001eba:	e012      	b.n	8001ee2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d105      	bne.n	8001ed0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec4:	2308      	movs	r3, #8
 8001ec6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69fa      	ldr	r2, [r7, #28]
 8001ecc:	611a      	str	r2, [r3, #16]
          break;
 8001ece:	e008      	b.n	8001ee2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	615a      	str	r2, [r3, #20]
          break;
 8001eda:	e002      	b.n	8001ee2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
          break;
 8001ee0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	2bff      	cmp	r3, #255	; 0xff
 8001ee6:	d801      	bhi.n	8001eec <HAL_GPIO_Init+0xec>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	e001      	b.n	8001ef0 <HAL_GPIO_Init+0xf0>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3304      	adds	r3, #4
 8001ef0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	2bff      	cmp	r3, #255	; 0xff
 8001ef6:	d802      	bhi.n	8001efe <HAL_GPIO_Init+0xfe>
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	e002      	b.n	8001f04 <HAL_GPIO_Init+0x104>
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	3b08      	subs	r3, #8
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	210f      	movs	r1, #15
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	401a      	ands	r2, r3
 8001f16:	6a39      	ldr	r1, [r7, #32]
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 8096 	beq.w	800205e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f32:	4b59      	ldr	r3, [pc, #356]	; (8002098 <HAL_GPIO_Init+0x298>)
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	4a58      	ldr	r2, [pc, #352]	; (8002098 <HAL_GPIO_Init+0x298>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6193      	str	r3, [r2, #24]
 8001f3e:	4b56      	ldr	r3, [pc, #344]	; (8002098 <HAL_GPIO_Init+0x298>)
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f4a:	4a54      	ldr	r2, [pc, #336]	; (800209c <HAL_GPIO_Init+0x29c>)
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	089b      	lsrs	r3, r3, #2
 8001f50:	3302      	adds	r3, #2
 8001f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f56:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	220f      	movs	r2, #15
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a4b      	ldr	r2, [pc, #300]	; (80020a0 <HAL_GPIO_Init+0x2a0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d013      	beq.n	8001f9e <HAL_GPIO_Init+0x19e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a4a      	ldr	r2, [pc, #296]	; (80020a4 <HAL_GPIO_Init+0x2a4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00d      	beq.n	8001f9a <HAL_GPIO_Init+0x19a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a49      	ldr	r2, [pc, #292]	; (80020a8 <HAL_GPIO_Init+0x2a8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d007      	beq.n	8001f96 <HAL_GPIO_Init+0x196>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a48      	ldr	r2, [pc, #288]	; (80020ac <HAL_GPIO_Init+0x2ac>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d101      	bne.n	8001f92 <HAL_GPIO_Init+0x192>
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e006      	b.n	8001fa0 <HAL_GPIO_Init+0x1a0>
 8001f92:	2304      	movs	r3, #4
 8001f94:	e004      	b.n	8001fa0 <HAL_GPIO_Init+0x1a0>
 8001f96:	2302      	movs	r3, #2
 8001f98:	e002      	b.n	8001fa0 <HAL_GPIO_Init+0x1a0>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <HAL_GPIO_Init+0x1a0>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa2:	f002 0203 	and.w	r2, r2, #3
 8001fa6:	0092      	lsls	r2, r2, #2
 8001fa8:	4093      	lsls	r3, r2
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fb0:	493a      	ldr	r1, [pc, #232]	; (800209c <HAL_GPIO_Init+0x29c>)
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	089b      	lsrs	r3, r3, #2
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d006      	beq.n	8001fd8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fca:	4b39      	ldr	r3, [pc, #228]	; (80020b0 <HAL_GPIO_Init+0x2b0>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	4938      	ldr	r1, [pc, #224]	; (80020b0 <HAL_GPIO_Init+0x2b0>)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]
 8001fd6:	e006      	b.n	8001fe6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fd8:	4b35      	ldr	r3, [pc, #212]	; (80020b0 <HAL_GPIO_Init+0x2b0>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	4933      	ldr	r1, [pc, #204]	; (80020b0 <HAL_GPIO_Init+0x2b0>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d006      	beq.n	8002000 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ff2:	4b2f      	ldr	r3, [pc, #188]	; (80020b0 <HAL_GPIO_Init+0x2b0>)
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	492e      	ldr	r1, [pc, #184]	; (80020b0 <HAL_GPIO_Init+0x2b0>)
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	604b      	str	r3, [r1, #4]
 8001ffe:	e006      	b.n	800200e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002000:	4b2b      	ldr	r3, [pc, #172]	; (80020b0 <HAL_GPIO_Init+0x2b0>)
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	43db      	mvns	r3, r3
 8002008:	4929      	ldr	r1, [pc, #164]	; (80020b0 <HAL_GPIO_Init+0x2b0>)
 800200a:	4013      	ands	r3, r2
 800200c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d006      	beq.n	8002028 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800201a:	4b25      	ldr	r3, [pc, #148]	; (80020b0 <HAL_GPIO_Init+0x2b0>)
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	4924      	ldr	r1, [pc, #144]	; (80020b0 <HAL_GPIO_Init+0x2b0>)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	608b      	str	r3, [r1, #8]
 8002026:	e006      	b.n	8002036 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002028:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <HAL_GPIO_Init+0x2b0>)
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	43db      	mvns	r3, r3
 8002030:	491f      	ldr	r1, [pc, #124]	; (80020b0 <HAL_GPIO_Init+0x2b0>)
 8002032:	4013      	ands	r3, r2
 8002034:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d006      	beq.n	8002050 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002042:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <HAL_GPIO_Init+0x2b0>)
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	491a      	ldr	r1, [pc, #104]	; (80020b0 <HAL_GPIO_Init+0x2b0>)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	60cb      	str	r3, [r1, #12]
 800204e:	e006      	b.n	800205e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002050:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <HAL_GPIO_Init+0x2b0>)
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	43db      	mvns	r3, r3
 8002058:	4915      	ldr	r1, [pc, #84]	; (80020b0 <HAL_GPIO_Init+0x2b0>)
 800205a:	4013      	ands	r3, r2
 800205c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	3301      	adds	r3, #1
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	fa22 f303 	lsr.w	r3, r2, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	f47f aed0 	bne.w	8001e14 <HAL_GPIO_Init+0x14>
  }
}
 8002074:	bf00      	nop
 8002076:	372c      	adds	r7, #44	; 0x2c
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	10210000 	.word	0x10210000
 8002084:	10110000 	.word	0x10110000
 8002088:	10120000 	.word	0x10120000
 800208c:	10310000 	.word	0x10310000
 8002090:	10320000 	.word	0x10320000
 8002094:	10220000 	.word	0x10220000
 8002098:	40021000 	.word	0x40021000
 800209c:	40010000 	.word	0x40010000
 80020a0:	40010800 	.word	0x40010800
 80020a4:	40010c00 	.word	0x40010c00
 80020a8:	40011000 	.word	0x40011000
 80020ac:	40011400 	.word	0x40011400
 80020b0:	40010400 	.word	0x40010400

080020b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	807b      	strh	r3, [r7, #2]
 80020c0:	4613      	mov	r3, r2
 80020c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020c4:	787b      	ldrb	r3, [r7, #1]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ca:	887a      	ldrh	r2, [r7, #2]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020d0:	e003      	b.n	80020da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020d2:	887b      	ldrh	r3, [r7, #2]
 80020d4:	041a      	lsls	r2, r3, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	611a      	str	r2, [r3, #16]
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr

080020e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020ee:	4b08      	ldr	r3, [pc, #32]	; (8002110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d006      	beq.n	8002108 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020fa:	4a05      	ldr	r2, [pc, #20]	; (8002110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020fc:	88fb      	ldrh	r3, [r7, #6]
 80020fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fc58 	bl	80009b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40010400 	.word	0x40010400

08002114 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002116:	b08b      	sub	sp, #44	; 0x2c
 8002118:	af06      	add	r7, sp, #24
 800211a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e0fd      	b.n	8002322 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d106      	bne.n	8002140 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f006 f958 	bl	80083f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2203      	movs	r2, #3
 8002144:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f002 fb6b 	bl	8004828 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	687e      	ldr	r6, [r7, #4]
 800215a:	466d      	mov	r5, sp
 800215c:	f106 0410 	add.w	r4, r6, #16
 8002160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	602b      	str	r3, [r5, #0]
 8002168:	1d33      	adds	r3, r6, #4
 800216a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800216c:	6838      	ldr	r0, [r7, #0]
 800216e:	f002 fb35 	bl	80047dc <USB_CoreInit>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0ce      	b.n	8002322 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f002 fb66 	bl	800485c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]
 8002194:	e04c      	b.n	8002230 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	440b      	add	r3, r1
 80021a6:	3301      	adds	r3, #1
 80021a8:	2201      	movs	r2, #1
 80021aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	440b      	add	r3, r1
 80021bc:	7bfa      	ldrb	r2, [r7, #15]
 80021be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	b298      	uxth	r0, r3
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	440b      	add	r3, r1
 80021d2:	3336      	adds	r3, #54	; 0x36
 80021d4:	4602      	mov	r2, r0
 80021d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	440b      	add	r3, r1
 80021e8:	3303      	adds	r3, #3
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021ee:	7bfa      	ldrb	r2, [r7, #15]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	440b      	add	r3, r1
 80021fc:	3338      	adds	r3, #56	; 0x38
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002202:	7bfa      	ldrb	r2, [r7, #15]
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	440b      	add	r3, r1
 8002210:	333c      	adds	r3, #60	; 0x3c
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002216:	7bfa      	ldrb	r2, [r7, #15]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	440b      	add	r3, r1
 8002224:	3340      	adds	r3, #64	; 0x40
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	3301      	adds	r3, #1
 800222e:	73fb      	strb	r3, [r7, #15]
 8002230:	7bfa      	ldrb	r2, [r7, #15]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	429a      	cmp	r2, r3
 8002238:	d3ad      	bcc.n	8002196 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800223a:	2300      	movs	r3, #0
 800223c:	73fb      	strb	r3, [r7, #15]
 800223e:	e044      	b.n	80022ca <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002240:	7bfa      	ldrb	r2, [r7, #15]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	440b      	add	r3, r1
 800224e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002256:	7bfa      	ldrb	r2, [r7, #15]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	440b      	add	r3, r1
 8002264:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	440b      	add	r3, r1
 800227a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	440b      	add	r3, r1
 8002290:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002298:	7bfa      	ldrb	r2, [r7, #15]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	440b      	add	r3, r1
 80022a6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	3301      	adds	r3, #1
 80022c8:	73fb      	strb	r3, [r7, #15]
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d3b5      	bcc.n	8002240 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	603b      	str	r3, [r7, #0]
 80022da:	687e      	ldr	r6, [r7, #4]
 80022dc:	466d      	mov	r5, sp
 80022de:	f106 0410 	add.w	r4, r6, #16
 80022e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022e6:	6823      	ldr	r3, [r4, #0]
 80022e8:	602b      	str	r3, [r5, #0]
 80022ea:	1d33      	adds	r3, r6, #4
 80022ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ee:	6838      	ldr	r0, [r7, #0]
 80022f0:	f002 fac0 	bl	8004874 <USB_DevInit>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d005      	beq.n	8002306 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2202      	movs	r2, #2
 80022fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e00d      	b.n	8002322 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f004 fa5a 	bl	80067d4 <USB_DevDisconnect>

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800232a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_PCD_Start+0x16>
 800233c:	2302      	movs	r3, #2
 800233e:	e016      	b.n	800236e <HAL_PCD_Start+0x44>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f002 fa55 	bl	80047fc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002352:	2101      	movs	r1, #1
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f006 fac6 	bl	80088e6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f004 fa2e 	bl	80067c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b088      	sub	sp, #32
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f004 fa30 	bl	80067e8 <USB_ReadInterrupts>
 8002388:	4603      	mov	r3, r0
 800238a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800238e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002392:	d102      	bne.n	800239a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 fb61 	bl	8002a5c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f004 fa22 	bl	80067e8 <USB_ReadInterrupts>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ae:	d112      	bne.n	80023d6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c2:	b292      	uxth	r2, r2
 80023c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f006 f894 	bl	80084f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80023ce:	2100      	movs	r1, #0
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f925 	bl	8002620 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f004 fa04 	bl	80067e8 <USB_ReadInterrupts>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023ea:	d10b      	bne.n	8002404 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023fe:	b292      	uxth	r2, r2
 8002400:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f004 f9ed 	bl	80067e8 <USB_ReadInterrupts>
 800240e:	4603      	mov	r3, r0
 8002410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002418:	d10b      	bne.n	8002432 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002422:	b29a      	uxth	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800242c:	b292      	uxth	r2, r2
 800242e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f004 f9d6 	bl	80067e8 <USB_ReadInterrupts>
 800243c:	4603      	mov	r3, r0
 800243e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002446:	d126      	bne.n	8002496 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002450:	b29a      	uxth	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0204 	bic.w	r2, r2, #4
 800245a:	b292      	uxth	r2, r2
 800245c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002468:	b29a      	uxth	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0208 	bic.w	r2, r2, #8
 8002472:	b292      	uxth	r2, r2
 8002474:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f006 f875 	bl	8008568 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002486:	b29a      	uxth	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002490:	b292      	uxth	r2, r2
 8002492:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f004 f9a4 	bl	80067e8 <USB_ReadInterrupts>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024aa:	f040 8084 	bne.w	80025b6 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80024ae:	2300      	movs	r3, #0
 80024b0:	77fb      	strb	r3, [r7, #31]
 80024b2:	e011      	b.n	80024d8 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	7ffb      	ldrb	r3, [r7, #31]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	441a      	add	r2, r3
 80024c0:	7ffb      	ldrb	r3, [r7, #31]
 80024c2:	8812      	ldrh	r2, [r2, #0]
 80024c4:	b292      	uxth	r2, r2
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	f107 0120 	add.w	r1, r7, #32
 80024cc:	440b      	add	r3, r1
 80024ce:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80024d2:	7ffb      	ldrb	r3, [r7, #31]
 80024d4:	3301      	adds	r3, #1
 80024d6:	77fb      	strb	r3, [r7, #31]
 80024d8:	7ffb      	ldrb	r3, [r7, #31]
 80024da:	2b07      	cmp	r3, #7
 80024dc:	d9ea      	bls.n	80024b4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	b292      	uxth	r2, r2
 80024f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024fe:	b29a      	uxth	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0201 	bic.w	r2, r2, #1
 8002508:	b292      	uxth	r2, r2
 800250a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800250e:	bf00      	nop
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002518:	b29b      	uxth	r3, r3
 800251a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f6      	beq.n	8002510 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800252a:	b29a      	uxth	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002534:	b292      	uxth	r2, r2
 8002536:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800253a:	2300      	movs	r3, #0
 800253c:	77fb      	strb	r3, [r7, #31]
 800253e:	e010      	b.n	8002562 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002540:	7ffb      	ldrb	r3, [r7, #31]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	4611      	mov	r1, r2
 8002548:	7ffa      	ldrb	r2, [r7, #31]
 800254a:	0092      	lsls	r2, r2, #2
 800254c:	440a      	add	r2, r1
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	f107 0120 	add.w	r1, r7, #32
 8002554:	440b      	add	r3, r1
 8002556:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800255a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800255c:	7ffb      	ldrb	r3, [r7, #31]
 800255e:	3301      	adds	r3, #1
 8002560:	77fb      	strb	r3, [r7, #31]
 8002562:	7ffb      	ldrb	r3, [r7, #31]
 8002564:	2b07      	cmp	r3, #7
 8002566:	d9eb      	bls.n	8002540 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002570:	b29a      	uxth	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0208 	orr.w	r2, r2, #8
 800257a:	b292      	uxth	r2, r2
 800257c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002588:	b29a      	uxth	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002592:	b292      	uxth	r2, r2
 8002594:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0204 	orr.w	r2, r2, #4
 80025aa:	b292      	uxth	r2, r2
 80025ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f005 ffbf 	bl	8008534 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f004 f914 	bl	80067e8 <USB_ReadInterrupts>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ca:	d10e      	bne.n	80025ea <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025de:	b292      	uxth	r2, r2
 80025e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f005 ff78 	bl	80084da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f004 f8fa 	bl	80067e8 <USB_ReadInterrupts>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025fe:	d10b      	bne.n	8002618 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002608:	b29a      	uxth	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002612:	b292      	uxth	r2, r2
 8002614:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002618:	bf00      	nop
 800261a:	3720      	adds	r7, #32
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_PCD_SetAddress+0x1a>
 8002636:	2302      	movs	r3, #2
 8002638:	e013      	b.n	8002662 <HAL_PCD_SetAddress+0x42>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	78fa      	ldrb	r2, [r7, #3]
 8002650:	4611      	mov	r1, r2
 8002652:	4618      	mov	r0, r3
 8002654:	f004 f8a1 	bl	800679a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	4608      	mov	r0, r1
 8002674:	4611      	mov	r1, r2
 8002676:	461a      	mov	r2, r3
 8002678:	4603      	mov	r3, r0
 800267a:	70fb      	strb	r3, [r7, #3]
 800267c:	460b      	mov	r3, r1
 800267e:	803b      	strh	r3, [r7, #0]
 8002680:	4613      	mov	r3, r2
 8002682:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002684:	2300      	movs	r3, #0
 8002686:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002688:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800268c:	2b00      	cmp	r3, #0
 800268e:	da0e      	bge.n	80026ae <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002690:	78fb      	ldrb	r3, [r7, #3]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	4413      	add	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	705a      	strb	r2, [r3, #1]
 80026ac:	e00e      	b.n	80026cc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026ae:	78fb      	ldrb	r3, [r7, #3]
 80026b0:	f003 0207 	and.w	r2, r3, #7
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	4413      	add	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80026d8:	883a      	ldrh	r2, [r7, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	78ba      	ldrb	r2, [r7, #2]
 80026e2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	785b      	ldrb	r3, [r3, #1]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d004      	beq.n	80026f6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026f6:	78bb      	ldrb	r3, [r7, #2]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d102      	bne.n	8002702 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_PCD_EP_Open+0xa6>
 800270c:	2302      	movs	r3, #2
 800270e:	e00e      	b.n	800272e <HAL_PCD_EP_Open+0xc4>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68f9      	ldr	r1, [r7, #12]
 800271e:	4618      	mov	r0, r3
 8002720:	f002 f8c8 	bl	80048b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800272c:	7afb      	ldrb	r3, [r7, #11]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	460b      	mov	r3, r1
 8002740:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002742:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002746:	2b00      	cmp	r3, #0
 8002748:	da0e      	bge.n	8002768 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800274a:	78fb      	ldrb	r3, [r7, #3]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2201      	movs	r2, #1
 8002764:	705a      	strb	r2, [r3, #1]
 8002766:	e00e      	b.n	8002786 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002768:	78fb      	ldrb	r3, [r7, #3]
 800276a:	f003 0207 	and.w	r2, r3, #7
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	b2da      	uxtb	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_PCD_EP_Close+0x6a>
 800279c:	2302      	movs	r3, #2
 800279e:	e00e      	b.n	80027be <HAL_PCD_EP_Close+0x88>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68f9      	ldr	r1, [r7, #12]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f002 fbea 	bl	8004f88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b086      	sub	sp, #24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	460b      	mov	r3, r1
 80027d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027d6:	7afb      	ldrb	r3, [r7, #11]
 80027d8:	f003 0207 	and.w	r2, r3, #7
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4413      	add	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2200      	movs	r2, #0
 80027fe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2200      	movs	r2, #0
 8002804:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002806:	7afb      	ldrb	r3, [r7, #11]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	b2da      	uxtb	r2, r3
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002812:	7afb      	ldrb	r3, [r7, #11]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	2b00      	cmp	r3, #0
 800281a:	d106      	bne.n	800282a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6979      	ldr	r1, [r7, #20]
 8002822:	4618      	mov	r0, r3
 8002824:	f002 fd9c 	bl	8005360 <USB_EPStartXfer>
 8002828:	e005      	b.n	8002836 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6979      	ldr	r1, [r7, #20]
 8002830:	4618      	mov	r0, r3
 8002832:	f002 fd95 	bl	8005360 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800284c:	78fb      	ldrb	r3, [r7, #3]
 800284e:	f003 0207 	and.w	r2, r3, #7
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	440b      	add	r3, r1
 800285e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002862:	681b      	ldr	r3, [r3, #0]
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b086      	sub	sp, #24
 8002872:	af00      	add	r7, sp, #0
 8002874:	60f8      	str	r0, [r7, #12]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	603b      	str	r3, [r7, #0]
 800287a:	460b      	mov	r3, r1
 800287c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800287e:	7afb      	ldrb	r3, [r7, #11]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4413      	add	r3, r2
 8002892:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2200      	movs	r2, #0
 80028b2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2201      	movs	r2, #1
 80028b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028ba:	7afb      	ldrb	r3, [r7, #11]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028c6:	7afb      	ldrb	r3, [r7, #11]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d106      	bne.n	80028de <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6979      	ldr	r1, [r7, #20]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f002 fd42 	bl	8005360 <USB_EPStartXfer>
 80028dc:	e005      	b.n	80028ea <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6979      	ldr	r1, [r7, #20]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f002 fd3b 	bl	8005360 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	f003 0207 	and.w	r2, r3, #7
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	429a      	cmp	r2, r3
 800290c:	d901      	bls.n	8002912 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e04c      	b.n	80029ac <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002916:	2b00      	cmp	r3, #0
 8002918:	da0e      	bge.n	8002938 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800291a:	78fb      	ldrb	r3, [r7, #3]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2201      	movs	r2, #1
 8002934:	705a      	strb	r2, [r3, #1]
 8002936:	e00c      	b.n	8002952 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002938:	78fa      	ldrb	r2, [r7, #3]
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	4413      	add	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2201      	movs	r2, #1
 8002956:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	b2da      	uxtb	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_PCD_EP_SetStall+0x7e>
 800296e:	2302      	movs	r3, #2
 8002970:	e01c      	b.n	80029ac <HAL_PCD_EP_SetStall+0xb8>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68f9      	ldr	r1, [r7, #12]
 8002980:	4618      	mov	r0, r3
 8002982:	f003 fe0d 	bl	80065a0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	2b00      	cmp	r3, #0
 800298e:	d108      	bne.n	80029a2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800299a:	4619      	mov	r1, r3
 800299c:	4610      	mov	r0, r2
 800299e:	f003 ff32 	bl	8006806 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	f003 020f 	and.w	r2, r3, #15
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d901      	bls.n	80029d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e040      	b.n	8002a54 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	da0e      	bge.n	80029f8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029da:	78fb      	ldrb	r3, [r7, #3]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2201      	movs	r2, #1
 80029f4:	705a      	strb	r2, [r3, #1]
 80029f6:	e00e      	b.n	8002a16 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	f003 0207 	and.w	r2, r3, #7
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_PCD_EP_ClrStall+0x82>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e00e      	b.n	8002a54 <HAL_PCD_EP_ClrStall+0xa0>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68f9      	ldr	r1, [r7, #12]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f003 fdfb 	bl	8006640 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08e      	sub	sp, #56	; 0x38
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a64:	e2df      	b.n	8003026 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a6e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002a70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002a7c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f040 8158 	bne.w	8002d36 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002a86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d152      	bne.n	8002b36 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa0:	81fb      	strh	r3, [r7, #14]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	89fb      	ldrh	r3, [r7, #14]
 8002aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3328      	adds	r3, #40	; 0x28
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	3302      	adds	r3, #2
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6812      	ldr	r2, [r2, #0]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	441a      	add	r2, r3
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002af4:	2100      	movs	r1, #0
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f005 fcd5 	bl	80084a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 828e 	beq.w	8003026 <PCD_EP_ISR_Handler+0x5ca>
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f040 8289 	bne.w	8003026 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	b292      	uxth	r2, r2
 8002b28:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b34:	e277      	b.n	8003026 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002b46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d034      	beq.n	8002bba <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4413      	add	r3, r2
 8002b64:	3306      	adds	r3, #6
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	f003 fe88 	bl	80068a4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	823b      	strh	r3, [r7, #16]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	8a3a      	ldrh	r2, [r7, #16]
 8002baa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bae:	b292      	uxth	r2, r2
 8002bb0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f005 fc4a 	bl	800844c <HAL_PCD_SetupStageCallback>
 8002bb8:	e235      	b.n	8003026 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002bba:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f280 8231 	bge.w	8003026 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	83bb      	strh	r3, [r7, #28]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	8bba      	ldrh	r2, [r7, #28]
 8002bda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bde:	b292      	uxth	r2, r2
 8002be0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3306      	adds	r3, #6
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6812      	ldr	r2, [r2, #0]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d019      	beq.n	8002c4a <PCD_EP_ISR_Handler+0x1ee>
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d015      	beq.n	8002c4a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	6959      	ldr	r1, [r3, #20]
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	f003 fe38 	bl	80068a4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	441a      	add	r2, r3
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c42:	2100      	movs	r1, #0
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f005 fc13 	bl	8008470 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	61bb      	str	r3, [r7, #24]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	4413      	add	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d112      	bne.n	8002c98 <PCD_EP_ISR_Handler+0x23c>
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	801a      	strh	r2, [r3, #0]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	801a      	strh	r2, [r3, #0]
 8002c96:	e02f      	b.n	8002cf8 <PCD_EP_ISR_Handler+0x29c>
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	2b3e      	cmp	r3, #62	; 0x3e
 8002c9e:	d813      	bhi.n	8002cc8 <PCD_EP_ISR_Handler+0x26c>
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	085b      	lsrs	r3, r3, #1
 8002ca6:	633b      	str	r3, [r7, #48]	; 0x30
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <PCD_EP_ISR_Handler+0x25e>
 8002cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	633b      	str	r3, [r7, #48]	; 0x30
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	029b      	lsls	r3, r3, #10
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	801a      	strh	r2, [r3, #0]
 8002cc6:	e017      	b.n	8002cf8 <PCD_EP_ISR_Handler+0x29c>
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	095b      	lsrs	r3, r3, #5
 8002cce:	633b      	str	r3, [r7, #48]	; 0x30
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	f003 031f 	and.w	r3, r3, #31
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d102      	bne.n	8002ce2 <PCD_EP_ISR_Handler+0x286>
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	029b      	lsls	r3, r3, #10
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d08:	827b      	strh	r3, [r7, #18]
 8002d0a:	8a7b      	ldrh	r3, [r7, #18]
 8002d0c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002d10:	827b      	strh	r3, [r7, #18]
 8002d12:	8a7b      	ldrh	r3, [r7, #18]
 8002d14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d18:	827b      	strh	r3, [r7, #18]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	8a7b      	ldrh	r3, [r7, #18]
 8002d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	8013      	strh	r3, [r2, #0]
 8002d34:	e177      	b.n	8003026 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d48:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f280 80ea 	bge.w	8002f26 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d68:	4013      	ands	r3, r2
 8002d6a:	853b      	strh	r3, [r7, #40]	; 0x28
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002d7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d80:	b292      	uxth	r2, r2
 8002d82:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002d84:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	4413      	add	r3, r2
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	7b1b      	ldrb	r3, [r3, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d122      	bne.n	8002de8 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4413      	add	r3, r2
 8002db6:	3306      	adds	r3, #6
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dca:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002dcc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 8087 	beq.w	8002ee2 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	6959      	ldr	r1, [r3, #20]
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	88da      	ldrh	r2, [r3, #6]
 8002de0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002de2:	f003 fd5f 	bl	80068a4 <USB_ReadPMA>
 8002de6:	e07c      	b.n	8002ee2 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	78db      	ldrb	r3, [r3, #3]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d108      	bne.n	8002e02 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002df0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002df2:	461a      	mov	r2, r3
 8002df4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f923 	bl	8003042 <HAL_PCD_EP_DB_Receive>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002e00:	e06f      	b.n	8002ee2 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1c:	847b      	strh	r3, [r7, #34]	; 0x22
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	441a      	add	r2, r3
 8002e2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d021      	beq.n	8002ea0 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4413      	add	r3, r2
 8002e70:	3302      	adds	r3, #2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e84:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002e86:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d02a      	beq.n	8002ee2 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	6959      	ldr	r1, [r3, #20]
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	891a      	ldrh	r2, [r3, #8]
 8002e98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e9a:	f003 fd03 	bl	80068a4 <USB_ReadPMA>
 8002e9e:	e020      	b.n	8002ee2 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3306      	adds	r3, #6
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ec8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002eca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6818      	ldr	r0, [r3, #0]
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	6959      	ldr	r1, [r3, #20]
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	895a      	ldrh	r2, [r3, #10]
 8002edc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ede:	f003 fce1 	bl	80068a4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	69da      	ldr	r2, [r3, #28]
 8002ee6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ee8:	441a      	add	r2, r3
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ef4:	441a      	add	r2, r3
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d004      	beq.n	8002f0c <PCD_EP_ISR_Handler+0x4b0>
 8002f02:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d206      	bcs.n	8002f1a <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	4619      	mov	r1, r3
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f005 faac 	bl	8008470 <HAL_PCD_DataOutStageCallback>
 8002f18:	e005      	b.n	8002f26 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f20:	4618      	mov	r0, r3
 8002f22:	f002 fa1d 	bl	8005360 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002f26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d07a      	beq.n	8003026 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002f30:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	4413      	add	r3, r2
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5e:	843b      	strh	r3, [r7, #32]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	441a      	add	r2, r3
 8002f6e:	8c3b      	ldrh	r3, [r7, #32]
 8002f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	78db      	ldrb	r3, [r3, #3]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d108      	bne.n	8002f96 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d146      	bne.n	800301a <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002f8c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d141      	bne.n	800301a <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4413      	add	r3, r2
 8002faa:	3302      	adds	r3, #2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fbe:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	699a      	ldr	r2, [r3, #24]
 8002fc4:	8bfb      	ldrh	r3, [r7, #30]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d906      	bls.n	8002fd8 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	699a      	ldr	r2, [r3, #24]
 8002fce:	8bfb      	ldrh	r3, [r7, #30]
 8002fd0:	1ad2      	subs	r2, r2, r3
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	619a      	str	r2, [r3, #24]
 8002fd6:	e002      	b.n	8002fde <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	2200      	movs	r2, #0
 8002fdc:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	4619      	mov	r1, r3
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f005 fa5a 	bl	80084a6 <HAL_PCD_DataInStageCallback>
 8002ff2:	e018      	b.n	8003026 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	695a      	ldr	r2, [r3, #20]
 8002ff8:	8bfb      	ldrh	r3, [r7, #30]
 8002ffa:	441a      	add	r2, r3
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	69da      	ldr	r2, [r3, #28]
 8003004:	8bfb      	ldrh	r3, [r7, #30]
 8003006:	441a      	add	r2, r3
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003012:	4618      	mov	r0, r3
 8003014:	f002 f9a4 	bl	8005360 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003018:	e005      	b.n	8003026 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800301a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800301c:	461a      	mov	r2, r3
 800301e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f91b 	bl	800325c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800302e:	b29b      	uxth	r3, r3
 8003030:	b21b      	sxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	f6ff ad17 	blt.w	8002a66 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3738      	adds	r7, #56	; 0x38
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b088      	sub	sp, #32
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	4613      	mov	r3, r2
 800304e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003050:	88fb      	ldrh	r3, [r7, #6]
 8003052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d07e      	beq.n	8003158 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003062:	b29b      	uxth	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	3302      	adds	r3, #2
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	6812      	ldr	r2, [r2, #0]
 8003076:	4413      	add	r3, r2
 8003078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003082:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	699a      	ldr	r2, [r3, #24]
 8003088:	8b7b      	ldrh	r3, [r7, #26]
 800308a:	429a      	cmp	r2, r3
 800308c:	d306      	bcc.n	800309c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	8b7b      	ldrh	r3, [r7, #26]
 8003094:	1ad2      	subs	r2, r2, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	619a      	str	r2, [r3, #24]
 800309a:	e002      	b.n	80030a2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2200      	movs	r2, #0
 80030a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d123      	bne.n	80030f2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c4:	833b      	strh	r3, [r7, #24]
 80030c6:	8b3b      	ldrh	r3, [r7, #24]
 80030c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80030cc:	833b      	strh	r3, [r7, #24]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	461a      	mov	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	441a      	add	r2, r3
 80030dc:	8b3b      	ldrh	r3, [r7, #24]
 80030de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030f2:	88fb      	ldrh	r3, [r7, #6]
 80030f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d01f      	beq.n	800313c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	b29b      	uxth	r3, r3
 800310e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003116:	82fb      	strh	r3, [r7, #22]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	441a      	add	r2, r3
 8003126:	8afb      	ldrh	r3, [r7, #22]
 8003128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800312c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003134:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003138:	b29b      	uxth	r3, r3
 800313a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800313c:	8b7b      	ldrh	r3, [r7, #26]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 8087 	beq.w	8003252 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	6959      	ldr	r1, [r3, #20]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	891a      	ldrh	r2, [r3, #8]
 8003150:	8b7b      	ldrh	r3, [r7, #26]
 8003152:	f003 fba7 	bl	80068a4 <USB_ReadPMA>
 8003156:	e07c      	b.n	8003252 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003160:	b29b      	uxth	r3, r3
 8003162:	461a      	mov	r2, r3
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	3306      	adds	r3, #6
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003180:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	8b7b      	ldrh	r3, [r7, #26]
 8003188:	429a      	cmp	r2, r3
 800318a:	d306      	bcc.n	800319a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	699a      	ldr	r2, [r3, #24]
 8003190:	8b7b      	ldrh	r3, [r7, #26]
 8003192:	1ad2      	subs	r2, r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	619a      	str	r2, [r3, #24]
 8003198:	e002      	b.n	80031a0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2200      	movs	r2, #0
 800319e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d123      	bne.n	80031f0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c2:	83fb      	strh	r3, [r7, #30]
 80031c4:	8bfb      	ldrh	r3, [r7, #30]
 80031c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031ca:	83fb      	strh	r3, [r7, #30]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	441a      	add	r2, r3
 80031da:	8bfb      	ldrh	r3, [r7, #30]
 80031dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d11f      	bne.n	800323a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	b29b      	uxth	r3, r3
 800320c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003214:	83bb      	strh	r3, [r7, #28]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	441a      	add	r2, r3
 8003224:	8bbb      	ldrh	r3, [r7, #28]
 8003226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800322a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800322e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003232:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003236:	b29b      	uxth	r3, r3
 8003238:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800323a:	8b7b      	ldrh	r3, [r7, #26]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	6959      	ldr	r1, [r3, #20]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	895a      	ldrh	r2, [r3, #10]
 800324c:	8b7b      	ldrh	r3, [r7, #26]
 800324e:	f003 fb29 	bl	80068a4 <USB_ReadPMA>
    }
  }

  return count;
 8003252:	8b7b      	ldrh	r3, [r7, #26]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3720      	adds	r7, #32
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b092      	sub	sp, #72	; 0x48
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	4613      	mov	r3, r2
 8003268:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 8132 	beq.w	80034da <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800327e:	b29b      	uxth	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	4413      	add	r3, r2
 800328a:	3302      	adds	r3, #2
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	6812      	ldr	r2, [r2, #0]
 8003292:	4413      	add	r3, r2
 8003294:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800329e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	699a      	ldr	r2, [r3, #24]
 80032a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d906      	bls.n	80032b8 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032b0:	1ad2      	subs	r2, r2, r3
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	619a      	str	r2, [r3, #24]
 80032b6:	e002      	b.n	80032be <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2200      	movs	r2, #0
 80032bc:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d12c      	bne.n	8003320 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	4619      	mov	r1, r3
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f005 f8ea 	bl	80084a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 822f 	beq.w	800373c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f8:	827b      	strh	r3, [r7, #18]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	441a      	add	r2, r3
 8003308:	8a7b      	ldrh	r3, [r7, #18]
 800330a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800330e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003312:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800331a:	b29b      	uxth	r3, r3
 800331c:	8013      	strh	r3, [r2, #0]
 800331e:	e20d      	b.n	800373c <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d01f      	beq.n	800336a <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	b29b      	uxth	r3, r3
 800333c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003344:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	441a      	add	r2, r3
 8003354:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800335a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800335e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003366:	b29b      	uxth	r3, r3
 8003368:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003370:	2b01      	cmp	r3, #1
 8003372:	f040 81e3 	bne.w	800373c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	695a      	ldr	r2, [r3, #20]
 800337a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800337c:	441a      	add	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	69da      	ldr	r2, [r3, #28]
 8003386:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003388:	441a      	add	r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	6a1a      	ldr	r2, [r3, #32]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	429a      	cmp	r2, r3
 8003398:	d309      	bcc.n	80033ae <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	6a1a      	ldr	r2, [r3, #32]
 80033a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a6:	1ad2      	subs	r2, r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	621a      	str	r2, [r3, #32]
 80033ac:	e014      	b.n	80033d8 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 80033b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033b8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80033c2:	e009      	b.n	80033d8 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2200      	movs	r2, #0
 80033d6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	785b      	ldrb	r3, [r3, #1]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d155      	bne.n	800348c <HAL_PCD_EP_DB_Transmit+0x230>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	61bb      	str	r3, [r7, #24]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	4413      	add	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	011a      	lsls	r2, r3, #4
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	4413      	add	r3, r2
 8003402:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340a:	2b00      	cmp	r3, #0
 800340c:	d112      	bne.n	8003434 <HAL_PCD_EP_DB_Transmit+0x1d8>
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	b29b      	uxth	r3, r3
 8003414:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003418:	b29a      	uxth	r2, r3
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	801a      	strh	r2, [r3, #0]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	b29b      	uxth	r3, r3
 8003424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800342c:	b29a      	uxth	r2, r3
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	801a      	strh	r2, [r3, #0]
 8003432:	e047      	b.n	80034c4 <HAL_PCD_EP_DB_Transmit+0x268>
 8003434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003436:	2b3e      	cmp	r3, #62	; 0x3e
 8003438:	d811      	bhi.n	800345e <HAL_PCD_EP_DB_Transmit+0x202>
 800343a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343c:	085b      	lsrs	r3, r3, #1
 800343e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <HAL_PCD_EP_DB_Transmit+0x1f4>
 800344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344c:	3301      	adds	r3, #1
 800344e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003452:	b29b      	uxth	r3, r3
 8003454:	029b      	lsls	r3, r3, #10
 8003456:	b29a      	uxth	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	801a      	strh	r2, [r3, #0]
 800345c:	e032      	b.n	80034c4 <HAL_PCD_EP_DB_Transmit+0x268>
 800345e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003460:	095b      	lsrs	r3, r3, #5
 8003462:	62bb      	str	r3, [r7, #40]	; 0x28
 8003464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	2b00      	cmp	r3, #0
 800346c:	d102      	bne.n	8003474 <HAL_PCD_EP_DB_Transmit+0x218>
 800346e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003470:	3b01      	subs	r3, #1
 8003472:	62bb      	str	r3, [r7, #40]	; 0x28
 8003474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003476:	b29b      	uxth	r3, r3
 8003478:	029b      	lsls	r3, r3, #10
 800347a:	b29b      	uxth	r3, r3
 800347c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003484:	b29a      	uxth	r2, r3
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	801a      	strh	r2, [r3, #0]
 800348a:	e01b      	b.n	80034c4 <HAL_PCD_EP_DB_Transmit+0x268>
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	785b      	ldrb	r3, [r3, #1]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d117      	bne.n	80034c4 <HAL_PCD_EP_DB_Transmit+0x268>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	623b      	str	r3, [r7, #32]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	461a      	mov	r2, r3
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	4413      	add	r3, r2
 80034aa:	623b      	str	r3, [r7, #32]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	011a      	lsls	r2, r3, #4
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	4413      	add	r3, r2
 80034b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80034ba:	61fb      	str	r3, [r7, #28]
 80034bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034be:	b29a      	uxth	r2, r3
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6818      	ldr	r0, [r3, #0]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	6959      	ldr	r1, [r3, #20]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	891a      	ldrh	r2, [r3, #8]
 80034d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	f003 f9a2 	bl	800681c <USB_WritePMA>
 80034d8:	e130      	b.n	800373c <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	461a      	mov	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4413      	add	r3, r2
 80034ee:	3306      	adds	r3, #6
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	6812      	ldr	r2, [r2, #0]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003502:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	699a      	ldr	r2, [r3, #24]
 8003508:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800350a:	429a      	cmp	r2, r3
 800350c:	d306      	bcc.n	800351c <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003514:	1ad2      	subs	r2, r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	619a      	str	r2, [r3, #24]
 800351a:	e002      	b.n	8003522 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2200      	movs	r2, #0
 8003520:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d12c      	bne.n	8003584 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	4619      	mov	r1, r3
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f004 ffb8 	bl	80084a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800353c:	2b00      	cmp	r3, #0
 800353e:	f040 80fd 	bne.w	800373c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	b29b      	uxth	r3, r3
 8003554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	461a      	mov	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	441a      	add	r2, r3
 800356c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800356e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003572:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800357a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800357e:	b29b      	uxth	r3, r3
 8003580:	8013      	strh	r3, [r2, #0]
 8003582:	e0db      	b.n	800373c <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003584:	88fb      	ldrh	r3, [r7, #6]
 8003586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d11f      	bne.n	80035ce <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	441a      	add	r2, r3
 80035b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80035ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	f040 80b1 	bne.w	800373c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	695a      	ldr	r2, [r3, #20]
 80035de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035e0:	441a      	add	r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	69da      	ldr	r2, [r3, #28]
 80035ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035ec:	441a      	add	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	6a1a      	ldr	r2, [r3, #32]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d309      	bcc.n	8003612 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	6a1a      	ldr	r2, [r3, #32]
 8003608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360a:	1ad2      	subs	r2, r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	621a      	str	r2, [r3, #32]
 8003610:	e014      	b.n	800363c <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 800361a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800361c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003626:	e009      	b.n	800363c <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2200      	movs	r2, #0
 8003632:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	637b      	str	r3, [r7, #52]	; 0x34
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	785b      	ldrb	r3, [r3, #1]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d155      	bne.n	80036f6 <HAL_PCD_EP_DB_Transmit+0x49a>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	647b      	str	r3, [r7, #68]	; 0x44
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003658:	b29b      	uxth	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800365e:	4413      	add	r3, r2
 8003660:	647b      	str	r3, [r7, #68]	; 0x44
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	011a      	lsls	r2, r3, #4
 8003668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800366a:	4413      	add	r3, r2
 800366c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003670:	643b      	str	r3, [r7, #64]	; 0x40
 8003672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003674:	2b00      	cmp	r3, #0
 8003676:	d112      	bne.n	800369e <HAL_PCD_EP_DB_Transmit+0x442>
 8003678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	b29b      	uxth	r3, r3
 800367e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003682:	b29a      	uxth	r2, r3
 8003684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003686:	801a      	strh	r2, [r3, #0]
 8003688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	b29b      	uxth	r3, r3
 800368e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003696:	b29a      	uxth	r2, r3
 8003698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800369a:	801a      	strh	r2, [r3, #0]
 800369c:	e044      	b.n	8003728 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800369e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a0:	2b3e      	cmp	r3, #62	; 0x3e
 80036a2:	d811      	bhi.n	80036c8 <HAL_PCD_EP_DB_Transmit+0x46c>
 80036a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a6:	085b      	lsrs	r3, r3, #1
 80036a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <HAL_PCD_EP_DB_Transmit+0x45e>
 80036b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b6:	3301      	adds	r3, #1
 80036b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036bc:	b29b      	uxth	r3, r3
 80036be:	029b      	lsls	r3, r3, #10
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c4:	801a      	strh	r2, [r3, #0]
 80036c6:	e02f      	b.n	8003728 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80036c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d0:	f003 031f 	and.w	r3, r3, #31
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d102      	bne.n	80036de <HAL_PCD_EP_DB_Transmit+0x482>
 80036d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036da:	3b01      	subs	r3, #1
 80036dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	029b      	lsls	r3, r3, #10
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036f2:	801a      	strh	r2, [r3, #0]
 80036f4:	e018      	b.n	8003728 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	785b      	ldrb	r3, [r3, #1]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d114      	bne.n	8003728 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003706:	b29b      	uxth	r3, r3
 8003708:	461a      	mov	r2, r3
 800370a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370c:	4413      	add	r3, r2
 800370e:	637b      	str	r3, [r7, #52]	; 0x34
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	011a      	lsls	r2, r3, #4
 8003716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003718:	4413      	add	r3, r2
 800371a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800371e:	633b      	str	r3, [r7, #48]	; 0x30
 8003720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003722:	b29a      	uxth	r2, r3
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	6959      	ldr	r1, [r3, #20]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	895a      	ldrh	r2, [r3, #10]
 8003734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003736:	b29b      	uxth	r3, r3
 8003738:	f003 f870 	bl	800681c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	b29b      	uxth	r3, r3
 800374e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003756:	823b      	strh	r3, [r7, #16]
 8003758:	8a3b      	ldrh	r3, [r7, #16]
 800375a:	f083 0310 	eor.w	r3, r3, #16
 800375e:	823b      	strh	r3, [r7, #16]
 8003760:	8a3b      	ldrh	r3, [r7, #16]
 8003762:	f083 0320 	eor.w	r3, r3, #32
 8003766:	823b      	strh	r3, [r7, #16]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	441a      	add	r2, r3
 8003776:	8a3b      	ldrh	r3, [r7, #16]
 8003778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800377c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003788:	b29b      	uxth	r3, r3
 800378a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3748      	adds	r7, #72	; 0x48
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003796:	b480      	push	{r7}
 8003798:	b087      	sub	sp, #28
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	607b      	str	r3, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	817b      	strh	r3, [r7, #10]
 80037a4:	4613      	mov	r3, r2
 80037a6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80037a8:	897b      	ldrh	r3, [r7, #10]
 80037aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00b      	beq.n	80037cc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037b4:	897b      	ldrh	r3, [r7, #10]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	1c5a      	adds	r2, r3, #1
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4413      	add	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	e009      	b.n	80037e0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037cc:	897a      	ldrh	r2, [r7, #10]
 80037ce:	4613      	mov	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4413      	add	r3, r2
 80037de:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80037e0:	893b      	ldrh	r3, [r7, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d107      	bne.n	80037f6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2200      	movs	r2, #0
 80037ea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	80da      	strh	r2, [r3, #6]
 80037f4:	e00b      	b.n	800380e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2201      	movs	r2, #1
 80037fa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	b29a      	uxth	r2, r3
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	0c1b      	lsrs	r3, r3, #16
 8003808:	b29a      	uxth	r2, r3
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	371c      	adds	r7, #28
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr
	...

0800381c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e26c      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 8087 	beq.w	800394a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800383c:	4b92      	ldr	r3, [pc, #584]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 030c 	and.w	r3, r3, #12
 8003844:	2b04      	cmp	r3, #4
 8003846:	d00c      	beq.n	8003862 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003848:	4b8f      	ldr	r3, [pc, #572]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 030c 	and.w	r3, r3, #12
 8003850:	2b08      	cmp	r3, #8
 8003852:	d112      	bne.n	800387a <HAL_RCC_OscConfig+0x5e>
 8003854:	4b8c      	ldr	r3, [pc, #560]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800385c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003860:	d10b      	bne.n	800387a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003862:	4b89      	ldr	r3, [pc, #548]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d06c      	beq.n	8003948 <HAL_RCC_OscConfig+0x12c>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d168      	bne.n	8003948 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e246      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003882:	d106      	bne.n	8003892 <HAL_RCC_OscConfig+0x76>
 8003884:	4b80      	ldr	r3, [pc, #512]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a7f      	ldr	r2, [pc, #508]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 800388a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	e02e      	b.n	80038f0 <HAL_RCC_OscConfig+0xd4>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10c      	bne.n	80038b4 <HAL_RCC_OscConfig+0x98>
 800389a:	4b7b      	ldr	r3, [pc, #492]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a7a      	ldr	r2, [pc, #488]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	4b78      	ldr	r3, [pc, #480]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a77      	ldr	r2, [pc, #476]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	e01d      	b.n	80038f0 <HAL_RCC_OscConfig+0xd4>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCC_OscConfig+0xbc>
 80038be:	4b72      	ldr	r3, [pc, #456]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a71      	ldr	r2, [pc, #452]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	4b6f      	ldr	r3, [pc, #444]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a6e      	ldr	r2, [pc, #440]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e00b      	b.n	80038f0 <HAL_RCC_OscConfig+0xd4>
 80038d8:	4b6b      	ldr	r3, [pc, #428]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a6a      	ldr	r2, [pc, #424]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	4b68      	ldr	r3, [pc, #416]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a67      	ldr	r2, [pc, #412]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d013      	beq.n	8003920 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7fd fa84 	bl	8000e04 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003900:	f7fd fa80 	bl	8000e04 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b64      	cmp	r3, #100	; 0x64
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e1fa      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	4b5d      	ldr	r3, [pc, #372]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0xe4>
 800391e:	e014      	b.n	800394a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7fd fa70 	bl	8000e04 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003928:	f7fd fa6c 	bl	8000e04 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	; 0x64
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e1e6      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393a:	4b53      	ldr	r3, [pc, #332]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x10c>
 8003946:	e000      	b.n	800394a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d063      	beq.n	8003a1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003956:	4b4c      	ldr	r3, [pc, #304]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003962:	4b49      	ldr	r3, [pc, #292]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	2b08      	cmp	r3, #8
 800396c:	d11c      	bne.n	80039a8 <HAL_RCC_OscConfig+0x18c>
 800396e:	4b46      	ldr	r3, [pc, #280]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d116      	bne.n	80039a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397a:	4b43      	ldr	r3, [pc, #268]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <HAL_RCC_OscConfig+0x176>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d001      	beq.n	8003992 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e1ba      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003992:	4b3d      	ldr	r3, [pc, #244]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4939      	ldr	r1, [pc, #228]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a6:	e03a      	b.n	8003a1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d020      	beq.n	80039f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b0:	4b36      	ldr	r3, [pc, #216]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b6:	f7fd fa25 	bl	8000e04 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039be:	f7fd fa21 	bl	8000e04 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e19b      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d0:	4b2d      	ldr	r3, [pc, #180]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039dc:	4b2a      	ldr	r3, [pc, #168]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4927      	ldr	r1, [pc, #156]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	600b      	str	r3, [r1, #0]
 80039f0:	e015      	b.n	8003a1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f2:	4b26      	ldr	r3, [pc, #152]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f8:	f7fd fa04 	bl	8000e04 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a00:	f7fd fa00 	bl	8000e04 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e17a      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a12:	4b1d      	ldr	r3, [pc, #116]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d03a      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d019      	beq.n	8003a66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a32:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <HAL_RCC_OscConfig+0x274>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a38:	f7fd f9e4 	bl	8000e04 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a40:	f7fd f9e0 	bl	8000e04 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e15a      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a52:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a5e:	2001      	movs	r0, #1
 8003a60:	f000 fac6 	bl	8003ff0 <RCC_Delay>
 8003a64:	e01c      	b.n	8003aa0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a66:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <HAL_RCC_OscConfig+0x274>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6c:	f7fd f9ca 	bl	8000e04 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a72:	e00f      	b.n	8003a94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a74:	f7fd f9c6 	bl	8000e04 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d908      	bls.n	8003a94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e140      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
 8003a86:	bf00      	nop
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	42420000 	.word	0x42420000
 8003a90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a94:	4b9e      	ldr	r3, [pc, #632]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e9      	bne.n	8003a74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 80a6 	beq.w	8003bfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab2:	4b97      	ldr	r3, [pc, #604]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10d      	bne.n	8003ada <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003abe:	4b94      	ldr	r3, [pc, #592]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	4a93      	ldr	r2, [pc, #588]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	61d3      	str	r3, [r2, #28]
 8003aca:	4b91      	ldr	r3, [pc, #580]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ada:	4b8e      	ldr	r3, [pc, #568]	; (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d118      	bne.n	8003b18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae6:	4b8b      	ldr	r3, [pc, #556]	; (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a8a      	ldr	r2, [pc, #552]	; (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af2:	f7fd f987 	bl	8000e04 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afa:	f7fd f983 	bl	8000e04 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b64      	cmp	r3, #100	; 0x64
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e0fd      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0c:	4b81      	ldr	r3, [pc, #516]	; (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d106      	bne.n	8003b2e <HAL_RCC_OscConfig+0x312>
 8003b20:	4b7b      	ldr	r3, [pc, #492]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	4a7a      	ldr	r2, [pc, #488]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	6213      	str	r3, [r2, #32]
 8003b2c:	e02d      	b.n	8003b8a <HAL_RCC_OscConfig+0x36e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCC_OscConfig+0x334>
 8003b36:	4b76      	ldr	r3, [pc, #472]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	4a75      	ldr	r2, [pc, #468]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b3c:	f023 0301 	bic.w	r3, r3, #1
 8003b40:	6213      	str	r3, [r2, #32]
 8003b42:	4b73      	ldr	r3, [pc, #460]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	4a72      	ldr	r2, [pc, #456]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b48:	f023 0304 	bic.w	r3, r3, #4
 8003b4c:	6213      	str	r3, [r2, #32]
 8003b4e:	e01c      	b.n	8003b8a <HAL_RCC_OscConfig+0x36e>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	2b05      	cmp	r3, #5
 8003b56:	d10c      	bne.n	8003b72 <HAL_RCC_OscConfig+0x356>
 8003b58:	4b6d      	ldr	r3, [pc, #436]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	4a6c      	ldr	r2, [pc, #432]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b5e:	f043 0304 	orr.w	r3, r3, #4
 8003b62:	6213      	str	r3, [r2, #32]
 8003b64:	4b6a      	ldr	r3, [pc, #424]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	4a69      	ldr	r2, [pc, #420]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	6213      	str	r3, [r2, #32]
 8003b70:	e00b      	b.n	8003b8a <HAL_RCC_OscConfig+0x36e>
 8003b72:	4b67      	ldr	r3, [pc, #412]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	4a66      	ldr	r2, [pc, #408]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b78:	f023 0301 	bic.w	r3, r3, #1
 8003b7c:	6213      	str	r3, [r2, #32]
 8003b7e:	4b64      	ldr	r3, [pc, #400]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	4a63      	ldr	r2, [pc, #396]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003b84:	f023 0304 	bic.w	r3, r3, #4
 8003b88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d015      	beq.n	8003bbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b92:	f7fd f937 	bl	8000e04 <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b98:	e00a      	b.n	8003bb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b9a:	f7fd f933 	bl	8000e04 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e0ab      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb0:	4b57      	ldr	r3, [pc, #348]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0ee      	beq.n	8003b9a <HAL_RCC_OscConfig+0x37e>
 8003bbc:	e014      	b.n	8003be8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bbe:	f7fd f921 	bl	8000e04 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc4:	e00a      	b.n	8003bdc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc6:	f7fd f91d 	bl	8000e04 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e095      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bdc:	4b4c      	ldr	r3, [pc, #304]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1ee      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003be8:	7dfb      	ldrb	r3, [r7, #23]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d105      	bne.n	8003bfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bee:	4b48      	ldr	r3, [pc, #288]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	4a47      	ldr	r2, [pc, #284]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 8081 	beq.w	8003d06 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c04:	4b42      	ldr	r3, [pc, #264]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 030c 	and.w	r3, r3, #12
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d061      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d146      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c18:	4b3f      	ldr	r3, [pc, #252]	; (8003d18 <HAL_RCC_OscConfig+0x4fc>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1e:	f7fd f8f1 	bl	8000e04 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c26:	f7fd f8ed 	bl	8000e04 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e067      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c38:	4b35      	ldr	r3, [pc, #212]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1f0      	bne.n	8003c26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c4c:	d108      	bne.n	8003c60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c4e:	4b30      	ldr	r3, [pc, #192]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	492d      	ldr	r1, [pc, #180]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c60:	4b2b      	ldr	r3, [pc, #172]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a19      	ldr	r1, [r3, #32]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	430b      	orrs	r3, r1
 8003c72:	4927      	ldr	r1, [pc, #156]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c78:	4b27      	ldr	r3, [pc, #156]	; (8003d18 <HAL_RCC_OscConfig+0x4fc>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7e:	f7fd f8c1 	bl	8000e04 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c86:	f7fd f8bd 	bl	8000e04 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e037      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c98:	4b1d      	ldr	r3, [pc, #116]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0f0      	beq.n	8003c86 <HAL_RCC_OscConfig+0x46a>
 8003ca4:	e02f      	b.n	8003d06 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca6:	4b1c      	ldr	r3, [pc, #112]	; (8003d18 <HAL_RCC_OscConfig+0x4fc>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fd f8aa 	bl	8000e04 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb4:	f7fd f8a6 	bl	8000e04 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e020      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cc6:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x498>
 8003cd2:	e018      	b.n	8003d06 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e013      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <HAL_RCC_OscConfig+0x4f4>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d106      	bne.n	8003d02 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d001      	beq.n	8003d06 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40021000 	.word	0x40021000
 8003d14:	40007000 	.word	0x40007000
 8003d18:	42420060 	.word	0x42420060

08003d1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e0d0      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d30:	4b6a      	ldr	r3, [pc, #424]	; (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d910      	bls.n	8003d60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3e:	4b67      	ldr	r3, [pc, #412]	; (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 0207 	bic.w	r2, r3, #7
 8003d46:	4965      	ldr	r1, [pc, #404]	; (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4e:	4b63      	ldr	r3, [pc, #396]	; (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d001      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e0b8      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d020      	beq.n	8003dae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d78:	4b59      	ldr	r3, [pc, #356]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	4a58      	ldr	r2, [pc, #352]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d90:	4b53      	ldr	r3, [pc, #332]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	4a52      	ldr	r2, [pc, #328]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d9c:	4b50      	ldr	r3, [pc, #320]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	494d      	ldr	r1, [pc, #308]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d040      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d107      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc2:	4b47      	ldr	r3, [pc, #284]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d115      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e07f      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d107      	bne.n	8003dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dda:	4b41      	ldr	r3, [pc, #260]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d109      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e073      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dea:	4b3d      	ldr	r3, [pc, #244]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e06b      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dfa:	4b39      	ldr	r3, [pc, #228]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f023 0203 	bic.w	r2, r3, #3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	4936      	ldr	r1, [pc, #216]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e0c:	f7fc fffa 	bl	8000e04 <HAL_GetTick>
 8003e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e12:	e00a      	b.n	8003e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e14:	f7fc fff6 	bl	8000e04 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e053      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2a:	4b2d      	ldr	r3, [pc, #180]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f003 020c 	and.w	r2, r3, #12
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d1eb      	bne.n	8003e14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e3c:	4b27      	ldr	r3, [pc, #156]	; (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d210      	bcs.n	8003e6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4a:	4b24      	ldr	r3, [pc, #144]	; (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f023 0207 	bic.w	r2, r3, #7
 8003e52:	4922      	ldr	r1, [pc, #136]	; (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5a:	4b20      	ldr	r3, [pc, #128]	; (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d001      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e032      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d008      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e78:	4b19      	ldr	r3, [pc, #100]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	4916      	ldr	r1, [pc, #88]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d009      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e96:	4b12      	ldr	r3, [pc, #72]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	490e      	ldr	r1, [pc, #56]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eaa:	f000 f821 	bl	8003ef0 <HAL_RCC_GetSysClockFreq>
 8003eae:	4601      	mov	r1, r0
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	4a0a      	ldr	r2, [pc, #40]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ebc:	5cd3      	ldrb	r3, [r2, r3]
 8003ebe:	fa21 f303 	lsr.w	r3, r1, r3
 8003ec2:	4a09      	ldr	r2, [pc, #36]	; (8003ee8 <HAL_RCC_ClockConfig+0x1cc>)
 8003ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ec6:	4b09      	ldr	r3, [pc, #36]	; (8003eec <HAL_RCC_ClockConfig+0x1d0>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fc ff58 	bl	8000d80 <HAL_InitTick>

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40022000 	.word	0x40022000
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	08008bb8 	.word	0x08008bb8
 8003ee8:	20000004 	.word	0x20000004
 8003eec:	20000008 	.word	0x20000008

08003ef0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ef0:	b490      	push	{r4, r7}
 8003ef2:	b08a      	sub	sp, #40	; 0x28
 8003ef4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ef6:	4b2a      	ldr	r3, [pc, #168]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ef8:	1d3c      	adds	r4, r7, #4
 8003efa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003efc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f00:	4b28      	ldr	r3, [pc, #160]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f1a:	4b23      	ldr	r3, [pc, #140]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f003 030c 	and.w	r3, r3, #12
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d002      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0x40>
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d003      	beq.n	8003f36 <HAL_RCC_GetSysClockFreq+0x46>
 8003f2e:	e02d      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f30:	4b1e      	ldr	r3, [pc, #120]	; (8003fac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f32:	623b      	str	r3, [r7, #32]
      break;
 8003f34:	e02d      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	0c9b      	lsrs	r3, r3, #18
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f42:	4413      	add	r3, r2
 8003f44:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f48:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d013      	beq.n	8003f7c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f54:	4b14      	ldr	r3, [pc, #80]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	0c5b      	lsrs	r3, r3, #17
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f62:	4413      	add	r3, r2
 8003f64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	4a0f      	ldr	r2, [pc, #60]	; (8003fac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f6e:	fb02 f203 	mul.w	r2, r2, r3
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7a:	e004      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	4a0c      	ldr	r2, [pc, #48]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f80:	fb02 f303 	mul.w	r3, r2, r3
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	623b      	str	r3, [r7, #32]
      break;
 8003f8a:	e002      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f8c:	4b07      	ldr	r3, [pc, #28]	; (8003fac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f8e:	623b      	str	r3, [r7, #32]
      break;
 8003f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f92:	6a3b      	ldr	r3, [r7, #32]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3728      	adds	r7, #40	; 0x28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc90      	pop	{r4, r7}
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	08008b48 	.word	0x08008b48
 8003fa4:	08008b58 	.word	0x08008b58
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	007a1200 	.word	0x007a1200
 8003fb0:	003d0900 	.word	0x003d0900

08003fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fb8:	4b02      	ldr	r3, [pc, #8]	; (8003fc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fba:	681b      	ldr	r3, [r3, #0]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr
 8003fc4:	20000004 	.word	0x20000004

08003fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fcc:	f7ff fff2 	bl	8003fb4 <HAL_RCC_GetHCLKFreq>
 8003fd0:	4601      	mov	r1, r0
 8003fd2:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	0adb      	lsrs	r3, r3, #11
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	4a03      	ldr	r2, [pc, #12]	; (8003fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fde:	5cd3      	ldrb	r3, [r2, r3]
 8003fe0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	08008bc8 	.word	0x08008bc8

08003ff0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <RCC_Delay+0x34>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a0a      	ldr	r2, [pc, #40]	; (8004028 <RCC_Delay+0x38>)
 8003ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8004002:	0a5b      	lsrs	r3, r3, #9
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	fb02 f303 	mul.w	r3, r2, r3
 800400a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800400c:	bf00      	nop
  }
  while (Delay --);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	1e5a      	subs	r2, r3, #1
 8004012:	60fa      	str	r2, [r7, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1f9      	bne.n	800400c <RCC_Delay+0x1c>
}
 8004018:	bf00      	nop
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	20000004 	.word	0x20000004
 8004028:	10624dd3 	.word	0x10624dd3

0800402c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	2300      	movs	r3, #0
 800403a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d07d      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004048:	2300      	movs	r3, #0
 800404a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800404c:	4b4f      	ldr	r3, [pc, #316]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10d      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004058:	4b4c      	ldr	r3, [pc, #304]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	4a4b      	ldr	r2, [pc, #300]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004062:	61d3      	str	r3, [r2, #28]
 8004064:	4b49      	ldr	r3, [pc, #292]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406c:	60bb      	str	r3, [r7, #8]
 800406e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004070:	2301      	movs	r3, #1
 8004072:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004074:	4b46      	ldr	r3, [pc, #280]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407c:	2b00      	cmp	r3, #0
 800407e:	d118      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004080:	4b43      	ldr	r3, [pc, #268]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a42      	ldr	r2, [pc, #264]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800408c:	f7fc feba 	bl	8000e04 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004092:	e008      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004094:	f7fc feb6 	bl	8000e04 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b64      	cmp	r3, #100	; 0x64
 80040a0:	d901      	bls.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e06d      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a6:	4b3a      	ldr	r3, [pc, #232]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0f0      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040b2:	4b36      	ldr	r3, [pc, #216]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d02e      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d027      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040d0:	4b2e      	ldr	r3, [pc, #184]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040da:	4b2e      	ldr	r3, [pc, #184]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040dc:	2201      	movs	r2, #1
 80040de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040e0:	4b2c      	ldr	r3, [pc, #176]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040e6:	4a29      	ldr	r2, [pc, #164]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d014      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f6:	f7fc fe85 	bl	8000e04 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040fc:	e00a      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040fe:	f7fc fe81 	bl	8000e04 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	f241 3288 	movw	r2, #5000	; 0x1388
 800410c:	4293      	cmp	r3, r2
 800410e:	d901      	bls.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e036      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004114:	4b1d      	ldr	r3, [pc, #116]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0ee      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004120:	4b1a      	ldr	r3, [pc, #104]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	4917      	ldr	r1, [pc, #92]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412e:	4313      	orrs	r3, r2
 8004130:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004132:	7dfb      	ldrb	r3, [r7, #23]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d105      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004138:	4b14      	ldr	r3, [pc, #80]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	4a13      	ldr	r2, [pc, #76]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800413e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004142:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d008      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004150:	4b0e      	ldr	r3, [pc, #56]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	490b      	ldr	r1, [pc, #44]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415e:	4313      	orrs	r3, r2
 8004160:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	2b00      	cmp	r3, #0
 800416c:	d008      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800416e:	4b07      	ldr	r3, [pc, #28]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	4904      	ldr	r1, [pc, #16]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417c:	4313      	orrs	r3, r2
 800417e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40021000 	.word	0x40021000
 8004190:	40007000 	.word	0x40007000
 8004194:	42420440 	.word	0x42420440

08004198 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004198:	b590      	push	{r4, r7, lr}
 800419a:	b08d      	sub	sp, #52	; 0x34
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80041a0:	4b55      	ldr	r3, [pc, #340]	; (80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80041a2:	f107 040c 	add.w	r4, r7, #12
 80041a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80041ac:	4b53      	ldr	r3, [pc, #332]	; (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
 80041b6:	2300      	movs	r3, #0
 80041b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ba:	2300      	movs	r3, #0
 80041bc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	61fb      	str	r3, [r7, #28]
 80041c2:	2300      	movs	r3, #0
 80041c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d07f      	beq.n	80042cc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80041cc:	2b10      	cmp	r3, #16
 80041ce:	d002      	beq.n	80041d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d048      	beq.n	8004266 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80041d4:	e08b      	b.n	80042ee <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80041d6:	4b4a      	ldr	r3, [pc, #296]	; (8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80041dc:	4b48      	ldr	r3, [pc, #288]	; (8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d07f      	beq.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	0c9b      	lsrs	r3, r3, #18
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80041f4:	4413      	add	r3, r2
 80041f6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80041fa:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d018      	beq.n	8004238 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004206:	4b3e      	ldr	r3, [pc, #248]	; (8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	0c5b      	lsrs	r3, r3, #17
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004214:	4413      	add	r3, r2
 8004216:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00d      	beq.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004226:	4a37      	ldr	r2, [pc, #220]	; (8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	fbb2 f2f3 	udiv	r2, r2, r3
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	fb02 f303 	mul.w	r3, r2, r3
 8004234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004236:	e004      	b.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	4a33      	ldr	r2, [pc, #204]	; (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800423c:	fb02 f303 	mul.w	r3, r2, r3
 8004240:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004242:	4b2f      	ldr	r3, [pc, #188]	; (8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800424e:	d102      	bne.n	8004256 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8004250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004252:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004254:	e048      	b.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8004256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	4a2c      	ldr	r2, [pc, #176]	; (800430c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800425c:	fba2 2303 	umull	r2, r3, r2, r3
 8004260:	085b      	lsrs	r3, r3, #1
 8004262:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004264:	e040      	b.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8004266:	4b26      	ldr	r3, [pc, #152]	; (8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004276:	d108      	bne.n	800428a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8004282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004286:	62bb      	str	r3, [r7, #40]	; 0x28
 8004288:	e01f      	b.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004294:	d109      	bne.n	80042aa <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8004296:	4b1a      	ldr	r3, [pc, #104]	; (8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80042a2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80042a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80042a8:	e00f      	b.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042b4:	d11a      	bne.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80042b6:	4b12      	ldr	r3, [pc, #72]	; (8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d014      	beq.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80042c2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80042c6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80042c8:	e010      	b.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80042ca:	e00f      	b.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80042cc:	f7ff fe7c 	bl	8003fc8 <HAL_RCC_GetPCLK2Freq>
 80042d0:	4602      	mov	r2, r0
 80042d2:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	0b9b      	lsrs	r3, r3, #14
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	3301      	adds	r3, #1
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80042e6:	e002      	b.n	80042ee <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80042e8:	bf00      	nop
 80042ea:	e000      	b.n	80042ee <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80042ec:	bf00      	nop
    }
  }
  return (frequency);
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3734      	adds	r7, #52	; 0x34
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd90      	pop	{r4, r7, pc}
 80042f8:	08008b5c 	.word	0x08008b5c
 80042fc:	08008b6c 	.word	0x08008b6c
 8004300:	40021000 	.word	0x40021000
 8004304:	007a1200 	.word	0x007a1200
 8004308:	003d0900 	.word	0x003d0900
 800430c:	aaaaaaab 	.word	0xaaaaaaab

08004310 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e076      	b.n	8004410 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	2b00      	cmp	r3, #0
 8004328:	d108      	bne.n	800433c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004332:	d009      	beq.n	8004348 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	61da      	str	r2, [r3, #28]
 800433a:	e005      	b.n	8004348 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fc fbf2 	bl	8000b4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800437e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004390:	431a      	orrs	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043cc:	ea42 0103 	orr.w	r1, r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	0c1a      	lsrs	r2, r3, #16
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f002 0204 	and.w	r2, r2, #4
 80043ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	69da      	ldr	r2, [r3, #28]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b088      	sub	sp, #32
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	603b      	str	r3, [r7, #0]
 8004424:	4613      	mov	r3, r2
 8004426:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004428:	2300      	movs	r3, #0
 800442a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <HAL_SPI_Transmit+0x22>
 8004436:	2302      	movs	r3, #2
 8004438:	e126      	b.n	8004688 <HAL_SPI_Transmit+0x270>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004442:	f7fc fcdf 	bl	8000e04 <HAL_GetTick>
 8004446:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004448:	88fb      	ldrh	r3, [r7, #6]
 800444a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b01      	cmp	r3, #1
 8004456:	d002      	beq.n	800445e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004458:	2302      	movs	r3, #2
 800445a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800445c:	e10b      	b.n	8004676 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_SPI_Transmit+0x52>
 8004464:	88fb      	ldrh	r3, [r7, #6]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d102      	bne.n	8004470 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800446e:	e102      	b.n	8004676 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2203      	movs	r2, #3
 8004474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	88fa      	ldrh	r2, [r7, #6]
 8004488:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	88fa      	ldrh	r2, [r7, #6]
 800448e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b6:	d10f      	bne.n	80044d8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e2:	2b40      	cmp	r3, #64	; 0x40
 80044e4:	d007      	beq.n	80044f6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044fe:	d14b      	bne.n	8004598 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <HAL_SPI_Transmit+0xf6>
 8004508:	8afb      	ldrh	r3, [r7, #22]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d13e      	bne.n	800458c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	881a      	ldrh	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	1c9a      	adds	r2, r3, #2
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004528:	b29b      	uxth	r3, r3
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004532:	e02b      	b.n	800458c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b02      	cmp	r3, #2
 8004540:	d112      	bne.n	8004568 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	881a      	ldrh	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004552:	1c9a      	adds	r2, r3, #2
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800455c:	b29b      	uxth	r3, r3
 800455e:	3b01      	subs	r3, #1
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	86da      	strh	r2, [r3, #54]	; 0x36
 8004566:	e011      	b.n	800458c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004568:	f7fc fc4c 	bl	8000e04 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d803      	bhi.n	8004580 <HAL_SPI_Transmit+0x168>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457e:	d102      	bne.n	8004586 <HAL_SPI_Transmit+0x16e>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d102      	bne.n	800458c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	77fb      	strb	r3, [r7, #31]
          goto error;
 800458a:	e074      	b.n	8004676 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1ce      	bne.n	8004534 <HAL_SPI_Transmit+0x11c>
 8004596:	e04c      	b.n	8004632 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <HAL_SPI_Transmit+0x18e>
 80045a0:	8afb      	ldrh	r3, [r7, #22]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d140      	bne.n	8004628 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	330c      	adds	r3, #12
 80045b0:	7812      	ldrb	r2, [r2, #0]
 80045b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	3b01      	subs	r3, #1
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80045cc:	e02c      	b.n	8004628 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d113      	bne.n	8004604 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	330c      	adds	r3, #12
 80045e6:	7812      	ldrb	r2, [r2, #0]
 80045e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	86da      	strh	r2, [r3, #54]	; 0x36
 8004602:	e011      	b.n	8004628 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004604:	f7fc fbfe 	bl	8000e04 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	429a      	cmp	r2, r3
 8004612:	d803      	bhi.n	800461c <HAL_SPI_Transmit+0x204>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461a:	d102      	bne.n	8004622 <HAL_SPI_Transmit+0x20a>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d102      	bne.n	8004628 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004626:	e026      	b.n	8004676 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1cd      	bne.n	80045ce <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	6839      	ldr	r1, [r7, #0]
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f8b2 	bl	80047a0 <SPI_EndRxTxTransaction>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2220      	movs	r2, #32
 8004646:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10a      	bne.n	8004666 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004650:	2300      	movs	r3, #0
 8004652:	613b      	str	r3, [r7, #16]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	77fb      	strb	r3, [r7, #31]
 8004672:	e000      	b.n	8004676 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004674:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004686:	7ffb      	ldrb	r3, [r7, #31]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3720      	adds	r7, #32
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	4613      	mov	r3, r2
 800469e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046a0:	f7fc fbb0 	bl	8000e04 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a8:	1a9b      	subs	r3, r3, r2
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	4413      	add	r3, r2
 80046ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046b0:	f7fc fba8 	bl	8000e04 <HAL_GetTick>
 80046b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046b6:	4b39      	ldr	r3, [pc, #228]	; (800479c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	015b      	lsls	r3, r3, #5
 80046bc:	0d1b      	lsrs	r3, r3, #20
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	fb02 f303 	mul.w	r3, r2, r3
 80046c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046c6:	e054      	b.n	8004772 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ce:	d050      	beq.n	8004772 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046d0:	f7fc fb98 	bl	8000e04 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	69fa      	ldr	r2, [r7, #28]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d902      	bls.n	80046e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d13d      	bne.n	8004762 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046fe:	d111      	bne.n	8004724 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004708:	d004      	beq.n	8004714 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004712:	d107      	bne.n	8004724 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004722:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800472c:	d10f      	bne.n	800474e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800474c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e017      	b.n	8004792 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	3b01      	subs	r3, #1
 8004770:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	4013      	ands	r3, r2
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	429a      	cmp	r2, r3
 8004780:	bf0c      	ite	eq
 8004782:	2301      	moveq	r3, #1
 8004784:	2300      	movne	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	461a      	mov	r2, r3
 800478a:	79fb      	ldrb	r3, [r7, #7]
 800478c:	429a      	cmp	r2, r3
 800478e:	d19b      	bne.n	80046c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3720      	adds	r7, #32
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	20000004 	.word	0x20000004

080047a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af02      	add	r7, sp, #8
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2200      	movs	r2, #0
 80047b4:	2180      	movs	r1, #128	; 0x80
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f7ff ff6a 	bl	8004690 <SPI_WaitFlagStateUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d007      	beq.n	80047d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c6:	f043 0220 	orr.w	r2, r3, #32
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e000      	b.n	80047d4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80047dc:	b084      	sub	sp, #16
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	f107 0014 	add.w	r0, r7, #20
 80047ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	b004      	add	sp, #16
 80047fa:	4770      	bx	lr

080047fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800480c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004810:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	b29a      	uxth	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	bc80      	pop	{r7}
 8004826:	4770      	bx	lr

08004828 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004830:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004834:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	b29b      	uxth	r3, r3
 8004842:	43db      	mvns	r3, r3
 8004844:	b29b      	uxth	r3, r3
 8004846:	4013      	ands	r3, r2
 8004848:	b29a      	uxth	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	bc80      	pop	{r7}
 800485a:	4770      	bx	lr

0800485c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	bc80      	pop	{r7}
 8004872:	4770      	bx	lr

08004874 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004874:	b084      	sub	sp, #16
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	f107 0014 	add.w	r0, r7, #20
 8004882:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	b004      	add	sp, #16
 80048b2:	4770      	bx	lr

080048b4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b09b      	sub	sp, #108	; 0x6c
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80048d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	78db      	ldrb	r3, [r3, #3]
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d81f      	bhi.n	8004926 <USB_ActivateEndpoint+0x72>
 80048e6:	a201      	add	r2, pc, #4	; (adr r2, 80048ec <USB_ActivateEndpoint+0x38>)
 80048e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ec:	080048fd 	.word	0x080048fd
 80048f0:	08004919 	.word	0x08004919
 80048f4:	0800492f 	.word	0x0800492f
 80048f8:	0800490b 	.word	0x0800490b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80048fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004900:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004904:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004908:	e012      	b.n	8004930 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800490a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800490e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004912:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004916:	e00b      	b.n	8004930 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004918:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800491c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004920:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004924:	e004      	b.n	8004930 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800492c:	e000      	b.n	8004930 <USB_ActivateEndpoint+0x7c>
      break;
 800492e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	441a      	add	r2, r3
 800493a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800493e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800494a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800494e:	b29b      	uxth	r3, r3
 8004950:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	b29b      	uxth	r3, r3
 8004960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004968:	b29a      	uxth	r2, r3
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	b29b      	uxth	r3, r3
 8004970:	4313      	orrs	r3, r2
 8004972:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	441a      	add	r2, r3
 8004980:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800498c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004994:	b29b      	uxth	r3, r3
 8004996:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	7b1b      	ldrb	r3, [r3, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	f040 8149 	bne.w	8004c34 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	785b      	ldrb	r3, [r3, #1]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 8084 	beq.w	8004ab4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	617b      	str	r3, [r7, #20]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	461a      	mov	r2, r3
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	4413      	add	r3, r2
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	011a      	lsls	r2, r3, #4
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049ce:	613b      	str	r3, [r7, #16]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	88db      	ldrh	r3, [r3, #6]
 80049d4:	085b      	lsrs	r3, r3, #1
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	81fb      	strh	r3, [r7, #14]
 80049ee:	89fb      	ldrh	r3, [r7, #14]
 80049f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d01b      	beq.n	8004a30 <USB_ActivateEndpoint+0x17c>
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0e:	81bb      	strh	r3, [r7, #12]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	441a      	add	r2, r3
 8004a1a:	89bb      	ldrh	r3, [r7, #12]
 8004a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	78db      	ldrb	r3, [r3, #3]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d020      	beq.n	8004a7a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a4e:	813b      	strh	r3, [r7, #8]
 8004a50:	893b      	ldrh	r3, [r7, #8]
 8004a52:	f083 0320 	eor.w	r3, r3, #32
 8004a56:	813b      	strh	r3, [r7, #8]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	441a      	add	r2, r3
 8004a62:	893b      	ldrh	r3, [r7, #8]
 8004a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	8013      	strh	r3, [r2, #0]
 8004a78:	e27f      	b.n	8004f7a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a90:	817b      	strh	r3, [r7, #10]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	441a      	add	r2, r3
 8004a9c:	897b      	ldrh	r3, [r7, #10]
 8004a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	8013      	strh	r3, [r2, #0]
 8004ab2:	e262      	b.n	8004f7a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac4:	4413      	add	r3, r2
 8004ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	011a      	lsls	r2, r3, #4
 8004ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	88db      	ldrh	r3, [r3, #6]
 8004adc:	085b      	lsrs	r3, r3, #1
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	461a      	mov	r2, r3
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	4413      	add	r3, r2
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	011a      	lsls	r2, r3, #4
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	4413      	add	r3, r2
 8004b06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b0a:	623b      	str	r3, [r7, #32]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d112      	bne.n	8004b3a <USB_ActivateEndpoint+0x286>
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	801a      	strh	r2, [r3, #0]
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	801a      	strh	r2, [r3, #0]
 8004b38:	e02f      	b.n	8004b9a <USB_ActivateEndpoint+0x2e6>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	2b3e      	cmp	r3, #62	; 0x3e
 8004b40:	d813      	bhi.n	8004b6a <USB_ActivateEndpoint+0x2b6>
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	085b      	lsrs	r3, r3, #1
 8004b48:	663b      	str	r3, [r7, #96]	; 0x60
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <USB_ActivateEndpoint+0x2a8>
 8004b56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b58:	3301      	adds	r3, #1
 8004b5a:	663b      	str	r3, [r7, #96]	; 0x60
 8004b5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	029b      	lsls	r3, r3, #10
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	801a      	strh	r2, [r3, #0]
 8004b68:	e017      	b.n	8004b9a <USB_ActivateEndpoint+0x2e6>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	663b      	str	r3, [r7, #96]	; 0x60
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f003 031f 	and.w	r3, r3, #31
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d102      	bne.n	8004b84 <USB_ActivateEndpoint+0x2d0>
 8004b7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b80:	3b01      	subs	r3, #1
 8004b82:	663b      	str	r3, [r7, #96]	; 0x60
 8004b84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	029b      	lsls	r3, r3, #10
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	83fb      	strh	r3, [r7, #30]
 8004ba8:	8bfb      	ldrh	r3, [r7, #30]
 8004baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d01b      	beq.n	8004bea <USB_ActivateEndpoint+0x336>
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc8:	83bb      	strh	r3, [r7, #28]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	441a      	add	r2, r3
 8004bd4:	8bbb      	ldrh	r3, [r7, #28]
 8004bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c00:	837b      	strh	r3, [r7, #26]
 8004c02:	8b7b      	ldrh	r3, [r7, #26]
 8004c04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c08:	837b      	strh	r3, [r7, #26]
 8004c0a:	8b7b      	ldrh	r3, [r7, #26]
 8004c0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c10:	837b      	strh	r3, [r7, #26]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	441a      	add	r2, r3
 8004c1c:	8b7b      	ldrh	r3, [r7, #26]
 8004c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	8013      	strh	r3, [r2, #0]
 8004c32:	e1a2      	b.n	8004f7a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	441a      	add	r2, r3
 8004c58:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c64:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c80:	4413      	add	r3, r2
 8004c82:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	011a      	lsls	r2, r3, #4
 8004c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c92:	657b      	str	r3, [r7, #84]	; 0x54
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	891b      	ldrh	r3, [r3, #8]
 8004c98:	085b      	lsrs	r3, r3, #1
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ca2:	801a      	strh	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cb4:	4413      	add	r3, r2
 8004cb6:	653b      	str	r3, [r7, #80]	; 0x50
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	011a      	lsls	r2, r3, #4
 8004cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	895b      	ldrh	r3, [r3, #10]
 8004ccc:	085b      	lsrs	r3, r3, #1
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cd6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	785b      	ldrb	r3, [r3, #1]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f040 8091 	bne.w	8004e04 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004cf0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d01b      	beq.n	8004d32 <USB_ActivateEndpoint+0x47e>
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d10:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	441a      	add	r2, r3
 8004d1c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	873b      	strh	r3, [r7, #56]	; 0x38
 8004d40:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d01b      	beq.n	8004d82 <USB_ActivateEndpoint+0x4ce>
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d60:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	441a      	add	r2, r3
 8004d6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d98:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004d9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004d9c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004da0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004da2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004da4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004da8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	441a      	add	r2, r3
 8004db4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004de0:	867b      	strh	r3, [r7, #50]	; 0x32
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	441a      	add	r2, r3
 8004dec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	8013      	strh	r3, [r2, #0]
 8004e02:	e0ba      	b.n	8004f7a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004e14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d01d      	beq.n	8004e5c <USB_ActivateEndpoint+0x5a8>
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e36:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	441a      	add	r2, r3
 8004e44:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004e6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d01d      	beq.n	8004eb4 <USB_ActivateEndpoint+0x600>
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e8e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	441a      	add	r2, r3
 8004e9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	78db      	ldrb	r3, [r3, #3]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d024      	beq.n	8004f06 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ed2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004ed6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004eda:	f083 0320 	eor.w	r3, r3, #32
 8004ede:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	441a      	add	r2, r3
 8004eec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	8013      	strh	r3, [r2, #0]
 8004f04:	e01d      	b.n	8004f42 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f1c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	441a      	add	r2, r3
 8004f2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f58:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	441a      	add	r2, r3
 8004f64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004f7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	376c      	adds	r7, #108	; 0x6c
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bc80      	pop	{r7}
 8004f86:	4770      	bx	lr

08004f88 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b08d      	sub	sp, #52	; 0x34
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	7b1b      	ldrb	r3, [r3, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f040 808e 	bne.w	80050b8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	785b      	ldrb	r3, [r3, #1]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d044      	beq.n	800502e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	81bb      	strh	r3, [r7, #12]
 8004fb2:	89bb      	ldrh	r3, [r7, #12]
 8004fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d01b      	beq.n	8004ff4 <USB_DeactivateEndpoint+0x6c>
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd2:	817b      	strh	r3, [r7, #10]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	441a      	add	r2, r3
 8004fde:	897b      	ldrh	r3, [r7, #10]
 8004fe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	b29b      	uxth	r3, r3
 8005002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800500a:	813b      	strh	r3, [r7, #8]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	441a      	add	r2, r3
 8005016:	893b      	ldrh	r3, [r7, #8]
 8005018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800501c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005028:	b29b      	uxth	r3, r3
 800502a:	8013      	strh	r3, [r2, #0]
 800502c:	e192      	b.n	8005354 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	827b      	strh	r3, [r7, #18]
 800503c:	8a7b      	ldrh	r3, [r7, #18]
 800503e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d01b      	beq.n	800507e <USB_DeactivateEndpoint+0xf6>
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	b29b      	uxth	r3, r3
 8005054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505c:	823b      	strh	r3, [r7, #16]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	441a      	add	r2, r3
 8005068:	8a3b      	ldrh	r3, [r7, #16]
 800506a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800506e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005072:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507a:	b29b      	uxth	r3, r3
 800507c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005094:	81fb      	strh	r3, [r7, #14]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	441a      	add	r2, r3
 80050a0:	89fb      	ldrh	r3, [r7, #14]
 80050a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	8013      	strh	r3, [r2, #0]
 80050b6:	e14d      	b.n	8005354 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	785b      	ldrb	r3, [r3, #1]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f040 80a5 	bne.w	800520c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	843b      	strh	r3, [r7, #32]
 80050d0:	8c3b      	ldrh	r3, [r7, #32]
 80050d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d01b      	beq.n	8005112 <USB_DeactivateEndpoint+0x18a>
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f0:	83fb      	strh	r3, [r7, #30]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	441a      	add	r2, r3
 80050fc:	8bfb      	ldrh	r3, [r7, #30]
 80050fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005106:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800510a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800510e:	b29b      	uxth	r3, r3
 8005110:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	83bb      	strh	r3, [r7, #28]
 8005120:	8bbb      	ldrh	r3, [r7, #28]
 8005122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005126:	2b00      	cmp	r3, #0
 8005128:	d01b      	beq.n	8005162 <USB_DeactivateEndpoint+0x1da>
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800513c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005140:	837b      	strh	r3, [r7, #26]
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	441a      	add	r2, r3
 800514c:	8b7b      	ldrh	r3, [r7, #26]
 800514e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800515e:	b29b      	uxth	r3, r3
 8005160:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	b29b      	uxth	r3, r3
 8005170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005178:	833b      	strh	r3, [r7, #24]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	441a      	add	r2, r3
 8005184:	8b3b      	ldrh	r3, [r7, #24]
 8005186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800518a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800518e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005192:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005196:	b29b      	uxth	r3, r3
 8005198:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b0:	82fb      	strh	r3, [r7, #22]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	441a      	add	r2, r3
 80051bc:	8afb      	ldrh	r3, [r7, #22]
 80051be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051e8:	82bb      	strh	r3, [r7, #20]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	441a      	add	r2, r3
 80051f4:	8abb      	ldrh	r3, [r7, #20]
 80051f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005206:	b29b      	uxth	r3, r3
 8005208:	8013      	strh	r3, [r2, #0]
 800520a:	e0a3      	b.n	8005354 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	881b      	ldrh	r3, [r3, #0]
 8005218:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800521a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800521c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d01b      	beq.n	800525c <USB_DeactivateEndpoint+0x2d4>
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	b29b      	uxth	r3, r3
 8005232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	441a      	add	r2, r3
 8005246:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800524c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005250:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005258:	b29b      	uxth	r3, r3
 800525a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	857b      	strh	r3, [r7, #42]	; 0x2a
 800526a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800526c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01b      	beq.n	80052ac <USB_DeactivateEndpoint+0x324>
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	b29b      	uxth	r3, r3
 8005282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528a:	853b      	strh	r3, [r7, #40]	; 0x28
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	441a      	add	r2, r3
 8005296:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800529c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	441a      	add	r2, r3
 80052ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80052d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	441a      	add	r2, r3
 8005306:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800530c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005318:	b29b      	uxth	r3, r3
 800531a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	b29b      	uxth	r3, r3
 800532a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800532e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005332:	847b      	strh	r3, [r7, #34]	; 0x22
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	441a      	add	r2, r3
 800533e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800534c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005350:	b29b      	uxth	r3, r3
 8005352:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3734      	adds	r7, #52	; 0x34
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr

08005360 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b0c4      	sub	sp, #272	; 0x110
 8005364:	af00      	add	r7, sp, #0
 8005366:	1d3b      	adds	r3, r7, #4
 8005368:	6018      	str	r0, [r3, #0]
 800536a:	463b      	mov	r3, r7
 800536c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800536e:	463b      	mov	r3, r7
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	785b      	ldrb	r3, [r3, #1]
 8005374:	2b01      	cmp	r3, #1
 8005376:	f040 8557 	bne.w	8005e28 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800537a:	463b      	mov	r3, r7
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699a      	ldr	r2, [r3, #24]
 8005380:	463b      	mov	r3, r7
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	429a      	cmp	r2, r3
 8005388:	d905      	bls.n	8005396 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800538a:	463b      	mov	r3, r7
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005394:	e004      	b.n	80053a0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005396:	463b      	mov	r3, r7
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80053a0:	463b      	mov	r3, r7
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	7b1b      	ldrb	r3, [r3, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d12c      	bne.n	8005404 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80053aa:	463b      	mov	r3, r7
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6959      	ldr	r1, [r3, #20]
 80053b0:	463b      	mov	r3, r7
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	88da      	ldrh	r2, [r3, #6]
 80053b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	1d38      	adds	r0, r7, #4
 80053be:	6800      	ldr	r0, [r0, #0]
 80053c0:	f001 fa2c 	bl	800681c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80053c4:	1d3b      	adds	r3, r7, #4
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	1d3b      	adds	r3, r7, #4
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	461a      	mov	r2, r3
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	4413      	add	r3, r2
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	463b      	mov	r3, r7
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	011a      	lsls	r2, r3, #4
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	4413      	add	r3, r2
 80053e8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80053ec:	f107 0310 	add.w	r3, r7, #16
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	f107 0310 	add.w	r3, r7, #16
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	801a      	strh	r2, [r3, #0]
 8005400:	f000 bcdd 	b.w	8005dbe <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005404:	463b      	mov	r3, r7
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	78db      	ldrb	r3, [r3, #3]
 800540a:	2b02      	cmp	r3, #2
 800540c:	f040 8347 	bne.w	8005a9e <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005410:	463b      	mov	r3, r7
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6a1a      	ldr	r2, [r3, #32]
 8005416:	463b      	mov	r3, r7
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	429a      	cmp	r2, r3
 800541e:	f240 82eb 	bls.w	80059f8 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005422:	1d3b      	adds	r3, r7, #4
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	463b      	mov	r3, r7
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	b29b      	uxth	r3, r3
 8005434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005440:	1d3b      	adds	r3, r7, #4
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	463b      	mov	r3, r7
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	441a      	add	r2, r3
 800544e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800545a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800545e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005462:	b29b      	uxth	r3, r3
 8005464:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005466:	463b      	mov	r3, r7
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6a1a      	ldr	r2, [r3, #32]
 800546c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005470:	1ad2      	subs	r2, r2, r3
 8005472:	463b      	mov	r3, r7
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005478:	1d3b      	adds	r3, r7, #4
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	463b      	mov	r3, r7
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	b29b      	uxth	r3, r3
 800548a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 8159 	beq.w	8005746 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005494:	1d3b      	adds	r3, r7, #4
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	637b      	str	r3, [r7, #52]	; 0x34
 800549a:	463b      	mov	r3, r7
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	785b      	ldrb	r3, [r3, #1]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d164      	bne.n	800556e <USB_EPStartXfer+0x20e>
 80054a4:	1d3b      	adds	r3, r7, #4
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054aa:	1d3b      	adds	r3, r7, #4
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	461a      	mov	r2, r3
 80054b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b8:	4413      	add	r3, r2
 80054ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054bc:	463b      	mov	r3, r7
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	011a      	lsls	r2, r3, #4
 80054c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c6:	4413      	add	r3, r2
 80054c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80054ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d112      	bne.n	80054fc <USB_EPStartXfer+0x19c>
 80054d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	b29b      	uxth	r3, r3
 80054dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e4:	801a      	strh	r2, [r3, #0]
 80054e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f8:	801a      	strh	r2, [r3, #0]
 80054fa:	e054      	b.n	80055a6 <USB_EPStartXfer+0x246>
 80054fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005500:	2b3e      	cmp	r3, #62	; 0x3e
 8005502:	d817      	bhi.n	8005534 <USB_EPStartXfer+0x1d4>
 8005504:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005508:	085b      	lsrs	r3, r3, #1
 800550a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800550e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d004      	beq.n	8005524 <USB_EPStartXfer+0x1c4>
 800551a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800551e:	3301      	adds	r3, #1
 8005520:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005528:	b29b      	uxth	r3, r3
 800552a:	029b      	lsls	r3, r3, #10
 800552c:	b29a      	uxth	r2, r3
 800552e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005530:	801a      	strh	r2, [r3, #0]
 8005532:	e038      	b.n	80055a6 <USB_EPStartXfer+0x246>
 8005534:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005538:	095b      	lsrs	r3, r3, #5
 800553a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800553e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005542:	f003 031f 	and.w	r3, r3, #31
 8005546:	2b00      	cmp	r3, #0
 8005548:	d104      	bne.n	8005554 <USB_EPStartXfer+0x1f4>
 800554a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800554e:	3b01      	subs	r3, #1
 8005550:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005558:	b29b      	uxth	r3, r3
 800555a:	029b      	lsls	r3, r3, #10
 800555c:	b29b      	uxth	r3, r3
 800555e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005566:	b29a      	uxth	r2, r3
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	801a      	strh	r2, [r3, #0]
 800556c:	e01b      	b.n	80055a6 <USB_EPStartXfer+0x246>
 800556e:	463b      	mov	r3, r7
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	785b      	ldrb	r3, [r3, #1]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d116      	bne.n	80055a6 <USB_EPStartXfer+0x246>
 8005578:	1d3b      	adds	r3, r7, #4
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005580:	b29b      	uxth	r3, r3
 8005582:	461a      	mov	r2, r3
 8005584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005586:	4413      	add	r3, r2
 8005588:	637b      	str	r3, [r7, #52]	; 0x34
 800558a:	463b      	mov	r3, r7
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	011a      	lsls	r2, r3, #4
 8005592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005594:	4413      	add	r3, r2
 8005596:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800559a:	633b      	str	r3, [r7, #48]	; 0x30
 800559c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80055a6:	463b      	mov	r3, r7
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	895b      	ldrh	r3, [r3, #10]
 80055ac:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055b0:	463b      	mov	r3, r7
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6959      	ldr	r1, [r3, #20]
 80055b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80055c0:	1d38      	adds	r0, r7, #4
 80055c2:	6800      	ldr	r0, [r0, #0]
 80055c4:	f001 f92a 	bl	800681c <USB_WritePMA>
            ep->xfer_buff += len;
 80055c8:	463b      	mov	r3, r7
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	695a      	ldr	r2, [r3, #20]
 80055ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055d2:	441a      	add	r2, r3
 80055d4:	463b      	mov	r3, r7
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80055da:	463b      	mov	r3, r7
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6a1a      	ldr	r2, [r3, #32]
 80055e0:	463b      	mov	r3, r7
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d909      	bls.n	80055fe <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80055ea:	463b      	mov	r3, r7
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6a1a      	ldr	r2, [r3, #32]
 80055f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055f4:	1ad2      	subs	r2, r2, r3
 80055f6:	463b      	mov	r3, r7
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	621a      	str	r2, [r3, #32]
 80055fc:	e008      	b.n	8005610 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80055fe:	463b      	mov	r3, r7
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005608:	463b      	mov	r3, r7
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2200      	movs	r2, #0
 800560e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005610:	463b      	mov	r3, r7
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	785b      	ldrb	r3, [r3, #1]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d164      	bne.n	80056e4 <USB_EPStartXfer+0x384>
 800561a:	1d3b      	adds	r3, r7, #4
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	61fb      	str	r3, [r7, #28]
 8005620:	1d3b      	adds	r3, r7, #4
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005628:	b29b      	uxth	r3, r3
 800562a:	461a      	mov	r2, r3
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	4413      	add	r3, r2
 8005630:	61fb      	str	r3, [r7, #28]
 8005632:	463b      	mov	r3, r7
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	011a      	lsls	r2, r3, #4
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	4413      	add	r3, r2
 800563e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005642:	61bb      	str	r3, [r7, #24]
 8005644:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005648:	2b00      	cmp	r3, #0
 800564a:	d112      	bne.n	8005672 <USB_EPStartXfer+0x312>
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005656:	b29a      	uxth	r2, r3
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	801a      	strh	r2, [r3, #0]
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	b29b      	uxth	r3, r3
 8005662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800566a:	b29a      	uxth	r2, r3
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	801a      	strh	r2, [r3, #0]
 8005670:	e057      	b.n	8005722 <USB_EPStartXfer+0x3c2>
 8005672:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005676:	2b3e      	cmp	r3, #62	; 0x3e
 8005678:	d817      	bhi.n	80056aa <USB_EPStartXfer+0x34a>
 800567a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800567e:	085b      	lsrs	r3, r3, #1
 8005680:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d004      	beq.n	800569a <USB_EPStartXfer+0x33a>
 8005690:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005694:	3301      	adds	r3, #1
 8005696:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800569a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800569e:	b29b      	uxth	r3, r3
 80056a0:	029b      	lsls	r3, r3, #10
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	801a      	strh	r2, [r3, #0]
 80056a8:	e03b      	b.n	8005722 <USB_EPStartXfer+0x3c2>
 80056aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ae:	095b      	lsrs	r3, r3, #5
 80056b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056b8:	f003 031f 	and.w	r3, r3, #31
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d104      	bne.n	80056ca <USB_EPStartXfer+0x36a>
 80056c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80056c4:	3b01      	subs	r3, #1
 80056c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	029b      	lsls	r3, r3, #10
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056dc:	b29a      	uxth	r2, r3
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	801a      	strh	r2, [r3, #0]
 80056e2:	e01e      	b.n	8005722 <USB_EPStartXfer+0x3c2>
 80056e4:	463b      	mov	r3, r7
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	785b      	ldrb	r3, [r3, #1]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d119      	bne.n	8005722 <USB_EPStartXfer+0x3c2>
 80056ee:	1d3b      	adds	r3, r7, #4
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
 80056f4:	1d3b      	adds	r3, r7, #4
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	461a      	mov	r2, r3
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	4413      	add	r3, r2
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
 8005706:	463b      	mov	r3, r7
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	011a      	lsls	r2, r3, #4
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	4413      	add	r3, r2
 8005712:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005716:	623b      	str	r3, [r7, #32]
 8005718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800571c:	b29a      	uxth	r2, r3
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005722:	463b      	mov	r3, r7
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	891b      	ldrh	r3, [r3, #8]
 8005728:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800572c:	463b      	mov	r3, r7
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6959      	ldr	r1, [r3, #20]
 8005732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005736:	b29b      	uxth	r3, r3
 8005738:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800573c:	1d38      	adds	r0, r7, #4
 800573e:	6800      	ldr	r0, [r0, #0]
 8005740:	f001 f86c 	bl	800681c <USB_WritePMA>
 8005744:	e33b      	b.n	8005dbe <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005746:	463b      	mov	r3, r7
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	785b      	ldrb	r3, [r3, #1]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d164      	bne.n	800581a <USB_EPStartXfer+0x4ba>
 8005750:	1d3b      	adds	r3, r7, #4
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005756:	1d3b      	adds	r3, r7, #4
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800575e:	b29b      	uxth	r3, r3
 8005760:	461a      	mov	r2, r3
 8005762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005764:	4413      	add	r3, r2
 8005766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005768:	463b      	mov	r3, r7
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	011a      	lsls	r2, r3, #4
 8005770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005772:	4413      	add	r3, r2
 8005774:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005778:	64bb      	str	r3, [r7, #72]	; 0x48
 800577a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800577e:	2b00      	cmp	r3, #0
 8005780:	d112      	bne.n	80057a8 <USB_EPStartXfer+0x448>
 8005782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	b29b      	uxth	r3, r3
 8005788:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800578c:	b29a      	uxth	r2, r3
 800578e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005790:	801a      	strh	r2, [r3, #0]
 8005792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	b29b      	uxth	r3, r3
 8005798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800579c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057a4:	801a      	strh	r2, [r3, #0]
 80057a6:	e057      	b.n	8005858 <USB_EPStartXfer+0x4f8>
 80057a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ac:	2b3e      	cmp	r3, #62	; 0x3e
 80057ae:	d817      	bhi.n	80057e0 <USB_EPStartXfer+0x480>
 80057b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057b4:	085b      	lsrs	r3, r3, #1
 80057b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80057ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d004      	beq.n	80057d0 <USB_EPStartXfer+0x470>
 80057c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057ca:	3301      	adds	r3, #1
 80057cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80057d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	029b      	lsls	r3, r3, #10
 80057d8:	b29a      	uxth	r2, r3
 80057da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057dc:	801a      	strh	r2, [r3, #0]
 80057de:	e03b      	b.n	8005858 <USB_EPStartXfer+0x4f8>
 80057e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057e4:	095b      	lsrs	r3, r3, #5
 80057e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80057ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ee:	f003 031f 	and.w	r3, r3, #31
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d104      	bne.n	8005800 <USB_EPStartXfer+0x4a0>
 80057f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057fa:	3b01      	subs	r3, #1
 80057fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005800:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005804:	b29b      	uxth	r3, r3
 8005806:	029b      	lsls	r3, r3, #10
 8005808:	b29b      	uxth	r3, r3
 800580a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800580e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005812:	b29a      	uxth	r2, r3
 8005814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005816:	801a      	strh	r2, [r3, #0]
 8005818:	e01e      	b.n	8005858 <USB_EPStartXfer+0x4f8>
 800581a:	463b      	mov	r3, r7
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	785b      	ldrb	r3, [r3, #1]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d119      	bne.n	8005858 <USB_EPStartXfer+0x4f8>
 8005824:	1d3b      	adds	r3, r7, #4
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	657b      	str	r3, [r7, #84]	; 0x54
 800582a:	1d3b      	adds	r3, r7, #4
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005832:	b29b      	uxth	r3, r3
 8005834:	461a      	mov	r2, r3
 8005836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005838:	4413      	add	r3, r2
 800583a:	657b      	str	r3, [r7, #84]	; 0x54
 800583c:	463b      	mov	r3, r7
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	011a      	lsls	r2, r3, #4
 8005844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005846:	4413      	add	r3, r2
 8005848:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800584c:	653b      	str	r3, [r7, #80]	; 0x50
 800584e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005852:	b29a      	uxth	r2, r3
 8005854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005856:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005858:	463b      	mov	r3, r7
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	891b      	ldrh	r3, [r3, #8]
 800585e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005862:	463b      	mov	r3, r7
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6959      	ldr	r1, [r3, #20]
 8005868:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800586c:	b29b      	uxth	r3, r3
 800586e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005872:	1d38      	adds	r0, r7, #4
 8005874:	6800      	ldr	r0, [r0, #0]
 8005876:	f000 ffd1 	bl	800681c <USB_WritePMA>
            ep->xfer_buff += len;
 800587a:	463b      	mov	r3, r7
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	695a      	ldr	r2, [r3, #20]
 8005880:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005884:	441a      	add	r2, r3
 8005886:	463b      	mov	r3, r7
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800588c:	463b      	mov	r3, r7
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6a1a      	ldr	r2, [r3, #32]
 8005892:	463b      	mov	r3, r7
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	429a      	cmp	r2, r3
 800589a:	d909      	bls.n	80058b0 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 800589c:	463b      	mov	r3, r7
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6a1a      	ldr	r2, [r3, #32]
 80058a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058a6:	1ad2      	subs	r2, r2, r3
 80058a8:	463b      	mov	r3, r7
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	621a      	str	r2, [r3, #32]
 80058ae:	e008      	b.n	80058c2 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80058b0:	463b      	mov	r3, r7
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80058ba:	463b      	mov	r3, r7
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2200      	movs	r2, #0
 80058c0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058c2:	1d3b      	adds	r3, r7, #4
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	647b      	str	r3, [r7, #68]	; 0x44
 80058c8:	463b      	mov	r3, r7
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	785b      	ldrb	r3, [r3, #1]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d164      	bne.n	800599c <USB_EPStartXfer+0x63c>
 80058d2:	1d3b      	adds	r3, r7, #4
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d8:	1d3b      	adds	r3, r7, #4
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	461a      	mov	r2, r3
 80058e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058e6:	4413      	add	r3, r2
 80058e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058ea:	463b      	mov	r3, r7
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	011a      	lsls	r2, r3, #4
 80058f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f4:	4413      	add	r3, r2
 80058f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80058fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005900:	2b00      	cmp	r3, #0
 8005902:	d112      	bne.n	800592a <USB_EPStartXfer+0x5ca>
 8005904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	b29b      	uxth	r3, r3
 800590a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800590e:	b29a      	uxth	r2, r3
 8005910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005912:	801a      	strh	r2, [r3, #0]
 8005914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	b29b      	uxth	r3, r3
 800591a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800591e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005922:	b29a      	uxth	r2, r3
 8005924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005926:	801a      	strh	r2, [r3, #0]
 8005928:	e054      	b.n	80059d4 <USB_EPStartXfer+0x674>
 800592a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800592e:	2b3e      	cmp	r3, #62	; 0x3e
 8005930:	d817      	bhi.n	8005962 <USB_EPStartXfer+0x602>
 8005932:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005936:	085b      	lsrs	r3, r3, #1
 8005938:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800593c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	2b00      	cmp	r3, #0
 8005946:	d004      	beq.n	8005952 <USB_EPStartXfer+0x5f2>
 8005948:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800594c:	3301      	adds	r3, #1
 800594e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005952:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005956:	b29b      	uxth	r3, r3
 8005958:	029b      	lsls	r3, r3, #10
 800595a:	b29a      	uxth	r2, r3
 800595c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595e:	801a      	strh	r2, [r3, #0]
 8005960:	e038      	b.n	80059d4 <USB_EPStartXfer+0x674>
 8005962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005966:	095b      	lsrs	r3, r3, #5
 8005968:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800596c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005970:	f003 031f 	and.w	r3, r3, #31
 8005974:	2b00      	cmp	r3, #0
 8005976:	d104      	bne.n	8005982 <USB_EPStartXfer+0x622>
 8005978:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800597c:	3b01      	subs	r3, #1
 800597e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005982:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005986:	b29b      	uxth	r3, r3
 8005988:	029b      	lsls	r3, r3, #10
 800598a:	b29b      	uxth	r3, r3
 800598c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005994:	b29a      	uxth	r2, r3
 8005996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005998:	801a      	strh	r2, [r3, #0]
 800599a:	e01b      	b.n	80059d4 <USB_EPStartXfer+0x674>
 800599c:	463b      	mov	r3, r7
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	785b      	ldrb	r3, [r3, #1]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d116      	bne.n	80059d4 <USB_EPStartXfer+0x674>
 80059a6:	1d3b      	adds	r3, r7, #4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	461a      	mov	r2, r3
 80059b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059b4:	4413      	add	r3, r2
 80059b6:	647b      	str	r3, [r7, #68]	; 0x44
 80059b8:	463b      	mov	r3, r7
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	011a      	lsls	r2, r3, #4
 80059c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c2:	4413      	add	r3, r2
 80059c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059c8:	643b      	str	r3, [r7, #64]	; 0x40
 80059ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80059d4:	463b      	mov	r3, r7
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	895b      	ldrh	r3, [r3, #10]
 80059da:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059de:	463b      	mov	r3, r7
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6959      	ldr	r1, [r3, #20]
 80059e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80059ee:	1d38      	adds	r0, r7, #4
 80059f0:	6800      	ldr	r0, [r0, #0]
 80059f2:	f000 ff13 	bl	800681c <USB_WritePMA>
 80059f6:	e1e2      	b.n	8005dbe <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80059f8:	463b      	mov	r3, r7
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005a02:	1d3b      	adds	r3, r7, #4
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	463b      	mov	r3, r7
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005a20:	1d3b      	adds	r3, r7, #4
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	463b      	mov	r3, r7
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	441a      	add	r2, r3
 8005a2e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a46:	1d3b      	adds	r3, r7, #4
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	663b      	str	r3, [r7, #96]	; 0x60
 8005a4c:	1d3b      	adds	r3, r7, #4
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a5a:	4413      	add	r3, r2
 8005a5c:	663b      	str	r3, [r7, #96]	; 0x60
 8005a5e:	463b      	mov	r3, r7
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	011a      	lsls	r2, r3, #4
 8005a66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a68:	4413      	add	r3, r2
 8005a6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a78:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a7a:	463b      	mov	r3, r7
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	891b      	ldrh	r3, [r3, #8]
 8005a80:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a84:	463b      	mov	r3, r7
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6959      	ldr	r1, [r3, #20]
 8005a8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005a94:	1d38      	adds	r0, r7, #4
 8005a96:	6800      	ldr	r0, [r0, #0]
 8005a98:	f000 fec0 	bl	800681c <USB_WritePMA>
 8005a9c:	e18f      	b.n	8005dbe <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a9e:	1d3b      	adds	r3, r7, #4
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	463b      	mov	r3, r7
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4413      	add	r3, r2
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 808f 	beq.w	8005bd8 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005aba:	1d3b      	adds	r3, r7, #4
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ac0:	463b      	mov	r3, r7
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	785b      	ldrb	r3, [r3, #1]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d164      	bne.n	8005b94 <USB_EPStartXfer+0x834>
 8005aca:	1d3b      	adds	r3, r7, #4
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	673b      	str	r3, [r7, #112]	; 0x70
 8005ad0:	1d3b      	adds	r3, r7, #4
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	461a      	mov	r2, r3
 8005adc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ade:	4413      	add	r3, r2
 8005ae0:	673b      	str	r3, [r7, #112]	; 0x70
 8005ae2:	463b      	mov	r3, r7
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	011a      	lsls	r2, r3, #4
 8005aea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005aec:	4413      	add	r3, r2
 8005aee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005af2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d112      	bne.n	8005b22 <USB_EPStartXfer+0x7c2>
 8005afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005afe:	881b      	ldrh	r3, [r3, #0]
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b0a:	801a      	strh	r2, [r3, #0]
 8005b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b1e:	801a      	strh	r2, [r3, #0]
 8005b20:	e054      	b.n	8005bcc <USB_EPStartXfer+0x86c>
 8005b22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b26:	2b3e      	cmp	r3, #62	; 0x3e
 8005b28:	d817      	bhi.n	8005b5a <USB_EPStartXfer+0x7fa>
 8005b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b2e:	085b      	lsrs	r3, r3, #1
 8005b30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d004      	beq.n	8005b4a <USB_EPStartXfer+0x7ea>
 8005b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b44:	3301      	adds	r3, #1
 8005b46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	029b      	lsls	r3, r3, #10
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b56:	801a      	strh	r2, [r3, #0]
 8005b58:	e038      	b.n	8005bcc <USB_EPStartXfer+0x86c>
 8005b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b5e:	095b      	lsrs	r3, r3, #5
 8005b60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b68:	f003 031f 	and.w	r3, r3, #31
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d104      	bne.n	8005b7a <USB_EPStartXfer+0x81a>
 8005b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b74:	3b01      	subs	r3, #1
 8005b76:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	029b      	lsls	r3, r3, #10
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b90:	801a      	strh	r2, [r3, #0]
 8005b92:	e01b      	b.n	8005bcc <USB_EPStartXfer+0x86c>
 8005b94:	463b      	mov	r3, r7
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	785b      	ldrb	r3, [r3, #1]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d116      	bne.n	8005bcc <USB_EPStartXfer+0x86c>
 8005b9e:	1d3b      	adds	r3, r7, #4
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	461a      	mov	r2, r3
 8005baa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bac:	4413      	add	r3, r2
 8005bae:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bb0:	463b      	mov	r3, r7
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	011a      	lsls	r2, r3, #4
 8005bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bba:	4413      	add	r3, r2
 8005bbc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bc0:	677b      	str	r3, [r7, #116]	; 0x74
 8005bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005bcc:	463b      	mov	r3, r7
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	895b      	ldrh	r3, [r3, #10]
 8005bd2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005bd6:	e097      	b.n	8005d08 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bd8:	463b      	mov	r3, r7
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	785b      	ldrb	r3, [r3, #1]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d168      	bne.n	8005cb4 <USB_EPStartXfer+0x954>
 8005be2:	1d3b      	adds	r3, r7, #4
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005bea:	1d3b      	adds	r3, r7, #4
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c00:	463b      	mov	r3, r7
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	011a      	lsls	r2, r3, #4
 8005c08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c12:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d112      	bne.n	8005c42 <USB_EPStartXfer+0x8e2>
 8005c1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c2a:	801a      	strh	r2, [r3, #0]
 8005c2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c3e:	801a      	strh	r2, [r3, #0]
 8005c40:	e05d      	b.n	8005cfe <USB_EPStartXfer+0x99e>
 8005c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c46:	2b3e      	cmp	r3, #62	; 0x3e
 8005c48:	d817      	bhi.n	8005c7a <USB_EPStartXfer+0x91a>
 8005c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c4e:	085b      	lsrs	r3, r3, #1
 8005c50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d004      	beq.n	8005c6a <USB_EPStartXfer+0x90a>
 8005c60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c64:	3301      	adds	r3, #1
 8005c66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	029b      	lsls	r3, r3, #10
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c76:	801a      	strh	r2, [r3, #0]
 8005c78:	e041      	b.n	8005cfe <USB_EPStartXfer+0x99e>
 8005c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c7e:	095b      	lsrs	r3, r3, #5
 8005c80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c88:	f003 031f 	and.w	r3, r3, #31
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d104      	bne.n	8005c9a <USB_EPStartXfer+0x93a>
 8005c90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c94:	3b01      	subs	r3, #1
 8005c96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	029b      	lsls	r3, r3, #10
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cb0:	801a      	strh	r2, [r3, #0]
 8005cb2:	e024      	b.n	8005cfe <USB_EPStartXfer+0x99e>
 8005cb4:	463b      	mov	r3, r7
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	785b      	ldrb	r3, [r3, #1]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d11f      	bne.n	8005cfe <USB_EPStartXfer+0x99e>
 8005cbe:	1d3b      	adds	r3, r7, #4
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005cc6:	1d3b      	adds	r3, r7, #4
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005cdc:	463b      	mov	r3, r7
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	011a      	lsls	r2, r3, #4
 8005ce4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ce8:	4413      	add	r3, r2
 8005cea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cfc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005cfe:	463b      	mov	r3, r7
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	891b      	ldrh	r3, [r3, #8]
 8005d04:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d08:	463b      	mov	r3, r7
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6959      	ldr	r1, [r3, #20]
 8005d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005d18:	1d38      	adds	r0, r7, #4
 8005d1a:	6800      	ldr	r0, [r0, #0]
 8005d1c:	f000 fd7e 	bl	800681c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005d20:	463b      	mov	r3, r7
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	785b      	ldrb	r3, [r3, #1]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d122      	bne.n	8005d70 <USB_EPStartXfer+0xa10>
 8005d2a:	1d3b      	adds	r3, r7, #4
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	463b      	mov	r3, r7
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d44:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005d48:	1d3b      	adds	r3, r7, #4
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	463b      	mov	r3, r7
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	441a      	add	r2, r3
 8005d56:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	8013      	strh	r3, [r2, #0]
 8005d6e:	e026      	b.n	8005dbe <USB_EPStartXfer+0xa5e>
 8005d70:	463b      	mov	r3, r7
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	785b      	ldrb	r3, [r3, #1]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d121      	bne.n	8005dbe <USB_EPStartXfer+0xa5e>
 8005d7a:	1d3b      	adds	r3, r7, #4
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	463b      	mov	r3, r7
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4413      	add	r3, r2
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d94:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005d98:	1d3b      	adds	r3, r7, #4
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	463b      	mov	r3, r7
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	441a      	add	r2, r3
 8005da6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005dbe:	1d3b      	adds	r3, r7, #4
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	463b      	mov	r3, r7
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	f107 020e 	add.w	r2, r7, #14
 8005dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ddc:	8013      	strh	r3, [r2, #0]
 8005dde:	f107 030e 	add.w	r3, r7, #14
 8005de2:	f107 020e 	add.w	r2, r7, #14
 8005de6:	8812      	ldrh	r2, [r2, #0]
 8005de8:	f082 0210 	eor.w	r2, r2, #16
 8005dec:	801a      	strh	r2, [r3, #0]
 8005dee:	f107 030e 	add.w	r3, r7, #14
 8005df2:	f107 020e 	add.w	r2, r7, #14
 8005df6:	8812      	ldrh	r2, [r2, #0]
 8005df8:	f082 0220 	eor.w	r2, r2, #32
 8005dfc:	801a      	strh	r2, [r3, #0]
 8005dfe:	1d3b      	adds	r3, r7, #4
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	463b      	mov	r3, r7
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	441a      	add	r2, r3
 8005e0c:	f107 030e 	add.w	r3, r7, #14
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	8013      	strh	r3, [r2, #0]
 8005e26:	e3b5      	b.n	8006594 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005e28:	463b      	mov	r3, r7
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	7b1b      	ldrb	r3, [r3, #12]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f040 8090 	bne.w	8005f54 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e34:	463b      	mov	r3, r7
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699a      	ldr	r2, [r3, #24]
 8005e3a:	463b      	mov	r3, r7
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d90e      	bls.n	8005e62 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005e44:	463b      	mov	r3, r7
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8005e4e:	463b      	mov	r3, r7
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	699a      	ldr	r2, [r3, #24]
 8005e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e58:	1ad2      	subs	r2, r2, r3
 8005e5a:	463b      	mov	r3, r7
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	619a      	str	r2, [r3, #24]
 8005e60:	e008      	b.n	8005e74 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005e62:	463b      	mov	r3, r7
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005e6c:	463b      	mov	r3, r7
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2200      	movs	r2, #0
 8005e72:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005e74:	1d3b      	adds	r3, r7, #4
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e7c:	1d3b      	adds	r3, r7, #4
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	461a      	mov	r2, r3
 8005e88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e92:	463b      	mov	r3, r7
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	011a      	lsls	r2, r3, #4
 8005e9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ea4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d116      	bne.n	8005ede <USB_EPStartXfer+0xb7e>
 8005eb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ec2:	801a      	strh	r2, [r3, #0]
 8005ec4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ed0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005eda:	801a      	strh	r2, [r3, #0]
 8005edc:	e32c      	b.n	8006538 <USB_EPStartXfer+0x11d8>
 8005ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ee2:	2b3e      	cmp	r3, #62	; 0x3e
 8005ee4:	d818      	bhi.n	8005f18 <USB_EPStartXfer+0xbb8>
 8005ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eea:	085b      	lsrs	r3, r3, #1
 8005eec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d004      	beq.n	8005f06 <USB_EPStartXfer+0xba6>
 8005efc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005f00:	3301      	adds	r3, #1
 8005f02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	029b      	lsls	r3, r3, #10
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f14:	801a      	strh	r2, [r3, #0]
 8005f16:	e30f      	b.n	8006538 <USB_EPStartXfer+0x11d8>
 8005f18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f1c:	095b      	lsrs	r3, r3, #5
 8005f1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f26:	f003 031f 	and.w	r3, r3, #31
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d104      	bne.n	8005f38 <USB_EPStartXfer+0xbd8>
 8005f2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005f32:	3b01      	subs	r3, #1
 8005f34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	029b      	lsls	r3, r3, #10
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f50:	801a      	strh	r2, [r3, #0]
 8005f52:	e2f1      	b.n	8006538 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005f54:	463b      	mov	r3, r7
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	78db      	ldrb	r3, [r3, #3]
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	f040 818f 	bne.w	800627e <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005f60:	463b      	mov	r3, r7
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	785b      	ldrb	r3, [r3, #1]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d175      	bne.n	8006056 <USB_EPStartXfer+0xcf6>
 8005f6a:	1d3b      	adds	r3, r7, #4
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f72:	1d3b      	adds	r3, r7, #4
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f82:	4413      	add	r3, r2
 8005f84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f88:	463b      	mov	r3, r7
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	011a      	lsls	r2, r3, #4
 8005f90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f94:	4413      	add	r3, r2
 8005f96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f9e:	463b      	mov	r3, r7
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d116      	bne.n	8005fd6 <USB_EPStartXfer+0xc76>
 8005fa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fba:	801a      	strh	r2, [r3, #0]
 8005fbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fd2:	801a      	strh	r2, [r3, #0]
 8005fd4:	e065      	b.n	80060a2 <USB_EPStartXfer+0xd42>
 8005fd6:	463b      	mov	r3, r7
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	2b3e      	cmp	r3, #62	; 0x3e
 8005fde:	d81a      	bhi.n	8006016 <USB_EPStartXfer+0xcb6>
 8005fe0:	463b      	mov	r3, r7
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	085b      	lsrs	r3, r3, #1
 8005fe8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fec:	463b      	mov	r3, r7
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d004      	beq.n	8006004 <USB_EPStartXfer+0xca4>
 8005ffa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ffe:	3301      	adds	r3, #1
 8006000:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006004:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006008:	b29b      	uxth	r3, r3
 800600a:	029b      	lsls	r3, r3, #10
 800600c:	b29a      	uxth	r2, r3
 800600e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006012:	801a      	strh	r2, [r3, #0]
 8006014:	e045      	b.n	80060a2 <USB_EPStartXfer+0xd42>
 8006016:	463b      	mov	r3, r7
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	095b      	lsrs	r3, r3, #5
 800601e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006022:	463b      	mov	r3, r7
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	f003 031f 	and.w	r3, r3, #31
 800602c:	2b00      	cmp	r3, #0
 800602e:	d104      	bne.n	800603a <USB_EPStartXfer+0xcda>
 8006030:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006034:	3b01      	subs	r3, #1
 8006036:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800603a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800603e:	b29b      	uxth	r3, r3
 8006040:	029b      	lsls	r3, r3, #10
 8006042:	b29b      	uxth	r3, r3
 8006044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800604c:	b29a      	uxth	r2, r3
 800604e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006052:	801a      	strh	r2, [r3, #0]
 8006054:	e025      	b.n	80060a2 <USB_EPStartXfer+0xd42>
 8006056:	463b      	mov	r3, r7
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	785b      	ldrb	r3, [r3, #1]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d120      	bne.n	80060a2 <USB_EPStartXfer+0xd42>
 8006060:	1d3b      	adds	r3, r7, #4
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006068:	1d3b      	adds	r3, r7, #4
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006070:	b29b      	uxth	r3, r3
 8006072:	461a      	mov	r2, r3
 8006074:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006078:	4413      	add	r3, r2
 800607a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800607e:	463b      	mov	r3, r7
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	011a      	lsls	r2, r3, #4
 8006086:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800608a:	4413      	add	r3, r2
 800608c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006094:	463b      	mov	r3, r7
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	b29a      	uxth	r2, r3
 800609c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80060a0:	801a      	strh	r2, [r3, #0]
 80060a2:	1d3b      	adds	r3, r7, #4
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060aa:	463b      	mov	r3, r7
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	785b      	ldrb	r3, [r3, #1]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d175      	bne.n	80061a0 <USB_EPStartXfer+0xe40>
 80060b4:	1d3b      	adds	r3, r7, #4
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060bc:	1d3b      	adds	r3, r7, #4
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	461a      	mov	r2, r3
 80060c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060cc:	4413      	add	r3, r2
 80060ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060d2:	463b      	mov	r3, r7
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	011a      	lsls	r2, r3, #4
 80060da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060de:	4413      	add	r3, r2
 80060e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060e8:	463b      	mov	r3, r7
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d116      	bne.n	8006120 <USB_EPStartXfer+0xdc0>
 80060f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060fe:	b29a      	uxth	r2, r3
 8006100:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006104:	801a      	strh	r2, [r3, #0]
 8006106:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800610a:	881b      	ldrh	r3, [r3, #0]
 800610c:	b29b      	uxth	r3, r3
 800610e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006116:	b29a      	uxth	r2, r3
 8006118:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800611c:	801a      	strh	r2, [r3, #0]
 800611e:	e061      	b.n	80061e4 <USB_EPStartXfer+0xe84>
 8006120:	463b      	mov	r3, r7
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	2b3e      	cmp	r3, #62	; 0x3e
 8006128:	d81a      	bhi.n	8006160 <USB_EPStartXfer+0xe00>
 800612a:	463b      	mov	r3, r7
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	085b      	lsrs	r3, r3, #1
 8006132:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006136:	463b      	mov	r3, r7
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d004      	beq.n	800614e <USB_EPStartXfer+0xdee>
 8006144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006148:	3301      	adds	r3, #1
 800614a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800614e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006152:	b29b      	uxth	r3, r3
 8006154:	029b      	lsls	r3, r3, #10
 8006156:	b29a      	uxth	r2, r3
 8006158:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800615c:	801a      	strh	r2, [r3, #0]
 800615e:	e041      	b.n	80061e4 <USB_EPStartXfer+0xe84>
 8006160:	463b      	mov	r3, r7
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	095b      	lsrs	r3, r3, #5
 8006168:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800616c:	463b      	mov	r3, r7
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	f003 031f 	and.w	r3, r3, #31
 8006176:	2b00      	cmp	r3, #0
 8006178:	d104      	bne.n	8006184 <USB_EPStartXfer+0xe24>
 800617a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800617e:	3b01      	subs	r3, #1
 8006180:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006188:	b29b      	uxth	r3, r3
 800618a:	029b      	lsls	r3, r3, #10
 800618c:	b29b      	uxth	r3, r3
 800618e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006196:	b29a      	uxth	r2, r3
 8006198:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800619c:	801a      	strh	r2, [r3, #0]
 800619e:	e021      	b.n	80061e4 <USB_EPStartXfer+0xe84>
 80061a0:	463b      	mov	r3, r7
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	785b      	ldrb	r3, [r3, #1]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d11c      	bne.n	80061e4 <USB_EPStartXfer+0xe84>
 80061aa:	1d3b      	adds	r3, r7, #4
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	461a      	mov	r2, r3
 80061b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061ba:	4413      	add	r3, r2
 80061bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80061c0:	463b      	mov	r3, r7
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	011a      	lsls	r2, r3, #4
 80061c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061cc:	4413      	add	r3, r2
 80061ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061d6:	463b      	mov	r3, r7
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	b29a      	uxth	r2, r3
 80061de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80061e2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80061e4:	463b      	mov	r3, r7
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 81a4 	beq.w	8006538 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80061f0:	1d3b      	adds	r3, r7, #4
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	463b      	mov	r3, r7
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006204:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d005      	beq.n	800621c <USB_EPStartXfer+0xebc>
 8006210:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10d      	bne.n	8006238 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800621c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006224:	2b00      	cmp	r3, #0
 8006226:	f040 8187 	bne.w	8006538 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800622a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800622e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006232:	2b00      	cmp	r3, #0
 8006234:	f040 8180 	bne.w	8006538 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006238:	1d3b      	adds	r3, r7, #4
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	463b      	mov	r3, r7
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	b29b      	uxth	r3, r3
 800624a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006252:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006256:	1d3b      	adds	r3, r7, #4
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	463b      	mov	r3, r7
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	441a      	add	r2, r3
 8006264:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800626c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006274:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006278:	b29b      	uxth	r3, r3
 800627a:	8013      	strh	r3, [r2, #0]
 800627c:	e15c      	b.n	8006538 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800627e:	463b      	mov	r3, r7
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	78db      	ldrb	r3, [r3, #3]
 8006284:	2b01      	cmp	r3, #1
 8006286:	f040 8155 	bne.w	8006534 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800628a:	463b      	mov	r3, r7
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	699a      	ldr	r2, [r3, #24]
 8006290:	463b      	mov	r3, r7
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	429a      	cmp	r2, r3
 8006298:	d90e      	bls.n	80062b8 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800629a:	463b      	mov	r3, r7
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80062a4:	463b      	mov	r3, r7
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699a      	ldr	r2, [r3, #24]
 80062aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062ae:	1ad2      	subs	r2, r2, r3
 80062b0:	463b      	mov	r3, r7
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	619a      	str	r2, [r3, #24]
 80062b6:	e008      	b.n	80062ca <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80062b8:	463b      	mov	r3, r7
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80062c2:	463b      	mov	r3, r7
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2200      	movs	r2, #0
 80062c8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80062ca:	463b      	mov	r3, r7
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	785b      	ldrb	r3, [r3, #1]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d16f      	bne.n	80063b4 <USB_EPStartXfer+0x1054>
 80062d4:	1d3b      	adds	r3, r7, #4
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062dc:	1d3b      	adds	r3, r7, #4
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	461a      	mov	r2, r3
 80062e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80062ec:	4413      	add	r3, r2
 80062ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062f2:	463b      	mov	r3, r7
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	011a      	lsls	r2, r3, #4
 80062fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80062fe:	4413      	add	r3, r2
 8006300:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006304:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006308:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800630c:	2b00      	cmp	r3, #0
 800630e:	d116      	bne.n	800633e <USB_EPStartXfer+0xfde>
 8006310:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	b29b      	uxth	r3, r3
 8006318:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800631c:	b29a      	uxth	r2, r3
 800631e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006322:	801a      	strh	r2, [r3, #0]
 8006324:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	b29b      	uxth	r3, r3
 800632c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006334:	b29a      	uxth	r2, r3
 8006336:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800633a:	801a      	strh	r2, [r3, #0]
 800633c:	e05f      	b.n	80063fe <USB_EPStartXfer+0x109e>
 800633e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006342:	2b3e      	cmp	r3, #62	; 0x3e
 8006344:	d818      	bhi.n	8006378 <USB_EPStartXfer+0x1018>
 8006346:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800634a:	085b      	lsrs	r3, r3, #1
 800634c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006350:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	d004      	beq.n	8006366 <USB_EPStartXfer+0x1006>
 800635c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006360:	3301      	adds	r3, #1
 8006362:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800636a:	b29b      	uxth	r3, r3
 800636c:	029b      	lsls	r3, r3, #10
 800636e:	b29a      	uxth	r2, r3
 8006370:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006374:	801a      	strh	r2, [r3, #0]
 8006376:	e042      	b.n	80063fe <USB_EPStartXfer+0x109e>
 8006378:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800637c:	095b      	lsrs	r3, r3, #5
 800637e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006386:	f003 031f 	and.w	r3, r3, #31
 800638a:	2b00      	cmp	r3, #0
 800638c:	d104      	bne.n	8006398 <USB_EPStartXfer+0x1038>
 800638e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006392:	3b01      	subs	r3, #1
 8006394:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800639c:	b29b      	uxth	r3, r3
 800639e:	029b      	lsls	r3, r3, #10
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80063b0:	801a      	strh	r2, [r3, #0]
 80063b2:	e024      	b.n	80063fe <USB_EPStartXfer+0x109e>
 80063b4:	463b      	mov	r3, r7
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	785b      	ldrb	r3, [r3, #1]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d11f      	bne.n	80063fe <USB_EPStartXfer+0x109e>
 80063be:	1d3b      	adds	r3, r7, #4
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063c6:	1d3b      	adds	r3, r7, #4
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	461a      	mov	r2, r3
 80063d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063d6:	4413      	add	r3, r2
 80063d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063dc:	463b      	mov	r3, r7
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	011a      	lsls	r2, r3, #4
 80063e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063e8:	4413      	add	r3, r2
 80063ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80063f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063fc:	801a      	strh	r2, [r3, #0]
 80063fe:	1d3b      	adds	r3, r7, #4
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006406:	463b      	mov	r3, r7
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	785b      	ldrb	r3, [r3, #1]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d16f      	bne.n	80064f0 <USB_EPStartXfer+0x1190>
 8006410:	1d3b      	adds	r3, r7, #4
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006418:	1d3b      	adds	r3, r7, #4
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006420:	b29b      	uxth	r3, r3
 8006422:	461a      	mov	r2, r3
 8006424:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006428:	4413      	add	r3, r2
 800642a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800642e:	463b      	mov	r3, r7
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	011a      	lsls	r2, r3, #4
 8006436:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800643a:	4413      	add	r3, r2
 800643c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006440:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006444:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006448:	2b00      	cmp	r3, #0
 800644a:	d116      	bne.n	800647a <USB_EPStartXfer+0x111a>
 800644c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	b29b      	uxth	r3, r3
 8006454:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006458:	b29a      	uxth	r2, r3
 800645a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800645e:	801a      	strh	r2, [r3, #0]
 8006460:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	b29b      	uxth	r3, r3
 8006468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800646c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006470:	b29a      	uxth	r2, r3
 8006472:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006476:	801a      	strh	r2, [r3, #0]
 8006478:	e05e      	b.n	8006538 <USB_EPStartXfer+0x11d8>
 800647a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800647e:	2b3e      	cmp	r3, #62	; 0x3e
 8006480:	d818      	bhi.n	80064b4 <USB_EPStartXfer+0x1154>
 8006482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006486:	085b      	lsrs	r3, r3, #1
 8006488:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800648c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	d004      	beq.n	80064a2 <USB_EPStartXfer+0x1142>
 8006498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800649c:	3301      	adds	r3, #1
 800649e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80064a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	029b      	lsls	r3, r3, #10
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80064b0:	801a      	strh	r2, [r3, #0]
 80064b2:	e041      	b.n	8006538 <USB_EPStartXfer+0x11d8>
 80064b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064b8:	095b      	lsrs	r3, r3, #5
 80064ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80064be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064c2:	f003 031f 	and.w	r3, r3, #31
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d104      	bne.n	80064d4 <USB_EPStartXfer+0x1174>
 80064ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064ce:	3b01      	subs	r3, #1
 80064d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80064d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064d8:	b29b      	uxth	r3, r3
 80064da:	029b      	lsls	r3, r3, #10
 80064dc:	b29b      	uxth	r3, r3
 80064de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80064ec:	801a      	strh	r2, [r3, #0]
 80064ee:	e023      	b.n	8006538 <USB_EPStartXfer+0x11d8>
 80064f0:	463b      	mov	r3, r7
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	785b      	ldrb	r3, [r3, #1]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d11e      	bne.n	8006538 <USB_EPStartXfer+0x11d8>
 80064fa:	1d3b      	adds	r3, r7, #4
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006502:	b29b      	uxth	r3, r3
 8006504:	461a      	mov	r2, r3
 8006506:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800650a:	4413      	add	r3, r2
 800650c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006510:	463b      	mov	r3, r7
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	011a      	lsls	r2, r3, #4
 8006518:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800651c:	4413      	add	r3, r2
 800651e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006522:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006526:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800652a:	b29a      	uxth	r2, r3
 800652c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006530:	801a      	strh	r2, [r3, #0]
 8006532:	e001      	b.n	8006538 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e02e      	b.n	8006596 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006538:	1d3b      	adds	r3, r7, #4
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	463b      	mov	r3, r7
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800654e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006552:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006556:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800655a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800655e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006562:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006566:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800656a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800656e:	1d3b      	adds	r3, r7, #4
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	463b      	mov	r3, r7
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	441a      	add	r2, r3
 800657c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800658c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006590:	b29b      	uxth	r3, r3
 8006592:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	785b      	ldrb	r3, [r3, #1]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d020      	beq.n	80065f4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065c8:	81bb      	strh	r3, [r7, #12]
 80065ca:	89bb      	ldrh	r3, [r7, #12]
 80065cc:	f083 0310 	eor.w	r3, r3, #16
 80065d0:	81bb      	strh	r3, [r7, #12]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	441a      	add	r2, r3
 80065dc:	89bb      	ldrh	r3, [r7, #12]
 80065de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	8013      	strh	r3, [r2, #0]
 80065f2:	e01f      	b.n	8006634 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	b29b      	uxth	r3, r3
 8006602:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660a:	81fb      	strh	r3, [r7, #14]
 800660c:	89fb      	ldrh	r3, [r7, #14]
 800660e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006612:	81fb      	strh	r3, [r7, #14]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	441a      	add	r2, r3
 800661e:	89fb      	ldrh	r3, [r7, #14]
 8006620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800662c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006630:	b29b      	uxth	r3, r3
 8006632:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	bc80      	pop	{r7}
 800663e:	4770      	bx	lr

08006640 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	7b1b      	ldrb	r3, [r3, #12]
 800664e:	2b00      	cmp	r3, #0
 8006650:	f040 809d 	bne.w	800678e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	785b      	ldrb	r3, [r3, #1]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d04c      	beq.n	80066f6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	823b      	strh	r3, [r7, #16]
 800666a:	8a3b      	ldrh	r3, [r7, #16]
 800666c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006670:	2b00      	cmp	r3, #0
 8006672:	d01b      	beq.n	80066ac <USB_EPClearStall+0x6c>
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	b29b      	uxth	r3, r3
 8006682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668a:	81fb      	strh	r3, [r7, #14]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	441a      	add	r2, r3
 8006696:	89fb      	ldrh	r3, [r7, #14]
 8006698:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800669c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	78db      	ldrb	r3, [r3, #3]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d06c      	beq.n	800678e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066ca:	81bb      	strh	r3, [r7, #12]
 80066cc:	89bb      	ldrh	r3, [r7, #12]
 80066ce:	f083 0320 	eor.w	r3, r3, #32
 80066d2:	81bb      	strh	r3, [r7, #12]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	441a      	add	r2, r3
 80066de:	89bb      	ldrh	r3, [r7, #12]
 80066e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	8013      	strh	r3, [r2, #0]
 80066f4:	e04b      	b.n	800678e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	82fb      	strh	r3, [r7, #22]
 8006704:	8afb      	ldrh	r3, [r7, #22]
 8006706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d01b      	beq.n	8006746 <USB_EPClearStall+0x106>
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	b29b      	uxth	r3, r3
 800671c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006724:	82bb      	strh	r3, [r7, #20]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	441a      	add	r2, r3
 8006730:	8abb      	ldrh	r3, [r7, #20]
 8006732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800673a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800673e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006742:	b29b      	uxth	r3, r3
 8006744:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	b29b      	uxth	r3, r3
 8006754:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675c:	827b      	strh	r3, [r7, #18]
 800675e:	8a7b      	ldrh	r3, [r7, #18]
 8006760:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006764:	827b      	strh	r3, [r7, #18]
 8006766:	8a7b      	ldrh	r3, [r7, #18]
 8006768:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800676c:	827b      	strh	r3, [r7, #18]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	441a      	add	r2, r3
 8006778:	8a7b      	ldrh	r3, [r7, #18]
 800677a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800677e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678a:	b29b      	uxth	r3, r3
 800678c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	371c      	adds	r7, #28
 8006794:	46bd      	mov	sp, r7
 8006796:	bc80      	pop	{r7}
 8006798:	4770      	bx	lr

0800679a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	460b      	mov	r3, r1
 80067a4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80067a6:	78fb      	ldrb	r3, [r7, #3]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d103      	bne.n	80067b4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2280      	movs	r2, #128	; 0x80
 80067b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bc80      	pop	{r7}
 80067be:	4770      	bx	lr

080067c0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bc80      	pop	{r7}
 80067d2:	4770      	bx	lr

080067d4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bc80      	pop	{r7}
 80067e6:	4770      	bx	lr

080067e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80067fa:	68fb      	ldr	r3, [r7, #12]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	bc80      	pop	{r7}
 8006804:	4770      	bx	lr

08006806 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006806:	b480      	push	{r7}
 8006808:	b083      	sub	sp, #12
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	bc80      	pop	{r7}
 800681a:	4770      	bx	lr

0800681c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800681c:	b480      	push	{r7}
 800681e:	b08d      	sub	sp, #52	; 0x34
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	4611      	mov	r1, r2
 8006828:	461a      	mov	r2, r3
 800682a:	460b      	mov	r3, r1
 800682c:	80fb      	strh	r3, [r7, #6]
 800682e:	4613      	mov	r3, r2
 8006830:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006832:	88bb      	ldrh	r3, [r7, #4]
 8006834:	3301      	adds	r3, #1
 8006836:	085b      	lsrs	r3, r3, #1
 8006838:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006842:	88fb      	ldrh	r3, [r7, #6]
 8006844:	005a      	lsls	r2, r3, #1
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800684e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006854:	e01e      	b.n	8006894 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	3301      	adds	r3, #1
 8006860:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	b29b      	uxth	r3, r3
 8006868:	021b      	lsls	r3, r3, #8
 800686a:	b29b      	uxth	r3, r3
 800686c:	461a      	mov	r2, r3
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	4313      	orrs	r3, r2
 8006872:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	b29a      	uxth	r2, r3
 8006878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800687c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687e:	3302      	adds	r3, #2
 8006880:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006884:	3302      	adds	r3, #2
 8006886:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	3301      	adds	r3, #1
 800688c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800688e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006890:	3b01      	subs	r3, #1
 8006892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1dd      	bne.n	8006856 <USB_WritePMA+0x3a>
  }
}
 800689a:	bf00      	nop
 800689c:	3734      	adds	r7, #52	; 0x34
 800689e:	46bd      	mov	sp, r7
 80068a0:	bc80      	pop	{r7}
 80068a2:	4770      	bx	lr

080068a4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b08b      	sub	sp, #44	; 0x2c
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	4611      	mov	r1, r2
 80068b0:	461a      	mov	r2, r3
 80068b2:	460b      	mov	r3, r1
 80068b4:	80fb      	strh	r3, [r7, #6]
 80068b6:	4613      	mov	r3, r2
 80068b8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80068ba:	88bb      	ldrh	r3, [r7, #4]
 80068bc:	085b      	lsrs	r3, r3, #1
 80068be:	b29b      	uxth	r3, r3
 80068c0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80068ca:	88fb      	ldrh	r3, [r7, #6]
 80068cc:	005a      	lsls	r2, r3, #1
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068d6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	627b      	str	r3, [r7, #36]	; 0x24
 80068dc:	e01b      	b.n	8006916 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	3302      	adds	r3, #2
 80068ea:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	3301      	adds	r3, #1
 80068f8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	0a1b      	lsrs	r3, r3, #8
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	3301      	adds	r3, #1
 8006908:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	3302      	adds	r3, #2
 800690e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	3b01      	subs	r3, #1
 8006914:	627b      	str	r3, [r7, #36]	; 0x24
 8006916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1e0      	bne.n	80068de <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800691c:	88bb      	ldrh	r3, [r7, #4]
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	b29b      	uxth	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	d007      	beq.n	8006938 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	b29b      	uxth	r3, r3
 800692e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	b2da      	uxtb	r2, r3
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	701a      	strb	r2, [r3, #0]
  }
}
 8006938:	bf00      	nop
 800693a:	372c      	adds	r7, #44	; 0x2c
 800693c:	46bd      	mov	sp, r7
 800693e:	bc80      	pop	{r7}
 8006940:	4770      	bx	lr

08006942 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b084      	sub	sp, #16
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	460b      	mov	r3, r1
 800694c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800694e:	2300      	movs	r3, #0
 8006950:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	7c1b      	ldrb	r3, [r3, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d115      	bne.n	8006986 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800695a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800695e:	2202      	movs	r2, #2
 8006960:	2181      	movs	r1, #129	; 0x81
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f001 fe83 	bl	800866e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800696e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006972:	2202      	movs	r2, #2
 8006974:	2101      	movs	r1, #1
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f001 fe79 	bl	800866e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006984:	e012      	b.n	80069ac <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006986:	2340      	movs	r3, #64	; 0x40
 8006988:	2202      	movs	r2, #2
 800698a:	2181      	movs	r1, #129	; 0x81
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f001 fe6e 	bl	800866e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006998:	2340      	movs	r3, #64	; 0x40
 800699a:	2202      	movs	r2, #2
 800699c:	2101      	movs	r1, #1
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f001 fe65 	bl	800866e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80069ac:	2308      	movs	r3, #8
 80069ae:	2203      	movs	r2, #3
 80069b0:	2182      	movs	r1, #130	; 0x82
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f001 fe5b 	bl	800866e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80069be:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80069c2:	f001 ff7b 	bl	80088bc <USBD_static_malloc>
 80069c6:	4602      	mov	r2, r0
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d102      	bne.n	80069de <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80069d8:	2301      	movs	r3, #1
 80069da:	73fb      	strb	r3, [r7, #15]
 80069dc:	e026      	b.n	8006a2c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	7c1b      	ldrb	r3, [r3, #16]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d109      	bne.n	8006a1c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a12:	2101      	movs	r1, #1
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f001 ff1b 	bl	8008850 <USBD_LL_PrepareReceive>
 8006a1a:	e007      	b.n	8006a2c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a22:	2340      	movs	r3, #64	; 0x40
 8006a24:	2101      	movs	r1, #1
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f001 ff12 	bl	8008850 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	460b      	mov	r3, r1
 8006a40:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006a42:	2300      	movs	r3, #0
 8006a44:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006a46:	2181      	movs	r1, #129	; 0x81
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 fe36 	bl	80086ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006a54:	2101      	movs	r1, #1
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f001 fe2f 	bl	80086ba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006a64:	2182      	movs	r1, #130	; 0x82
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f001 fe27 	bl	80086ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00e      	beq.n	8006a9a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f001 ff21 	bl	80088d4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006aba:	2300      	movs	r3, #0
 8006abc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d039      	beq.n	8006b42 <USBD_CDC_Setup+0x9e>
 8006ace:	2b20      	cmp	r3, #32
 8006ad0:	d17c      	bne.n	8006bcc <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	88db      	ldrh	r3, [r3, #6]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d029      	beq.n	8006b2e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	b25b      	sxtb	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	da11      	bge.n	8006b08 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006af0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	88d2      	ldrh	r2, [r2, #6]
 8006af6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006af8:	6939      	ldr	r1, [r7, #16]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	88db      	ldrh	r3, [r3, #6]
 8006afe:	461a      	mov	r2, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f001 f9f9 	bl	8007ef8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006b06:	e068      	b.n	8006bda <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	785a      	ldrb	r2, [r3, #1]
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	88db      	ldrh	r3, [r3, #6]
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006b1e:	6939      	ldr	r1, [r7, #16]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	88db      	ldrh	r3, [r3, #6]
 8006b24:	461a      	mov	r2, r3
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f001 fa14 	bl	8007f54 <USBD_CtlPrepareRx>
      break;
 8006b2c:	e055      	b.n	8006bda <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	7850      	ldrb	r0, [r2, #1]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	4798      	blx	r3
      break;
 8006b40:	e04b      	b.n	8006bda <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	785b      	ldrb	r3, [r3, #1]
 8006b46:	2b0a      	cmp	r3, #10
 8006b48:	d017      	beq.n	8006b7a <USBD_CDC_Setup+0xd6>
 8006b4a:	2b0b      	cmp	r3, #11
 8006b4c:	d029      	beq.n	8006ba2 <USBD_CDC_Setup+0xfe>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d133      	bne.n	8006bba <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b58:	2b03      	cmp	r3, #3
 8006b5a:	d107      	bne.n	8006b6c <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006b5c:	f107 030c 	add.w	r3, r7, #12
 8006b60:	2202      	movs	r2, #2
 8006b62:	4619      	mov	r1, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f001 f9c7 	bl	8007ef8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b6a:	e02e      	b.n	8006bca <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006b6c:	6839      	ldr	r1, [r7, #0]
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f001 f958 	bl	8007e24 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b74:	2302      	movs	r3, #2
 8006b76:	75fb      	strb	r3, [r7, #23]
          break;
 8006b78:	e027      	b.n	8006bca <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b80:	2b03      	cmp	r3, #3
 8006b82:	d107      	bne.n	8006b94 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006b84:	f107 030f 	add.w	r3, r7, #15
 8006b88:	2201      	movs	r2, #1
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 f9b3 	bl	8007ef8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b92:	e01a      	b.n	8006bca <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f001 f944 	bl	8007e24 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	75fb      	strb	r3, [r7, #23]
          break;
 8006ba0:	e013      	b.n	8006bca <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d00d      	beq.n	8006bc8 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f001 f938 	bl	8007e24 <USBD_CtlError>
            ret = USBD_FAIL;
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006bb8:	e006      	b.n	8006bc8 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f001 f931 	bl	8007e24 <USBD_CtlError>
          ret = USBD_FAIL;
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	75fb      	strb	r3, [r7, #23]
          break;
 8006bc6:	e000      	b.n	8006bca <USBD_CDC_Setup+0x126>
          break;
 8006bc8:	bf00      	nop
      }
      break;
 8006bca:	e006      	b.n	8006bda <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f001 f928 	bl	8007e24 <USBD_CtlError>
      ret = USBD_FAIL;
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8006bd8:	bf00      	nop
  }

  return ret;
 8006bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3718      	adds	r7, #24
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	460b      	mov	r3, r1
 8006bee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bfe:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d03a      	beq.n	8006c80 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006c0a:	78fa      	ldrb	r2, [r7, #3]
 8006c0c:	6879      	ldr	r1, [r7, #4]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	440b      	add	r3, r1
 8006c18:	331c      	adds	r3, #28
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d029      	beq.n	8006c74 <USBD_CDC_DataIn+0x90>
 8006c20:	78fa      	ldrb	r2, [r7, #3]
 8006c22:	6879      	ldr	r1, [r7, #4]
 8006c24:	4613      	mov	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	440b      	add	r3, r1
 8006c2e:	331c      	adds	r3, #28
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	78f9      	ldrb	r1, [r7, #3]
 8006c34:	68b8      	ldr	r0, [r7, #8]
 8006c36:	460b      	mov	r3, r1
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	440b      	add	r3, r1
 8006c3c:	00db      	lsls	r3, r3, #3
 8006c3e:	4403      	add	r3, r0
 8006c40:	3338      	adds	r3, #56	; 0x38
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	fbb2 f1f3 	udiv	r1, r2, r3
 8006c48:	fb03 f301 	mul.w	r3, r3, r1
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d110      	bne.n	8006c74 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006c52:	78fa      	ldrb	r2, [r7, #3]
 8006c54:	6879      	ldr	r1, [r7, #4]
 8006c56:	4613      	mov	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	440b      	add	r3, r1
 8006c60:	331c      	adds	r3, #28
 8006c62:	2200      	movs	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006c66:	78f9      	ldrb	r1, [r7, #3]
 8006c68:	2300      	movs	r3, #0
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f001 fdcc 	bl	800880a <USBD_LL_Transmit>
 8006c72:	e003      	b.n	8006c7c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	e000      	b.n	8006c82 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006c80:	2302      	movs	r3, #2
  }
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b084      	sub	sp, #16
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	460b      	mov	r3, r1
 8006c94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c9c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c9e:	78fb      	ldrb	r3, [r7, #3]
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f001 fdf7 	bl	8008896 <USBD_LL_GetRxDataSize>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00d      	beq.n	8006cd6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006cce:	4611      	mov	r1, r2
 8006cd0:	4798      	blx	r3

    return USBD_OK;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e000      	b.n	8006cd8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006cd6:	2302      	movs	r3, #2
  }
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cee:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d015      	beq.n	8006d26 <USBD_CDC_EP0_RxReady+0x46>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006d00:	2bff      	cmp	r3, #255	; 0xff
 8006d02:	d010      	beq.n	8006d26 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006d12:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d1a:	b292      	uxth	r2, r2
 8006d1c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	22ff      	movs	r2, #255	; 0xff
 8006d22:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2243      	movs	r2, #67	; 0x43
 8006d3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006d3e:	4b03      	ldr	r3, [pc, #12]	; (8006d4c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bc80      	pop	{r7}
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	20000098 	.word	0x20000098

08006d50 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2243      	movs	r2, #67	; 0x43
 8006d5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006d5e:	4b03      	ldr	r3, [pc, #12]	; (8006d6c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bc80      	pop	{r7}
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	20000054 	.word	0x20000054

08006d70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2243      	movs	r2, #67	; 0x43
 8006d7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006d7e:	4b03      	ldr	r3, [pc, #12]	; (8006d8c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bc80      	pop	{r7}
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	200000dc 	.word	0x200000dc

08006d90 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	220a      	movs	r2, #10
 8006d9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006d9e:	4b03      	ldr	r3, [pc, #12]	; (8006dac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bc80      	pop	{r7}
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	20000010 	.word	0x20000010

08006db0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006dba:	2302      	movs	r3, #2
 8006dbc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d005      	beq.n	8006dd0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr

08006ddc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	4613      	mov	r3, r2
 8006de8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006dfa:	88fa      	ldrh	r2, [r7, #6]
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	371c      	adds	r7, #28
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bc80      	pop	{r7}
 8006e0c:	4770      	bx	lr

08006e0e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b085      	sub	sp, #20
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e1e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bc80      	pop	{r7}
 8006e32:	4770      	bx	lr

08006e34 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d01c      	beq.n	8006e88 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d115      	bne.n	8006e84 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	2181      	movs	r1, #129	; 0x81
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f001 fcc5 	bl	800880a <USBD_LL_Transmit>

      return USBD_OK;
 8006e80:	2300      	movs	r3, #0
 8006e82:	e002      	b.n	8006e8a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e000      	b.n	8006e8a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006e88:	2302      	movs	r3, #2
  }
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d017      	beq.n	8006edc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	7c1b      	ldrb	r3, [r3, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d109      	bne.n	8006ec8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006eba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f001 fcc5 	bl	8008850 <USBD_LL_PrepareReceive>
 8006ec6:	e007      	b.n	8006ed8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ece:	2340      	movs	r3, #64	; 0x40
 8006ed0:	2101      	movs	r1, #1
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 fcbc 	bl	8008850 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	e000      	b.n	8006ede <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006edc:	2302      	movs	r3, #2
  }
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b084      	sub	sp, #16
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	60f8      	str	r0, [r7, #12]
 8006eee:	60b9      	str	r1, [r7, #8]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006efa:	2302      	movs	r3, #2
 8006efc:	e01a      	b.n	8006f34 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d003      	beq.n	8006f10 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	79fa      	ldrb	r2, [r7, #7]
 8006f2a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f001 fb29 	bl	8008584 <USBD_LL_Init>

  return USBD_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d006      	beq.n	8006f5e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	73fb      	strb	r3, [r7, #15]
 8006f5c:	e001      	b.n	8006f62 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006f5e:	2302      	movs	r3, #2
 8006f60:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3714      	adds	r7, #20
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bc80      	pop	{r7}
 8006f6c:	4770      	bx	lr

08006f6e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b082      	sub	sp, #8
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f001 fb5e 	bl	8008638 <USBD_LL_Start>

  return USBD_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b083      	sub	sp, #12
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bc80      	pop	{r7}
 8006f98:	4770      	bx	lr

08006f9a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00c      	beq.n	8006fce <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	78fa      	ldrb	r2, [r7, #3]
 8006fbe:	4611      	mov	r1, r2
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	4798      	blx	r3
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	78fa      	ldrb	r2, [r7, #3]
 8006fee:	4611      	mov	r1, r2
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	4798      	blx	r3

  return USBD_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b082      	sub	sp, #8
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800700e:	6839      	ldr	r1, [r7, #0]
 8007010:	4618      	mov	r0, r3
 8007012:	f000 fecb 	bl	8007dac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007024:	461a      	mov	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007032:	f003 031f 	and.w	r3, r3, #31
 8007036:	2b01      	cmp	r3, #1
 8007038:	d00c      	beq.n	8007054 <USBD_LL_SetupStage+0x56>
 800703a:	2b01      	cmp	r3, #1
 800703c:	d302      	bcc.n	8007044 <USBD_LL_SetupStage+0x46>
 800703e:	2b02      	cmp	r3, #2
 8007040:	d010      	beq.n	8007064 <USBD_LL_SetupStage+0x66>
 8007042:	e017      	b.n	8007074 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800704a:	4619      	mov	r1, r3
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f9cb 	bl	80073e8 <USBD_StdDevReq>
      break;
 8007052:	e01a      	b.n	800708a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fa2d 	bl	80074bc <USBD_StdItfReq>
      break;
 8007062:	e012      	b.n	800708a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800706a:	4619      	mov	r1, r3
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fa6b 	bl	8007548 <USBD_StdEPReq>
      break;
 8007072:	e00a      	b.n	800708a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800707a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800707e:	b2db      	uxtb	r3, r3
 8007080:	4619      	mov	r1, r3
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f001 fb38 	bl	80086f8 <USBD_LL_StallEP>
      break;
 8007088:	bf00      	nop
  }

  return USBD_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	460b      	mov	r3, r1
 800709e:	607a      	str	r2, [r7, #4]
 80070a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80070a2:	7afb      	ldrb	r3, [r7, #11]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d14b      	bne.n	8007140 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80070ae:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	d134      	bne.n	8007124 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	68da      	ldr	r2, [r3, #12]
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d919      	bls.n	80070fa <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	68da      	ldr	r2, [r3, #12]
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	1ad2      	subs	r2, r2, r3
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	68da      	ldr	r2, [r3, #12]
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80070dc:	429a      	cmp	r2, r3
 80070de:	d203      	bcs.n	80070e8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	e002      	b.n	80070ee <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	461a      	mov	r2, r3
 80070f0:	6879      	ldr	r1, [r7, #4]
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f000 ff4c 	bl	8007f90 <USBD_CtlContinueRx>
 80070f8:	e038      	b.n	800716c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00a      	beq.n	800711c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800710c:	2b03      	cmp	r3, #3
 800710e:	d105      	bne.n	800711c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 ff49 	bl	8007fb4 <USBD_CtlSendStatus>
 8007122:	e023      	b.n	800716c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800712a:	2b05      	cmp	r3, #5
 800712c:	d11e      	bne.n	800716c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007136:	2100      	movs	r1, #0
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f001 fadd 	bl	80086f8 <USBD_LL_StallEP>
 800713e:	e015      	b.n	800716c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00d      	beq.n	8007168 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007152:	2b03      	cmp	r3, #3
 8007154:	d108      	bne.n	8007168 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	7afa      	ldrb	r2, [r7, #11]
 8007160:	4611      	mov	r1, r2
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	4798      	blx	r3
 8007166:	e001      	b.n	800716c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007168:	2302      	movs	r3, #2
 800716a:	e000      	b.n	800716e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b086      	sub	sp, #24
 800717a:	af00      	add	r7, sp, #0
 800717c:	60f8      	str	r0, [r7, #12]
 800717e:	460b      	mov	r3, r1
 8007180:	607a      	str	r2, [r7, #4]
 8007182:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007184:	7afb      	ldrb	r3, [r7, #11]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d17f      	bne.n	800728a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	3314      	adds	r3, #20
 800718e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007196:	2b02      	cmp	r3, #2
 8007198:	d15c      	bne.n	8007254 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	68da      	ldr	r2, [r3, #12]
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d915      	bls.n	80071d2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	68da      	ldr	r2, [r3, #12]
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	1ad2      	subs	r2, r2, r3
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	461a      	mov	r2, r3
 80071bc:	6879      	ldr	r1, [r7, #4]
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 feb6 	bl	8007f30 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071c4:	2300      	movs	r3, #0
 80071c6:	2200      	movs	r2, #0
 80071c8:	2100      	movs	r1, #0
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f001 fb40 	bl	8008850 <USBD_LL_PrepareReceive>
 80071d0:	e04e      	b.n	8007270 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	6912      	ldr	r2, [r2, #16]
 80071da:	fbb3 f1f2 	udiv	r1, r3, r2
 80071de:	fb02 f201 	mul.w	r2, r2, r1
 80071e2:	1a9b      	subs	r3, r3, r2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d11c      	bne.n	8007222 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	689a      	ldr	r2, [r3, #8]
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d316      	bcc.n	8007222 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80071fe:	429a      	cmp	r2, r3
 8007200:	d20f      	bcs.n	8007222 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007202:	2200      	movs	r2, #0
 8007204:	2100      	movs	r1, #0
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f000 fe92 	bl	8007f30 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007214:	2300      	movs	r3, #0
 8007216:	2200      	movs	r2, #0
 8007218:	2100      	movs	r1, #0
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f001 fb18 	bl	8008850 <USBD_LL_PrepareReceive>
 8007220:	e026      	b.n	8007270 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00a      	beq.n	8007244 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007234:	2b03      	cmp	r3, #3
 8007236:	d105      	bne.n	8007244 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007244:	2180      	movs	r1, #128	; 0x80
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f001 fa56 	bl	80086f8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 fec4 	bl	8007fda <USBD_CtlReceiveStatus>
 8007252:	e00d      	b.n	8007270 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800725a:	2b04      	cmp	r3, #4
 800725c:	d004      	beq.n	8007268 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007264:	2b00      	cmp	r3, #0
 8007266:	d103      	bne.n	8007270 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007268:	2180      	movs	r1, #128	; 0x80
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f001 fa44 	bl	80086f8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007276:	2b01      	cmp	r3, #1
 8007278:	d11d      	bne.n	80072b6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f7ff fe83 	bl	8006f86 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007288:	e015      	b.n	80072b6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00d      	beq.n	80072b2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800729c:	2b03      	cmp	r3, #3
 800729e:	d108      	bne.n	80072b2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	7afa      	ldrb	r2, [r7, #11]
 80072aa:	4611      	mov	r1, r2
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	4798      	blx	r3
 80072b0:	e001      	b.n	80072b6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80072b2:	2302      	movs	r3, #2
 80072b4:	e000      	b.n	80072b8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3718      	adds	r7, #24
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072c8:	2340      	movs	r3, #64	; 0x40
 80072ca:	2200      	movs	r2, #0
 80072cc:	2100      	movs	r1, #0
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f001 f9cd 	bl	800866e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2240      	movs	r2, #64	; 0x40
 80072e0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072e4:	2340      	movs	r3, #64	; 0x40
 80072e6:	2200      	movs	r2, #0
 80072e8:	2180      	movs	r1, #128	; 0x80
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f001 f9bf 	bl	800866e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2240      	movs	r2, #64	; 0x40
 80072fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007320:	2b00      	cmp	r3, #0
 8007322:	d009      	beq.n	8007338 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	6852      	ldr	r2, [r2, #4]
 8007330:	b2d2      	uxtb	r2, r2
 8007332:	4611      	mov	r1, r2
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	4798      	blx	r3
  }

  return USBD_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007342:	b480      	push	{r7}
 8007344:	b083      	sub	sp, #12
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	460b      	mov	r3, r1
 800734c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	78fa      	ldrb	r2, [r7, #3]
 8007352:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	bc80      	pop	{r7}
 800735e:	4770      	bx	lr

08007360 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2204      	movs	r2, #4
 8007378:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	bc80      	pop	{r7}
 8007386:	4770      	bx	lr

08007388 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007396:	2b04      	cmp	r3, #4
 8007398:	d105      	bne.n	80073a6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bc80      	pop	{r7}
 80073b0:	4770      	bx	lr

080073b2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b082      	sub	sp, #8
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c0:	2b03      	cmp	r3, #3
 80073c2:	d10b      	bne.n	80073dc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d005      	beq.n	80073dc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073d6:	69db      	ldr	r3, [r3, #28]
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
	...

080073e8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073f2:	2300      	movs	r3, #0
 80073f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073fe:	2b20      	cmp	r3, #32
 8007400:	d004      	beq.n	800740c <USBD_StdDevReq+0x24>
 8007402:	2b40      	cmp	r3, #64	; 0x40
 8007404:	d002      	beq.n	800740c <USBD_StdDevReq+0x24>
 8007406:	2b00      	cmp	r3, #0
 8007408:	d008      	beq.n	800741c <USBD_StdDevReq+0x34>
 800740a:	e04c      	b.n	80074a6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	4798      	blx	r3
      break;
 800741a:	e049      	b.n	80074b0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	785b      	ldrb	r3, [r3, #1]
 8007420:	2b09      	cmp	r3, #9
 8007422:	d83a      	bhi.n	800749a <USBD_StdDevReq+0xb2>
 8007424:	a201      	add	r2, pc, #4	; (adr r2, 800742c <USBD_StdDevReq+0x44>)
 8007426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742a:	bf00      	nop
 800742c:	0800747d 	.word	0x0800747d
 8007430:	08007491 	.word	0x08007491
 8007434:	0800749b 	.word	0x0800749b
 8007438:	08007487 	.word	0x08007487
 800743c:	0800749b 	.word	0x0800749b
 8007440:	0800745f 	.word	0x0800745f
 8007444:	08007455 	.word	0x08007455
 8007448:	0800749b 	.word	0x0800749b
 800744c:	08007473 	.word	0x08007473
 8007450:	08007469 	.word	0x08007469
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f9d4 	bl	8007804 <USBD_GetDescriptor>
          break;
 800745c:	e022      	b.n	80074a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fb37 	bl	8007ad4 <USBD_SetAddress>
          break;
 8007466:	e01d      	b.n	80074a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007468:	6839      	ldr	r1, [r7, #0]
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fb74 	bl	8007b58 <USBD_SetConfig>
          break;
 8007470:	e018      	b.n	80074a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fbfd 	bl	8007c74 <USBD_GetConfig>
          break;
 800747a:	e013      	b.n	80074a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800747c:	6839      	ldr	r1, [r7, #0]
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fc2c 	bl	8007cdc <USBD_GetStatus>
          break;
 8007484:	e00e      	b.n	80074a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fc5a 	bl	8007d42 <USBD_SetFeature>
          break;
 800748e:	e009      	b.n	80074a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fc69 	bl	8007d6a <USBD_ClrFeature>
          break;
 8007498:	e004      	b.n	80074a4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fcc1 	bl	8007e24 <USBD_CtlError>
          break;
 80074a2:	bf00      	nop
      }
      break;
 80074a4:	e004      	b.n	80074b0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80074a6:	6839      	ldr	r1, [r7, #0]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fcbb 	bl	8007e24 <USBD_CtlError>
      break;
 80074ae:	bf00      	nop
  }

  return ret;
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop

080074bc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074d2:	2b20      	cmp	r3, #32
 80074d4:	d003      	beq.n	80074de <USBD_StdItfReq+0x22>
 80074d6:	2b40      	cmp	r3, #64	; 0x40
 80074d8:	d001      	beq.n	80074de <USBD_StdItfReq+0x22>
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d12a      	bne.n	8007534 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e4:	3b01      	subs	r3, #1
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d81d      	bhi.n	8007526 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	889b      	ldrh	r3, [r3, #4]
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d813      	bhi.n	800751c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	6839      	ldr	r1, [r7, #0]
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	4798      	blx	r3
 8007502:	4603      	mov	r3, r0
 8007504:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	88db      	ldrh	r3, [r3, #6]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d110      	bne.n	8007530 <USBD_StdItfReq+0x74>
 800750e:	7bfb      	ldrb	r3, [r7, #15]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10d      	bne.n	8007530 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fd4d 	bl	8007fb4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800751a:	e009      	b.n	8007530 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fc80 	bl	8007e24 <USBD_CtlError>
          break;
 8007524:	e004      	b.n	8007530 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fc7b 	bl	8007e24 <USBD_CtlError>
          break;
 800752e:	e000      	b.n	8007532 <USBD_StdItfReq+0x76>
          break;
 8007530:	bf00      	nop
      }
      break;
 8007532:	e004      	b.n	800753e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fc74 	bl	8007e24 <USBD_CtlError>
      break;
 800753c:	bf00      	nop
  }

  return USBD_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	889b      	ldrh	r3, [r3, #4]
 800755a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007564:	2b20      	cmp	r3, #32
 8007566:	d004      	beq.n	8007572 <USBD_StdEPReq+0x2a>
 8007568:	2b40      	cmp	r3, #64	; 0x40
 800756a:	d002      	beq.n	8007572 <USBD_StdEPReq+0x2a>
 800756c:	2b00      	cmp	r3, #0
 800756e:	d008      	beq.n	8007582 <USBD_StdEPReq+0x3a>
 8007570:	e13d      	b.n	80077ee <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	6839      	ldr	r1, [r7, #0]
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	4798      	blx	r3
      break;
 8007580:	e13a      	b.n	80077f8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800758a:	2b20      	cmp	r3, #32
 800758c:	d10a      	bne.n	80075a4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	6839      	ldr	r1, [r7, #0]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	4798      	blx	r3
 800759c:	4603      	mov	r3, r0
 800759e:	73fb      	strb	r3, [r7, #15]

        return ret;
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
 80075a2:	e12a      	b.n	80077fa <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	785b      	ldrb	r3, [r3, #1]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d03e      	beq.n	800762a <USBD_StdEPReq+0xe2>
 80075ac:	2b03      	cmp	r3, #3
 80075ae:	d002      	beq.n	80075b6 <USBD_StdEPReq+0x6e>
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d070      	beq.n	8007696 <USBD_StdEPReq+0x14e>
 80075b4:	e115      	b.n	80077e2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d002      	beq.n	80075c6 <USBD_StdEPReq+0x7e>
 80075c0:	2b03      	cmp	r3, #3
 80075c2:	d015      	beq.n	80075f0 <USBD_StdEPReq+0xa8>
 80075c4:	e02b      	b.n	800761e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075c6:	7bbb      	ldrb	r3, [r7, #14]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00c      	beq.n	80075e6 <USBD_StdEPReq+0x9e>
 80075cc:	7bbb      	ldrb	r3, [r7, #14]
 80075ce:	2b80      	cmp	r3, #128	; 0x80
 80075d0:	d009      	beq.n	80075e6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80075d2:	7bbb      	ldrb	r3, [r7, #14]
 80075d4:	4619      	mov	r1, r3
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f001 f88e 	bl	80086f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80075dc:	2180      	movs	r1, #128	; 0x80
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f001 f88a 	bl	80086f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075e4:	e020      	b.n	8007628 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80075e6:	6839      	ldr	r1, [r7, #0]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fc1b 	bl	8007e24 <USBD_CtlError>
              break;
 80075ee:	e01b      	b.n	8007628 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	885b      	ldrh	r3, [r3, #2]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10e      	bne.n	8007616 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80075f8:	7bbb      	ldrb	r3, [r7, #14]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00b      	beq.n	8007616 <USBD_StdEPReq+0xce>
 80075fe:	7bbb      	ldrb	r3, [r7, #14]
 8007600:	2b80      	cmp	r3, #128	; 0x80
 8007602:	d008      	beq.n	8007616 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	88db      	ldrh	r3, [r3, #6]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d104      	bne.n	8007616 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800760c:	7bbb      	ldrb	r3, [r7, #14]
 800760e:	4619      	mov	r1, r3
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f001 f871 	bl	80086f8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fccc 	bl	8007fb4 <USBD_CtlSendStatus>

              break;
 800761c:	e004      	b.n	8007628 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fbff 	bl	8007e24 <USBD_CtlError>
              break;
 8007626:	bf00      	nop
          }
          break;
 8007628:	e0e0      	b.n	80077ec <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007630:	2b02      	cmp	r3, #2
 8007632:	d002      	beq.n	800763a <USBD_StdEPReq+0xf2>
 8007634:	2b03      	cmp	r3, #3
 8007636:	d015      	beq.n	8007664 <USBD_StdEPReq+0x11c>
 8007638:	e026      	b.n	8007688 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800763a:	7bbb      	ldrb	r3, [r7, #14]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00c      	beq.n	800765a <USBD_StdEPReq+0x112>
 8007640:	7bbb      	ldrb	r3, [r7, #14]
 8007642:	2b80      	cmp	r3, #128	; 0x80
 8007644:	d009      	beq.n	800765a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007646:	7bbb      	ldrb	r3, [r7, #14]
 8007648:	4619      	mov	r1, r3
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f001 f854 	bl	80086f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007650:	2180      	movs	r1, #128	; 0x80
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f001 f850 	bl	80086f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007658:	e01c      	b.n	8007694 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800765a:	6839      	ldr	r1, [r7, #0]
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fbe1 	bl	8007e24 <USBD_CtlError>
              break;
 8007662:	e017      	b.n	8007694 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	885b      	ldrh	r3, [r3, #2]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d112      	bne.n	8007692 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007672:	2b00      	cmp	r3, #0
 8007674:	d004      	beq.n	8007680 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007676:	7bbb      	ldrb	r3, [r7, #14]
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f001 f85b 	bl	8008736 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fc97 	bl	8007fb4 <USBD_CtlSendStatus>
              }
              break;
 8007686:	e004      	b.n	8007692 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fbca 	bl	8007e24 <USBD_CtlError>
              break;
 8007690:	e000      	b.n	8007694 <USBD_StdEPReq+0x14c>
              break;
 8007692:	bf00      	nop
          }
          break;
 8007694:	e0aa      	b.n	80077ec <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800769c:	2b02      	cmp	r3, #2
 800769e:	d002      	beq.n	80076a6 <USBD_StdEPReq+0x15e>
 80076a0:	2b03      	cmp	r3, #3
 80076a2:	d032      	beq.n	800770a <USBD_StdEPReq+0x1c2>
 80076a4:	e097      	b.n	80077d6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076a6:	7bbb      	ldrb	r3, [r7, #14]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d007      	beq.n	80076bc <USBD_StdEPReq+0x174>
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
 80076ae:	2b80      	cmp	r3, #128	; 0x80
 80076b0:	d004      	beq.n	80076bc <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80076b2:	6839      	ldr	r1, [r7, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fbb5 	bl	8007e24 <USBD_CtlError>
                break;
 80076ba:	e091      	b.n	80077e0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	da0b      	bge.n	80076dc <USBD_StdEPReq+0x194>
 80076c4:	7bbb      	ldrb	r3, [r7, #14]
 80076c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076ca:	4613      	mov	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4413      	add	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	3310      	adds	r3, #16
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	4413      	add	r3, r2
 80076d8:	3304      	adds	r3, #4
 80076da:	e00b      	b.n	80076f4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
 80076de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076e2:	4613      	mov	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	4413      	add	r3, r2
 80076f2:	3304      	adds	r3, #4
 80076f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	2200      	movs	r2, #0
 80076fa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2202      	movs	r2, #2
 8007700:	4619      	mov	r1, r3
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fbf8 	bl	8007ef8 <USBD_CtlSendData>
              break;
 8007708:	e06a      	b.n	80077e0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800770a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800770e:	2b00      	cmp	r3, #0
 8007710:	da11      	bge.n	8007736 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007712:	7bbb      	ldrb	r3, [r7, #14]
 8007714:	f003 020f 	and.w	r2, r3, #15
 8007718:	6879      	ldr	r1, [r7, #4]
 800771a:	4613      	mov	r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	4413      	add	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	440b      	add	r3, r1
 8007724:	3318      	adds	r3, #24
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d117      	bne.n	800775c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fb78 	bl	8007e24 <USBD_CtlError>
                  break;
 8007734:	e054      	b.n	80077e0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007736:	7bbb      	ldrb	r3, [r7, #14]
 8007738:	f003 020f 	and.w	r2, r3, #15
 800773c:	6879      	ldr	r1, [r7, #4]
 800773e:	4613      	mov	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	440b      	add	r3, r1
 8007748:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d104      	bne.n	800775c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007752:	6839      	ldr	r1, [r7, #0]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fb65 	bl	8007e24 <USBD_CtlError>
                  break;
 800775a:	e041      	b.n	80077e0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800775c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007760:	2b00      	cmp	r3, #0
 8007762:	da0b      	bge.n	800777c <USBD_StdEPReq+0x234>
 8007764:	7bbb      	ldrb	r3, [r7, #14]
 8007766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800776a:	4613      	mov	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4413      	add	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	3310      	adds	r3, #16
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	4413      	add	r3, r2
 8007778:	3304      	adds	r3, #4
 800777a:	e00b      	b.n	8007794 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800777c:	7bbb      	ldrb	r3, [r7, #14]
 800777e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007782:	4613      	mov	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	4413      	add	r3, r2
 8007792:	3304      	adds	r3, #4
 8007794:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007796:	7bbb      	ldrb	r3, [r7, #14]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d002      	beq.n	80077a2 <USBD_StdEPReq+0x25a>
 800779c:	7bbb      	ldrb	r3, [r7, #14]
 800779e:	2b80      	cmp	r3, #128	; 0x80
 80077a0:	d103      	bne.n	80077aa <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	2200      	movs	r2, #0
 80077a6:	601a      	str	r2, [r3, #0]
 80077a8:	e00e      	b.n	80077c8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80077aa:	7bbb      	ldrb	r3, [r7, #14]
 80077ac:	4619      	mov	r1, r3
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 ffe0 	bl	8008774 <USBD_LL_IsStallEP>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	2201      	movs	r2, #1
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	e002      	b.n	80077c8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	2200      	movs	r2, #0
 80077c6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	2202      	movs	r2, #2
 80077cc:	4619      	mov	r1, r3
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fb92 	bl	8007ef8 <USBD_CtlSendData>
              break;
 80077d4:	e004      	b.n	80077e0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80077d6:	6839      	ldr	r1, [r7, #0]
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fb23 	bl	8007e24 <USBD_CtlError>
              break;
 80077de:	bf00      	nop
          }
          break;
 80077e0:	e004      	b.n	80077ec <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fb1d 	bl	8007e24 <USBD_CtlError>
          break;
 80077ea:	bf00      	nop
      }
      break;
 80077ec:	e004      	b.n	80077f8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fb17 	bl	8007e24 <USBD_CtlError>
      break;
 80077f6:	bf00      	nop
  }

  return ret;
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
	...

08007804 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007812:	2300      	movs	r3, #0
 8007814:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007816:	2300      	movs	r3, #0
 8007818:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	885b      	ldrh	r3, [r3, #2]
 800781e:	0a1b      	lsrs	r3, r3, #8
 8007820:	b29b      	uxth	r3, r3
 8007822:	3b01      	subs	r3, #1
 8007824:	2b06      	cmp	r3, #6
 8007826:	f200 8128 	bhi.w	8007a7a <USBD_GetDescriptor+0x276>
 800782a:	a201      	add	r2, pc, #4	; (adr r2, 8007830 <USBD_GetDescriptor+0x2c>)
 800782c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007830:	0800784d 	.word	0x0800784d
 8007834:	08007865 	.word	0x08007865
 8007838:	080078a5 	.word	0x080078a5
 800783c:	08007a7b 	.word	0x08007a7b
 8007840:	08007a7b 	.word	0x08007a7b
 8007844:	08007a1b 	.word	0x08007a1b
 8007848:	08007a47 	.word	0x08007a47
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	7c12      	ldrb	r2, [r2, #16]
 8007858:	f107 0108 	add.w	r1, r7, #8
 800785c:	4610      	mov	r0, r2
 800785e:	4798      	blx	r3
 8007860:	60f8      	str	r0, [r7, #12]
      break;
 8007862:	e112      	b.n	8007a8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	7c1b      	ldrb	r3, [r3, #16]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10d      	bne.n	8007888 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007874:	f107 0208 	add.w	r2, r7, #8
 8007878:	4610      	mov	r0, r2
 800787a:	4798      	blx	r3
 800787c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3301      	adds	r3, #1
 8007882:	2202      	movs	r2, #2
 8007884:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007886:	e100      	b.n	8007a8a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800788e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007890:	f107 0208 	add.w	r2, r7, #8
 8007894:	4610      	mov	r0, r2
 8007896:	4798      	blx	r3
 8007898:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	3301      	adds	r3, #1
 800789e:	2202      	movs	r2, #2
 80078a0:	701a      	strb	r2, [r3, #0]
      break;
 80078a2:	e0f2      	b.n	8007a8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	885b      	ldrh	r3, [r3, #2]
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b05      	cmp	r3, #5
 80078ac:	f200 80ac 	bhi.w	8007a08 <USBD_GetDescriptor+0x204>
 80078b0:	a201      	add	r2, pc, #4	; (adr r2, 80078b8 <USBD_GetDescriptor+0xb4>)
 80078b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b6:	bf00      	nop
 80078b8:	080078d1 	.word	0x080078d1
 80078bc:	08007905 	.word	0x08007905
 80078c0:	08007939 	.word	0x08007939
 80078c4:	0800796d 	.word	0x0800796d
 80078c8:	080079a1 	.word	0x080079a1
 80078cc:	080079d5 	.word	0x080079d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00b      	beq.n	80078f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	7c12      	ldrb	r2, [r2, #16]
 80078e8:	f107 0108 	add.w	r1, r7, #8
 80078ec:	4610      	mov	r0, r2
 80078ee:	4798      	blx	r3
 80078f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078f2:	e091      	b.n	8007a18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fa94 	bl	8007e24 <USBD_CtlError>
            err++;
 80078fc:	7afb      	ldrb	r3, [r7, #11]
 80078fe:	3301      	adds	r3, #1
 8007900:	72fb      	strb	r3, [r7, #11]
          break;
 8007902:	e089      	b.n	8007a18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00b      	beq.n	8007928 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	7c12      	ldrb	r2, [r2, #16]
 800791c:	f107 0108 	add.w	r1, r7, #8
 8007920:	4610      	mov	r0, r2
 8007922:	4798      	blx	r3
 8007924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007926:	e077      	b.n	8007a18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fa7a 	bl	8007e24 <USBD_CtlError>
            err++;
 8007930:	7afb      	ldrb	r3, [r7, #11]
 8007932:	3301      	adds	r3, #1
 8007934:	72fb      	strb	r3, [r7, #11]
          break;
 8007936:	e06f      	b.n	8007a18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00b      	beq.n	800795c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	7c12      	ldrb	r2, [r2, #16]
 8007950:	f107 0108 	add.w	r1, r7, #8
 8007954:	4610      	mov	r0, r2
 8007956:	4798      	blx	r3
 8007958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800795a:	e05d      	b.n	8007a18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fa60 	bl	8007e24 <USBD_CtlError>
            err++;
 8007964:	7afb      	ldrb	r3, [r7, #11]
 8007966:	3301      	adds	r3, #1
 8007968:	72fb      	strb	r3, [r7, #11]
          break;
 800796a:	e055      	b.n	8007a18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00b      	beq.n	8007990 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	7c12      	ldrb	r2, [r2, #16]
 8007984:	f107 0108 	add.w	r1, r7, #8
 8007988:	4610      	mov	r0, r2
 800798a:	4798      	blx	r3
 800798c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800798e:	e043      	b.n	8007a18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fa46 	bl	8007e24 <USBD_CtlError>
            err++;
 8007998:	7afb      	ldrb	r3, [r7, #11]
 800799a:	3301      	adds	r3, #1
 800799c:	72fb      	strb	r3, [r7, #11]
          break;
 800799e:	e03b      	b.n	8007a18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00b      	beq.n	80079c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079b2:	695b      	ldr	r3, [r3, #20]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	7c12      	ldrb	r2, [r2, #16]
 80079b8:	f107 0108 	add.w	r1, r7, #8
 80079bc:	4610      	mov	r0, r2
 80079be:	4798      	blx	r3
 80079c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079c2:	e029      	b.n	8007a18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fa2c 	bl	8007e24 <USBD_CtlError>
            err++;
 80079cc:	7afb      	ldrb	r3, [r7, #11]
 80079ce:	3301      	adds	r3, #1
 80079d0:	72fb      	strb	r3, [r7, #11]
          break;
 80079d2:	e021      	b.n	8007a18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00b      	beq.n	80079f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	7c12      	ldrb	r2, [r2, #16]
 80079ec:	f107 0108 	add.w	r1, r7, #8
 80079f0:	4610      	mov	r0, r2
 80079f2:	4798      	blx	r3
 80079f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079f6:	e00f      	b.n	8007a18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fa12 	bl	8007e24 <USBD_CtlError>
            err++;
 8007a00:	7afb      	ldrb	r3, [r7, #11]
 8007a02:	3301      	adds	r3, #1
 8007a04:	72fb      	strb	r3, [r7, #11]
          break;
 8007a06:	e007      	b.n	8007a18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fa0a 	bl	8007e24 <USBD_CtlError>
          err++;
 8007a10:	7afb      	ldrb	r3, [r7, #11]
 8007a12:	3301      	adds	r3, #1
 8007a14:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007a16:	e038      	b.n	8007a8a <USBD_GetDescriptor+0x286>
 8007a18:	e037      	b.n	8007a8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	7c1b      	ldrb	r3, [r3, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d109      	bne.n	8007a36 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a2a:	f107 0208 	add.w	r2, r7, #8
 8007a2e:	4610      	mov	r0, r2
 8007a30:	4798      	blx	r3
 8007a32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a34:	e029      	b.n	8007a8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f9f3 	bl	8007e24 <USBD_CtlError>
        err++;
 8007a3e:	7afb      	ldrb	r3, [r7, #11]
 8007a40:	3301      	adds	r3, #1
 8007a42:	72fb      	strb	r3, [r7, #11]
      break;
 8007a44:	e021      	b.n	8007a8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	7c1b      	ldrb	r3, [r3, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10d      	bne.n	8007a6a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a56:	f107 0208 	add.w	r2, r7, #8
 8007a5a:	4610      	mov	r0, r2
 8007a5c:	4798      	blx	r3
 8007a5e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	3301      	adds	r3, #1
 8007a64:	2207      	movs	r2, #7
 8007a66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a68:	e00f      	b.n	8007a8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a6a:	6839      	ldr	r1, [r7, #0]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f9d9 	bl	8007e24 <USBD_CtlError>
        err++;
 8007a72:	7afb      	ldrb	r3, [r7, #11]
 8007a74:	3301      	adds	r3, #1
 8007a76:	72fb      	strb	r3, [r7, #11]
      break;
 8007a78:	e007      	b.n	8007a8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f9d1 	bl	8007e24 <USBD_CtlError>
      err++;
 8007a82:	7afb      	ldrb	r3, [r7, #11]
 8007a84:	3301      	adds	r3, #1
 8007a86:	72fb      	strb	r3, [r7, #11]
      break;
 8007a88:	bf00      	nop
  }

  if (err != 0U)
 8007a8a:	7afb      	ldrb	r3, [r7, #11]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d11c      	bne.n	8007aca <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007a90:	893b      	ldrh	r3, [r7, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d011      	beq.n	8007aba <USBD_GetDescriptor+0x2b6>
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	88db      	ldrh	r3, [r3, #6]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00d      	beq.n	8007aba <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	88da      	ldrh	r2, [r3, #6]
 8007aa2:	893b      	ldrh	r3, [r7, #8]
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	bf28      	it	cs
 8007aa8:	4613      	movcs	r3, r2
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007aae:	893b      	ldrh	r3, [r7, #8]
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	68f9      	ldr	r1, [r7, #12]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fa1f 	bl	8007ef8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	88db      	ldrh	r3, [r3, #6]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d104      	bne.n	8007acc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fa76 	bl	8007fb4 <USBD_CtlSendStatus>
 8007ac8:	e000      	b.n	8007acc <USBD_GetDescriptor+0x2c8>
    return;
 8007aca:	bf00      	nop
    }
  }
}
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop

08007ad4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	889b      	ldrh	r3, [r3, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d130      	bne.n	8007b48 <USBD_SetAddress+0x74>
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	88db      	ldrh	r3, [r3, #6]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d12c      	bne.n	8007b48 <USBD_SetAddress+0x74>
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	885b      	ldrh	r3, [r3, #2]
 8007af2:	2b7f      	cmp	r3, #127	; 0x7f
 8007af4:	d828      	bhi.n	8007b48 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	885b      	ldrh	r3, [r3, #2]
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b08:	2b03      	cmp	r3, #3
 8007b0a:	d104      	bne.n	8007b16 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007b0c:	6839      	ldr	r1, [r7, #0]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f988 	bl	8007e24 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b14:	e01c      	b.n	8007b50 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	7bfa      	ldrb	r2, [r7, #15]
 8007b1a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b1e:	7bfb      	ldrb	r3, [r7, #15]
 8007b20:	4619      	mov	r1, r3
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fe52 	bl	80087cc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 fa43 	bl	8007fb4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d004      	beq.n	8007b3e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2202      	movs	r2, #2
 8007b38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b3c:	e008      	b.n	8007b50 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b46:	e003      	b.n	8007b50 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f96a 	bl	8007e24 <USBD_CtlError>
  }
}
 8007b50:	bf00      	nop
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	885b      	ldrh	r3, [r3, #2]
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	4b41      	ldr	r3, [pc, #260]	; (8007c70 <USBD_SetConfig+0x118>)
 8007b6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b6c:	4b40      	ldr	r3, [pc, #256]	; (8007c70 <USBD_SetConfig+0x118>)
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d904      	bls.n	8007b7e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f954 	bl	8007e24 <USBD_CtlError>
 8007b7c:	e075      	b.n	8007c6a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d002      	beq.n	8007b8e <USBD_SetConfig+0x36>
 8007b88:	2b03      	cmp	r3, #3
 8007b8a:	d023      	beq.n	8007bd4 <USBD_SetConfig+0x7c>
 8007b8c:	e062      	b.n	8007c54 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007b8e:	4b38      	ldr	r3, [pc, #224]	; (8007c70 <USBD_SetConfig+0x118>)
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d01a      	beq.n	8007bcc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007b96:	4b36      	ldr	r3, [pc, #216]	; (8007c70 <USBD_SetConfig+0x118>)
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2203      	movs	r2, #3
 8007ba4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ba8:	4b31      	ldr	r3, [pc, #196]	; (8007c70 <USBD_SetConfig+0x118>)
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	4619      	mov	r1, r3
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f7ff f9f3 	bl	8006f9a <USBD_SetClassConfig>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d104      	bne.n	8007bc4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f931 	bl	8007e24 <USBD_CtlError>
            return;
 8007bc2:	e052      	b.n	8007c6a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f9f5 	bl	8007fb4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007bca:	e04e      	b.n	8007c6a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f9f1 	bl	8007fb4 <USBD_CtlSendStatus>
        break;
 8007bd2:	e04a      	b.n	8007c6a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007bd4:	4b26      	ldr	r3, [pc, #152]	; (8007c70 <USBD_SetConfig+0x118>)
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d112      	bne.n	8007c02 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2202      	movs	r2, #2
 8007be0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007be4:	4b22      	ldr	r3, [pc, #136]	; (8007c70 <USBD_SetConfig+0x118>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	461a      	mov	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007bee:	4b20      	ldr	r3, [pc, #128]	; (8007c70 <USBD_SetConfig+0x118>)
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f7ff f9ef 	bl	8006fd8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f9da 	bl	8007fb4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007c00:	e033      	b.n	8007c6a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007c02:	4b1b      	ldr	r3, [pc, #108]	; (8007c70 <USBD_SetConfig+0x118>)
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	461a      	mov	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d01d      	beq.n	8007c4c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	4619      	mov	r1, r3
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f7ff f9dd 	bl	8006fd8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007c1e:	4b14      	ldr	r3, [pc, #80]	; (8007c70 <USBD_SetConfig+0x118>)
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	461a      	mov	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007c28:	4b11      	ldr	r3, [pc, #68]	; (8007c70 <USBD_SetConfig+0x118>)
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7ff f9b3 	bl	8006f9a <USBD_SetClassConfig>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d104      	bne.n	8007c44 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f8f1 	bl	8007e24 <USBD_CtlError>
            return;
 8007c42:	e012      	b.n	8007c6a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f9b5 	bl	8007fb4 <USBD_CtlSendStatus>
        break;
 8007c4a:	e00e      	b.n	8007c6a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f9b1 	bl	8007fb4 <USBD_CtlSendStatus>
        break;
 8007c52:	e00a      	b.n	8007c6a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f8e4 	bl	8007e24 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007c5c:	4b04      	ldr	r3, [pc, #16]	; (8007c70 <USBD_SetConfig+0x118>)
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	4619      	mov	r1, r3
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7ff f9b8 	bl	8006fd8 <USBD_ClrClassConfig>
        break;
 8007c68:	bf00      	nop
    }
  }
}
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	20000375 	.word	0x20000375

08007c74 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	88db      	ldrh	r3, [r3, #6]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d004      	beq.n	8007c90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f8cb 	bl	8007e24 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c8e:	e021      	b.n	8007cd4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	db17      	blt.n	8007cca <USBD_GetConfig+0x56>
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	dd02      	ble.n	8007ca4 <USBD_GetConfig+0x30>
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	d00b      	beq.n	8007cba <USBD_GetConfig+0x46>
 8007ca2:	e012      	b.n	8007cca <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	3308      	adds	r3, #8
 8007cae:	2201      	movs	r2, #1
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f920 	bl	8007ef8 <USBD_CtlSendData>
        break;
 8007cb8:	e00c      	b.n	8007cd4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	3304      	adds	r3, #4
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f918 	bl	8007ef8 <USBD_CtlSendData>
        break;
 8007cc8:	e004      	b.n	8007cd4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f8a9 	bl	8007e24 <USBD_CtlError>
        break;
 8007cd2:	bf00      	nop
}
 8007cd4:	bf00      	nop
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cec:	3b01      	subs	r3, #1
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d81e      	bhi.n	8007d30 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	88db      	ldrh	r3, [r3, #6]
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d004      	beq.n	8007d04 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f891 	bl	8007e24 <USBD_CtlError>
        break;
 8007d02:	e01a      	b.n	8007d3a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d005      	beq.n	8007d20 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f043 0202 	orr.w	r2, r3, #2
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	330c      	adds	r3, #12
 8007d24:	2202      	movs	r2, #2
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f8e5 	bl	8007ef8 <USBD_CtlSendData>
      break;
 8007d2e:	e004      	b.n	8007d3a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f876 	bl	8007e24 <USBD_CtlError>
      break;
 8007d38:	bf00      	nop
  }
}
 8007d3a:	bf00      	nop
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b082      	sub	sp, #8
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	885b      	ldrh	r3, [r3, #2]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d106      	bne.n	8007d62 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f929 	bl	8007fb4 <USBD_CtlSendStatus>
  }
}
 8007d62:	bf00      	nop
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b082      	sub	sp, #8
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d80b      	bhi.n	8007d98 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	885b      	ldrh	r3, [r3, #2]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d10c      	bne.n	8007da2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f90f 	bl	8007fb4 <USBD_CtlSendStatus>
      }
      break;
 8007d96:	e004      	b.n	8007da2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f842 	bl	8007e24 <USBD_CtlError>
      break;
 8007da0:	e000      	b.n	8007da4 <USBD_ClrFeature+0x3a>
      break;
 8007da2:	bf00      	nop
  }
}
 8007da4:	bf00      	nop
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	781a      	ldrb	r2, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	785a      	ldrb	r2, [r3, #1]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	3302      	adds	r3, #2
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	3303      	adds	r3, #3
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	021b      	lsls	r3, r3, #8
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	4413      	add	r3, r2
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	3304      	adds	r3, #4
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	3305      	adds	r3, #5
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	021b      	lsls	r3, r3, #8
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	4413      	add	r3, r2
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	3306      	adds	r3, #6
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	3307      	adds	r3, #7
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	021b      	lsls	r3, r3, #8
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	4413      	add	r3, r2
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	80da      	strh	r2, [r3, #6]

}
 8007e1a:	bf00      	nop
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bc80      	pop	{r7}
 8007e22:	4770      	bx	lr

08007e24 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007e2e:	2180      	movs	r1, #128	; 0x80
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fc61 	bl	80086f8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007e36:	2100      	movs	r1, #0
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 fc5d 	bl	80086f8 <USBD_LL_StallEP>
}
 8007e3e:	bf00      	nop
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b086      	sub	sp, #24
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	60f8      	str	r0, [r7, #12]
 8007e4e:	60b9      	str	r1, [r7, #8]
 8007e50:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d032      	beq.n	8007ec2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 f834 	bl	8007eca <USBD_GetLen>
 8007e62:	4603      	mov	r3, r0
 8007e64:	3301      	adds	r3, #1
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	005b      	lsls	r3, r3, #1
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007e70:	7dfb      	ldrb	r3, [r7, #23]
 8007e72:	1c5a      	adds	r2, r3, #1
 8007e74:	75fa      	strb	r2, [r7, #23]
 8007e76:	461a      	mov	r2, r3
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	7812      	ldrb	r2, [r2, #0]
 8007e80:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007e82:	7dfb      	ldrb	r3, [r7, #23]
 8007e84:	1c5a      	adds	r2, r3, #1
 8007e86:	75fa      	strb	r2, [r7, #23]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	2203      	movs	r2, #3
 8007e90:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007e92:	e012      	b.n	8007eba <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	1c5a      	adds	r2, r3, #1
 8007e98:	60fa      	str	r2, [r7, #12]
 8007e9a:	7dfa      	ldrb	r2, [r7, #23]
 8007e9c:	1c51      	adds	r1, r2, #1
 8007e9e:	75f9      	strb	r1, [r7, #23]
 8007ea0:	4611      	mov	r1, r2
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	440a      	add	r2, r1
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007eaa:	7dfb      	ldrb	r3, [r7, #23]
 8007eac:	1c5a      	adds	r2, r3, #1
 8007eae:	75fa      	strb	r2, [r7, #23]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1e8      	bne.n	8007e94 <USBD_GetString+0x4e>
    }
  }
}
 8007ec2:	bf00      	nop
 8007ec4:	3718      	adds	r7, #24
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b085      	sub	sp, #20
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007ed6:	e005      	b.n	8007ee4 <USBD_GetLen+0x1a>
  {
    len++;
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
 8007eda:	3301      	adds	r3, #1
 8007edc:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1f5      	bne.n	8007ed8 <USBD_GetLen+0xe>
  }

  return len;
 8007eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bc80      	pop	{r7}
 8007ef6:	4770      	bx	lr

08007ef8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	4613      	mov	r3, r2
 8007f04:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2202      	movs	r2, #2
 8007f0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007f0e:	88fa      	ldrh	r2, [r7, #6]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007f14:	88fa      	ldrh	r2, [r7, #6]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f1a:	88fb      	ldrh	r3, [r7, #6]
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	2100      	movs	r1, #0
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 fc72 	bl	800880a <USBD_LL_Transmit>

  return USBD_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f3e:	88fb      	ldrh	r3, [r7, #6]
 8007f40:	68ba      	ldr	r2, [r7, #8]
 8007f42:	2100      	movs	r1, #0
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f000 fc60 	bl	800880a <USBD_LL_Transmit>

  return USBD_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2203      	movs	r2, #3
 8007f66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007f6a:	88fa      	ldrh	r2, [r7, #6]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007f72:	88fa      	ldrh	r2, [r7, #6]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f7a:	88fb      	ldrh	r3, [r7, #6]
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	2100      	movs	r1, #0
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f000 fc65 	bl	8008850 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f9e:	88fb      	ldrh	r3, [r7, #6]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f000 fc53 	bl	8008850 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2204      	movs	r2, #4
 8007fc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	2100      	movs	r1, #0
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fc1d 	bl	800880a <USBD_LL_Transmit>

  return USBD_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3708      	adds	r7, #8
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b082      	sub	sp, #8
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2205      	movs	r2, #5
 8007fe6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fea:	2300      	movs	r3, #0
 8007fec:	2200      	movs	r2, #0
 8007fee:	2100      	movs	r1, #0
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fc2d 	bl	8008850 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008004:	2200      	movs	r2, #0
 8008006:	4912      	ldr	r1, [pc, #72]	; (8008050 <MX_USB_DEVICE_Init+0x50>)
 8008008:	4812      	ldr	r0, [pc, #72]	; (8008054 <MX_USB_DEVICE_Init+0x54>)
 800800a:	f7fe ff6c 	bl	8006ee6 <USBD_Init>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008014:	f7f8 fd5e 	bl	8000ad4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008018:	490f      	ldr	r1, [pc, #60]	; (8008058 <MX_USB_DEVICE_Init+0x58>)
 800801a:	480e      	ldr	r0, [pc, #56]	; (8008054 <MX_USB_DEVICE_Init+0x54>)
 800801c:	f7fe ff8e 	bl	8006f3c <USBD_RegisterClass>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008026:	f7f8 fd55 	bl	8000ad4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800802a:	490c      	ldr	r1, [pc, #48]	; (800805c <MX_USB_DEVICE_Init+0x5c>)
 800802c:	4809      	ldr	r0, [pc, #36]	; (8008054 <MX_USB_DEVICE_Init+0x54>)
 800802e:	f7fe febf 	bl	8006db0 <USBD_CDC_RegisterInterface>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008038:	f7f8 fd4c 	bl	8000ad4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800803c:	4805      	ldr	r0, [pc, #20]	; (8008054 <MX_USB_DEVICE_Init+0x54>)
 800803e:	f7fe ff96 	bl	8006f6e <USBD_Start>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d001      	beq.n	800804c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008048:	f7f8 fd44 	bl	8000ad4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800804c:	bf00      	nop
 800804e:	bd80      	pop	{r7, pc}
 8008050:	20000130 	.word	0x20000130
 8008054:	20002f48 	.word	0x20002f48
 8008058:	2000001c 	.word	0x2000001c
 800805c:	20000120 	.word	0x20000120

08008060 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008064:	2200      	movs	r2, #0
 8008066:	4905      	ldr	r1, [pc, #20]	; (800807c <CDC_Init_FS+0x1c>)
 8008068:	4805      	ldr	r0, [pc, #20]	; (8008080 <CDC_Init_FS+0x20>)
 800806a:	f7fe feb7 	bl	8006ddc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800806e:	4905      	ldr	r1, [pc, #20]	; (8008084 <CDC_Init_FS+0x24>)
 8008070:	4803      	ldr	r0, [pc, #12]	; (8008080 <CDC_Init_FS+0x20>)
 8008072:	f7fe fecc 	bl	8006e0e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008076:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008078:	4618      	mov	r0, r3
 800807a:	bd80      	pop	{r7, pc}
 800807c:	2000330c 	.word	0x2000330c
 8008080:	20002f48 	.word	0x20002f48
 8008084:	2000320c 	.word	0x2000320c

08008088 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008088:	b480      	push	{r7}
 800808a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800808c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800808e:	4618      	mov	r0, r3
 8008090:	46bd      	mov	sp, r7
 8008092:	bc80      	pop	{r7}
 8008094:	4770      	bx	lr
	...

08008098 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	4603      	mov	r3, r0
 80080a0:	6039      	str	r1, [r7, #0]
 80080a2:	71fb      	strb	r3, [r7, #7]
 80080a4:	4613      	mov	r3, r2
 80080a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80080a8:	79fb      	ldrb	r3, [r7, #7]
 80080aa:	2b23      	cmp	r3, #35	; 0x23
 80080ac:	d84a      	bhi.n	8008144 <CDC_Control_FS+0xac>
 80080ae:	a201      	add	r2, pc, #4	; (adr r2, 80080b4 <CDC_Control_FS+0x1c>)
 80080b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b4:	08008145 	.word	0x08008145
 80080b8:	08008145 	.word	0x08008145
 80080bc:	08008145 	.word	0x08008145
 80080c0:	08008145 	.word	0x08008145
 80080c4:	08008145 	.word	0x08008145
 80080c8:	08008145 	.word	0x08008145
 80080cc:	08008145 	.word	0x08008145
 80080d0:	08008145 	.word	0x08008145
 80080d4:	08008145 	.word	0x08008145
 80080d8:	08008145 	.word	0x08008145
 80080dc:	08008145 	.word	0x08008145
 80080e0:	08008145 	.word	0x08008145
 80080e4:	08008145 	.word	0x08008145
 80080e8:	08008145 	.word	0x08008145
 80080ec:	08008145 	.word	0x08008145
 80080f0:	08008145 	.word	0x08008145
 80080f4:	08008145 	.word	0x08008145
 80080f8:	08008145 	.word	0x08008145
 80080fc:	08008145 	.word	0x08008145
 8008100:	08008145 	.word	0x08008145
 8008104:	08008145 	.word	0x08008145
 8008108:	08008145 	.word	0x08008145
 800810c:	08008145 	.word	0x08008145
 8008110:	08008145 	.word	0x08008145
 8008114:	08008145 	.word	0x08008145
 8008118:	08008145 	.word	0x08008145
 800811c:	08008145 	.word	0x08008145
 8008120:	08008145 	.word	0x08008145
 8008124:	08008145 	.word	0x08008145
 8008128:	08008145 	.word	0x08008145
 800812c:	08008145 	.word	0x08008145
 8008130:	08008145 	.word	0x08008145
 8008134:	08008145 	.word	0x08008145
 8008138:	08008145 	.word	0x08008145
 800813c:	08008145 	.word	0x08008145
 8008140:	08008145 	.word	0x08008145
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008144:	bf00      	nop
  }

  return (USBD_OK);
 8008146:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008148:	4618      	mov	r0, r3
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	bc80      	pop	{r7}
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop

08008154 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800815e:	6879      	ldr	r1, [r7, #4]
 8008160:	4808      	ldr	r0, [pc, #32]	; (8008184 <CDC_Receive_FS+0x30>)
 8008162:	f7fe fe54 	bl	8006e0e <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008166:	4807      	ldr	r0, [pc, #28]	; (8008184 <CDC_Receive_FS+0x30>)
 8008168:	f7fe fe93 	bl	8006e92 <USBD_CDC_ReceivePacket>
	CDC_ReciveCallBack(Buf, *Len);
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4619      	mov	r1, r3
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f7f8 fc4a 	bl	8000a0c <CDC_ReciveCallBack>
	return (USBD_OK);
 8008178:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800817a:	4618      	mov	r0, r3
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	20002f48 	.word	0x20002f48

08008188 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	460b      	mov	r3, r1
 8008192:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008194:	2300      	movs	r3, #0
 8008196:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008198:	4b0d      	ldr	r3, [pc, #52]	; (80081d0 <CDC_Transmit_FS+0x48>)
 800819a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800819e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e00b      	b.n	80081c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80081ae:	887b      	ldrh	r3, [r7, #2]
 80081b0:	461a      	mov	r2, r3
 80081b2:	6879      	ldr	r1, [r7, #4]
 80081b4:	4806      	ldr	r0, [pc, #24]	; (80081d0 <CDC_Transmit_FS+0x48>)
 80081b6:	f7fe fe11 	bl	8006ddc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80081ba:	4805      	ldr	r0, [pc, #20]	; (80081d0 <CDC_Transmit_FS+0x48>)
 80081bc:	f7fe fe3a 	bl	8006e34 <USBD_CDC_TransmitPacket>
 80081c0:	4603      	mov	r3, r0
 80081c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	20002f48 	.word	0x20002f48

080081d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	4603      	mov	r3, r0
 80081dc:	6039      	str	r1, [r7, #0]
 80081de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2212      	movs	r2, #18
 80081e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80081e6:	4b03      	ldr	r3, [pc, #12]	; (80081f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bc80      	pop	{r7}
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	2000014c 	.word	0x2000014c

080081f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	4603      	mov	r3, r0
 8008200:	6039      	str	r1, [r7, #0]
 8008202:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2204      	movs	r2, #4
 8008208:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800820a:	4b03      	ldr	r3, [pc, #12]	; (8008218 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800820c:	4618      	mov	r0, r3
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	bc80      	pop	{r7}
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	20000160 	.word	0x20000160

0800821c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	4603      	mov	r3, r0
 8008224:	6039      	str	r1, [r7, #0]
 8008226:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008228:	79fb      	ldrb	r3, [r7, #7]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d105      	bne.n	800823a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800822e:	683a      	ldr	r2, [r7, #0]
 8008230:	4907      	ldr	r1, [pc, #28]	; (8008250 <USBD_FS_ProductStrDescriptor+0x34>)
 8008232:	4808      	ldr	r0, [pc, #32]	; (8008254 <USBD_FS_ProductStrDescriptor+0x38>)
 8008234:	f7ff fe07 	bl	8007e46 <USBD_GetString>
 8008238:	e004      	b.n	8008244 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	4904      	ldr	r1, [pc, #16]	; (8008250 <USBD_FS_ProductStrDescriptor+0x34>)
 800823e:	4805      	ldr	r0, [pc, #20]	; (8008254 <USBD_FS_ProductStrDescriptor+0x38>)
 8008240:	f7ff fe01 	bl	8007e46 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008244:	4b02      	ldr	r3, [pc, #8]	; (8008250 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	2000340c 	.word	0x2000340c
 8008254:	08008b70 	.word	0x08008b70

08008258 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	4603      	mov	r3, r0
 8008260:	6039      	str	r1, [r7, #0]
 8008262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008264:	683a      	ldr	r2, [r7, #0]
 8008266:	4904      	ldr	r1, [pc, #16]	; (8008278 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008268:	4804      	ldr	r0, [pc, #16]	; (800827c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800826a:	f7ff fdec 	bl	8007e46 <USBD_GetString>
  return USBD_StrDesc;
 800826e:	4b02      	ldr	r3, [pc, #8]	; (8008278 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008270:	4618      	mov	r0, r3
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	2000340c 	.word	0x2000340c
 800827c:	08008b88 	.word	0x08008b88

08008280 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	4603      	mov	r3, r0
 8008288:	6039      	str	r1, [r7, #0]
 800828a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	221a      	movs	r2, #26
 8008290:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008292:	f000 f843 	bl	800831c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008296:	4b02      	ldr	r3, [pc, #8]	; (80082a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008298:	4618      	mov	r0, r3
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	20000164 	.word	0x20000164

080082a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	4603      	mov	r3, r0
 80082ac:	6039      	str	r1, [r7, #0]
 80082ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80082b0:	79fb      	ldrb	r3, [r7, #7]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d105      	bne.n	80082c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	4907      	ldr	r1, [pc, #28]	; (80082d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082ba:	4808      	ldr	r0, [pc, #32]	; (80082dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80082bc:	f7ff fdc3 	bl	8007e46 <USBD_GetString>
 80082c0:	e004      	b.n	80082cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	4904      	ldr	r1, [pc, #16]	; (80082d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082c6:	4805      	ldr	r0, [pc, #20]	; (80082dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80082c8:	f7ff fdbd 	bl	8007e46 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082cc:	4b02      	ldr	r3, [pc, #8]	; (80082d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	2000340c 	.word	0x2000340c
 80082dc:	08008b9c 	.word	0x08008b9c

080082e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	4603      	mov	r3, r0
 80082e8:	6039      	str	r1, [r7, #0]
 80082ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082ec:	79fb      	ldrb	r3, [r7, #7]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d105      	bne.n	80082fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	4907      	ldr	r1, [pc, #28]	; (8008314 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082f6:	4808      	ldr	r0, [pc, #32]	; (8008318 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082f8:	f7ff fda5 	bl	8007e46 <USBD_GetString>
 80082fc:	e004      	b.n	8008308 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	4904      	ldr	r1, [pc, #16]	; (8008314 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008302:	4805      	ldr	r0, [pc, #20]	; (8008318 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008304:	f7ff fd9f 	bl	8007e46 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008308:	4b02      	ldr	r3, [pc, #8]	; (8008314 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800830a:	4618      	mov	r0, r3
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	2000340c 	.word	0x2000340c
 8008318:	08008ba8 	.word	0x08008ba8

0800831c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008322:	4b0f      	ldr	r3, [pc, #60]	; (8008360 <Get_SerialNum+0x44>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008328:	4b0e      	ldr	r3, [pc, #56]	; (8008364 <Get_SerialNum+0x48>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800832e:	4b0e      	ldr	r3, [pc, #56]	; (8008368 <Get_SerialNum+0x4c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4413      	add	r3, r2
 800833a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d009      	beq.n	8008356 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008342:	2208      	movs	r2, #8
 8008344:	4909      	ldr	r1, [pc, #36]	; (800836c <Get_SerialNum+0x50>)
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f000 f814 	bl	8008374 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800834c:	2204      	movs	r2, #4
 800834e:	4908      	ldr	r1, [pc, #32]	; (8008370 <Get_SerialNum+0x54>)
 8008350:	68b8      	ldr	r0, [r7, #8]
 8008352:	f000 f80f 	bl	8008374 <IntToUnicode>
  }
}
 8008356:	bf00      	nop
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	1ffff7e8 	.word	0x1ffff7e8
 8008364:	1ffff7ec 	.word	0x1ffff7ec
 8008368:	1ffff7f0 	.word	0x1ffff7f0
 800836c:	20000166 	.word	0x20000166
 8008370:	20000176 	.word	0x20000176

08008374 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008374:	b480      	push	{r7}
 8008376:	b087      	sub	sp, #28
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	4613      	mov	r3, r2
 8008380:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008382:	2300      	movs	r3, #0
 8008384:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008386:	2300      	movs	r3, #0
 8008388:	75fb      	strb	r3, [r7, #23]
 800838a:	e027      	b.n	80083dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	0f1b      	lsrs	r3, r3, #28
 8008390:	2b09      	cmp	r3, #9
 8008392:	d80b      	bhi.n	80083ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	0f1b      	lsrs	r3, r3, #28
 8008398:	b2da      	uxtb	r2, r3
 800839a:	7dfb      	ldrb	r3, [r7, #23]
 800839c:	005b      	lsls	r3, r3, #1
 800839e:	4619      	mov	r1, r3
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	440b      	add	r3, r1
 80083a4:	3230      	adds	r2, #48	; 0x30
 80083a6:	b2d2      	uxtb	r2, r2
 80083a8:	701a      	strb	r2, [r3, #0]
 80083aa:	e00a      	b.n	80083c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	0f1b      	lsrs	r3, r3, #28
 80083b0:	b2da      	uxtb	r2, r3
 80083b2:	7dfb      	ldrb	r3, [r7, #23]
 80083b4:	005b      	lsls	r3, r3, #1
 80083b6:	4619      	mov	r1, r3
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	440b      	add	r3, r1
 80083bc:	3237      	adds	r2, #55	; 0x37
 80083be:	b2d2      	uxtb	r2, r2
 80083c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	011b      	lsls	r3, r3, #4
 80083c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80083c8:	7dfb      	ldrb	r3, [r7, #23]
 80083ca:	005b      	lsls	r3, r3, #1
 80083cc:	3301      	adds	r3, #1
 80083ce:	68ba      	ldr	r2, [r7, #8]
 80083d0:	4413      	add	r3, r2
 80083d2:	2200      	movs	r2, #0
 80083d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80083d6:	7dfb      	ldrb	r3, [r7, #23]
 80083d8:	3301      	adds	r3, #1
 80083da:	75fb      	strb	r3, [r7, #23]
 80083dc:	7dfa      	ldrb	r2, [r7, #23]
 80083de:	79fb      	ldrb	r3, [r7, #7]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d3d3      	bcc.n	800838c <IntToUnicode+0x18>
  }
}
 80083e4:	bf00      	nop
 80083e6:	371c      	adds	r7, #28
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bc80      	pop	{r7}
 80083ec:	4770      	bx	lr
	...

080083f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a11      	ldr	r2, [pc, #68]	; (8008444 <HAL_PCD_MspInit+0x54>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d11b      	bne.n	800843a <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008402:	4b11      	ldr	r3, [pc, #68]	; (8008448 <HAL_PCD_MspInit+0x58>)
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	4a10      	ldr	r2, [pc, #64]	; (8008448 <HAL_PCD_MspInit+0x58>)
 8008408:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800840c:	61d3      	str	r3, [r2, #28]
 800840e:	4b0e      	ldr	r3, [pc, #56]	; (8008448 <HAL_PCD_MspInit+0x58>)
 8008410:	69db      	ldr	r3, [r3, #28]
 8008412:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008416:	60fb      	str	r3, [r7, #12]
 8008418:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 2, 0);
 800841a:	2200      	movs	r2, #0
 800841c:	2102      	movs	r1, #2
 800841e:	2013      	movs	r0, #19
 8008420:	f7f9 fa8f 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8008424:	2013      	movs	r0, #19
 8008426:	f7f9 faa8 	bl	800197a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 2, 0);
 800842a:	2200      	movs	r2, #0
 800842c:	2102      	movs	r1, #2
 800842e:	2014      	movs	r0, #20
 8008430:	f7f9 fa87 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008434:	2014      	movs	r0, #20
 8008436:	f7f9 faa0 	bl	800197a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800843a:	bf00      	nop
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	40005c00 	.word	0x40005c00
 8008448:	40021000 	.word	0x40021000

0800844c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008460:	4619      	mov	r1, r3
 8008462:	4610      	mov	r0, r2
 8008464:	f7fe fdcb 	bl	8006ffe <USBD_LL_SetupStage>
}
 8008468:	bf00      	nop
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	460b      	mov	r3, r1
 800847a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008482:	78fa      	ldrb	r2, [r7, #3]
 8008484:	6879      	ldr	r1, [r7, #4]
 8008486:	4613      	mov	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4413      	add	r3, r2
 800848c:	00db      	lsls	r3, r3, #3
 800848e:	440b      	add	r3, r1
 8008490:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	78fb      	ldrb	r3, [r7, #3]
 8008498:	4619      	mov	r1, r3
 800849a:	f7fe fdfb 	bl	8007094 <USBD_LL_DataOutStage>
}
 800849e:	bf00      	nop
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b082      	sub	sp, #8
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	460b      	mov	r3, r1
 80084b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80084b8:	78fa      	ldrb	r2, [r7, #3]
 80084ba:	6879      	ldr	r1, [r7, #4]
 80084bc:	4613      	mov	r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	4413      	add	r3, r2
 80084c2:	00db      	lsls	r3, r3, #3
 80084c4:	440b      	add	r3, r1
 80084c6:	333c      	adds	r3, #60	; 0x3c
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	78fb      	ldrb	r3, [r7, #3]
 80084cc:	4619      	mov	r1, r3
 80084ce:	f7fe fe52 	bl	8007176 <USBD_LL_DataInStage>
}
 80084d2:	bf00      	nop
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b082      	sub	sp, #8
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fe ff62 	bl	80073b2 <USBD_LL_SOF>
}
 80084ee:	bf00      	nop
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80084fe:	2301      	movs	r3, #1
 8008500:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	2b02      	cmp	r3, #2
 8008508:	d001      	beq.n	800850e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800850a:	f7f8 fae3 	bl	8000ad4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008514:	7bfa      	ldrb	r2, [r7, #15]
 8008516:	4611      	mov	r1, r2
 8008518:	4618      	mov	r0, r3
 800851a:	f7fe ff12 	bl	8007342 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008524:	4618      	mov	r0, r3
 8008526:	f7fe fecb 	bl	80072c0 <USBD_LL_Reset>
}
 800852a:	bf00      	nop
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
	...

08008534 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008542:	4618      	mov	r0, r3
 8008544:	f7fe ff0c 	bl	8007360 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	699b      	ldr	r3, [r3, #24]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d005      	beq.n	800855c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008550:	4b04      	ldr	r3, [pc, #16]	; (8008564 <HAL_PCD_SuspendCallback+0x30>)
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	4a03      	ldr	r2, [pc, #12]	; (8008564 <HAL_PCD_SuspendCallback+0x30>)
 8008556:	f043 0306 	orr.w	r3, r3, #6
 800855a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800855c:	bf00      	nop
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	e000ed00 	.word	0xe000ed00

08008568 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008576:	4618      	mov	r0, r3
 8008578:	f7fe ff06 	bl	8007388 <USBD_LL_Resume>
}
 800857c:	bf00      	nop
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800858c:	4a28      	ldr	r2, [pc, #160]	; (8008630 <USBD_LL_Init+0xac>)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a26      	ldr	r2, [pc, #152]	; (8008630 <USBD_LL_Init+0xac>)
 8008598:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800859c:	4b24      	ldr	r3, [pc, #144]	; (8008630 <USBD_LL_Init+0xac>)
 800859e:	4a25      	ldr	r2, [pc, #148]	; (8008634 <USBD_LL_Init+0xb0>)
 80085a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80085a2:	4b23      	ldr	r3, [pc, #140]	; (8008630 <USBD_LL_Init+0xac>)
 80085a4:	2208      	movs	r2, #8
 80085a6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80085a8:	4b21      	ldr	r3, [pc, #132]	; (8008630 <USBD_LL_Init+0xac>)
 80085aa:	2202      	movs	r2, #2
 80085ac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80085ae:	4b20      	ldr	r3, [pc, #128]	; (8008630 <USBD_LL_Init+0xac>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80085b4:	4b1e      	ldr	r3, [pc, #120]	; (8008630 <USBD_LL_Init+0xac>)
 80085b6:	2200      	movs	r2, #0
 80085b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80085ba:	4b1d      	ldr	r3, [pc, #116]	; (8008630 <USBD_LL_Init+0xac>)
 80085bc:	2200      	movs	r2, #0
 80085be:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80085c0:	481b      	ldr	r0, [pc, #108]	; (8008630 <USBD_LL_Init+0xac>)
 80085c2:	f7f9 fda7 	bl	8002114 <HAL_PCD_Init>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d001      	beq.n	80085d0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80085cc:	f7f8 fa82 	bl	8000ad4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085d6:	2318      	movs	r3, #24
 80085d8:	2200      	movs	r2, #0
 80085da:	2100      	movs	r1, #0
 80085dc:	f7fb f8db 	bl	8003796 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085e6:	2358      	movs	r3, #88	; 0x58
 80085e8:	2200      	movs	r2, #0
 80085ea:	2180      	movs	r1, #128	; 0x80
 80085ec:	f7fb f8d3 	bl	8003796 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085f6:	23c0      	movs	r3, #192	; 0xc0
 80085f8:	2200      	movs	r2, #0
 80085fa:	2181      	movs	r1, #129	; 0x81
 80085fc:	f7fb f8cb 	bl	8003796 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008606:	f44f 7388 	mov.w	r3, #272	; 0x110
 800860a:	2200      	movs	r2, #0
 800860c:	2101      	movs	r1, #1
 800860e:	f7fb f8c2 	bl	8003796 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800861c:	2200      	movs	r2, #0
 800861e:	2182      	movs	r1, #130	; 0x82
 8008620:	f7fb f8b9 	bl	8003796 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	2000360c 	.word	0x2000360c
 8008634:	40005c00 	.word	0x40005c00

08008638 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008644:	2300      	movs	r3, #0
 8008646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800864e:	4618      	mov	r0, r3
 8008650:	f7f9 fe6b 	bl	800232a <HAL_PCD_Start>
 8008654:	4603      	mov	r3, r0
 8008656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008658:	7bfb      	ldrb	r3, [r7, #15]
 800865a:	4618      	mov	r0, r3
 800865c:	f000 f94e 	bl	80088fc <USBD_Get_USB_Status>
 8008660:	4603      	mov	r3, r0
 8008662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008664:	7bbb      	ldrb	r3, [r7, #14]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	4608      	mov	r0, r1
 8008678:	4611      	mov	r1, r2
 800867a:	461a      	mov	r2, r3
 800867c:	4603      	mov	r3, r0
 800867e:	70fb      	strb	r3, [r7, #3]
 8008680:	460b      	mov	r3, r1
 8008682:	70bb      	strb	r3, [r7, #2]
 8008684:	4613      	mov	r3, r2
 8008686:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008688:	2300      	movs	r3, #0
 800868a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008696:	78bb      	ldrb	r3, [r7, #2]
 8008698:	883a      	ldrh	r2, [r7, #0]
 800869a:	78f9      	ldrb	r1, [r7, #3]
 800869c:	f7f9 ffe5 	bl	800266a <HAL_PCD_EP_Open>
 80086a0:	4603      	mov	r3, r0
 80086a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086a4:	7bfb      	ldrb	r3, [r7, #15]
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 f928 	bl	80088fc <USBD_Get_USB_Status>
 80086ac:	4603      	mov	r3, r0
 80086ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b084      	sub	sp, #16
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	460b      	mov	r3, r1
 80086c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ca:	2300      	movs	r3, #0
 80086cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086d4:	78fa      	ldrb	r2, [r7, #3]
 80086d6:	4611      	mov	r1, r2
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fa f82c 	bl	8002736 <HAL_PCD_EP_Close>
 80086de:	4603      	mov	r3, r0
 80086e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f000 f909 	bl	80088fc <USBD_Get_USB_Status>
 80086ea:	4603      	mov	r3, r0
 80086ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	460b      	mov	r3, r1
 8008702:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008712:	78fa      	ldrb	r2, [r7, #3]
 8008714:	4611      	mov	r1, r2
 8008716:	4618      	mov	r0, r3
 8008718:	f7fa f8ec 	bl	80028f4 <HAL_PCD_EP_SetStall>
 800871c:	4603      	mov	r3, r0
 800871e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008720:	7bfb      	ldrb	r3, [r7, #15]
 8008722:	4618      	mov	r0, r3
 8008724:	f000 f8ea 	bl	80088fc <USBD_Get_USB_Status>
 8008728:	4603      	mov	r3, r0
 800872a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800872c:	7bbb      	ldrb	r3, [r7, #14]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b084      	sub	sp, #16
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	460b      	mov	r3, r1
 8008740:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008750:	78fa      	ldrb	r2, [r7, #3]
 8008752:	4611      	mov	r1, r2
 8008754:	4618      	mov	r0, r3
 8008756:	f7fa f92d 	bl	80029b4 <HAL_PCD_EP_ClrStall>
 800875a:	4603      	mov	r3, r0
 800875c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800875e:	7bfb      	ldrb	r3, [r7, #15]
 8008760:	4618      	mov	r0, r3
 8008762:	f000 f8cb 	bl	80088fc <USBD_Get_USB_Status>
 8008766:	4603      	mov	r3, r0
 8008768:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800876a:	7bbb      	ldrb	r3, [r7, #14]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	460b      	mov	r3, r1
 800877e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008786:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008788:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800878c:	2b00      	cmp	r3, #0
 800878e:	da0c      	bge.n	80087aa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008790:	78fb      	ldrb	r3, [r7, #3]
 8008792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008796:	68f9      	ldr	r1, [r7, #12]
 8008798:	1c5a      	adds	r2, r3, #1
 800879a:	4613      	mov	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4413      	add	r3, r2
 80087a0:	00db      	lsls	r3, r3, #3
 80087a2:	440b      	add	r3, r1
 80087a4:	3302      	adds	r3, #2
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	e00b      	b.n	80087c2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80087aa:	78fb      	ldrb	r3, [r7, #3]
 80087ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087b0:	68f9      	ldr	r1, [r7, #12]
 80087b2:	4613      	mov	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4413      	add	r3, r2
 80087b8:	00db      	lsls	r3, r3, #3
 80087ba:	440b      	add	r3, r1
 80087bc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80087c0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3714      	adds	r7, #20
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bc80      	pop	{r7}
 80087ca:	4770      	bx	lr

080087cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	460b      	mov	r3, r1
 80087d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087d8:	2300      	movs	r3, #0
 80087da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087e6:	78fa      	ldrb	r2, [r7, #3]
 80087e8:	4611      	mov	r1, r2
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7f9 ff18 	bl	8002620 <HAL_PCD_SetAddress>
 80087f0:	4603      	mov	r3, r0
 80087f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 f880 	bl	80088fc <USBD_Get_USB_Status>
 80087fc:	4603      	mov	r3, r0
 80087fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008800:	7bbb      	ldrb	r3, [r7, #14]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b086      	sub	sp, #24
 800880e:	af00      	add	r7, sp, #0
 8008810:	60f8      	str	r0, [r7, #12]
 8008812:	607a      	str	r2, [r7, #4]
 8008814:	461a      	mov	r2, r3
 8008816:	460b      	mov	r3, r1
 8008818:	72fb      	strb	r3, [r7, #11]
 800881a:	4613      	mov	r3, r2
 800881c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800882c:	893b      	ldrh	r3, [r7, #8]
 800882e:	7af9      	ldrb	r1, [r7, #11]
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	f7fa f81c 	bl	800286e <HAL_PCD_EP_Transmit>
 8008836:	4603      	mov	r3, r0
 8008838:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800883a:	7dfb      	ldrb	r3, [r7, #23]
 800883c:	4618      	mov	r0, r3
 800883e:	f000 f85d 	bl	80088fc <USBD_Get_USB_Status>
 8008842:	4603      	mov	r3, r0
 8008844:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008846:	7dbb      	ldrb	r3, [r7, #22]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3718      	adds	r7, #24
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	607a      	str	r2, [r7, #4]
 800885a:	461a      	mov	r2, r3
 800885c:	460b      	mov	r3, r1
 800885e:	72fb      	strb	r3, [r7, #11]
 8008860:	4613      	mov	r3, r2
 8008862:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008864:	2300      	movs	r3, #0
 8008866:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008868:	2300      	movs	r3, #0
 800886a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008872:	893b      	ldrh	r3, [r7, #8]
 8008874:	7af9      	ldrb	r1, [r7, #11]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	f7f9 ffa5 	bl	80027c6 <HAL_PCD_EP_Receive>
 800887c:	4603      	mov	r3, r0
 800887e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008880:	7dfb      	ldrb	r3, [r7, #23]
 8008882:	4618      	mov	r0, r3
 8008884:	f000 f83a 	bl	80088fc <USBD_Get_USB_Status>
 8008888:	4603      	mov	r3, r0
 800888a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800888c:	7dbb      	ldrb	r3, [r7, #22]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3718      	adds	r7, #24
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b082      	sub	sp, #8
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	460b      	mov	r3, r1
 80088a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088a8:	78fa      	ldrb	r2, [r7, #3]
 80088aa:	4611      	mov	r1, r2
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7f9 ffc7 	bl	8002840 <HAL_PCD_EP_GetRxCount>
 80088b2:	4603      	mov	r3, r0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80088c4:	4b02      	ldr	r3, [pc, #8]	; (80088d0 <USBD_static_malloc+0x14>)
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bc80      	pop	{r7}
 80088ce:	4770      	bx	lr
 80088d0:	20000378 	.word	0x20000378

080088d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]

}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bc80      	pop	{r7}
 80088e4:	4770      	bx	lr

080088e6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088e6:	b480      	push	{r7}
 80088e8:	b083      	sub	sp, #12
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	460b      	mov	r3, r1
 80088f0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80088f2:	bf00      	nop
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bc80      	pop	{r7}
 80088fa:	4770      	bx	lr

080088fc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	4603      	mov	r3, r0
 8008904:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008906:	2300      	movs	r3, #0
 8008908:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800890a:	79fb      	ldrb	r3, [r7, #7]
 800890c:	2b03      	cmp	r3, #3
 800890e:	d817      	bhi.n	8008940 <USBD_Get_USB_Status+0x44>
 8008910:	a201      	add	r2, pc, #4	; (adr r2, 8008918 <USBD_Get_USB_Status+0x1c>)
 8008912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008916:	bf00      	nop
 8008918:	08008929 	.word	0x08008929
 800891c:	0800892f 	.word	0x0800892f
 8008920:	08008935 	.word	0x08008935
 8008924:	0800893b 	.word	0x0800893b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008928:	2300      	movs	r3, #0
 800892a:	73fb      	strb	r3, [r7, #15]
    break;
 800892c:	e00b      	b.n	8008946 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800892e:	2302      	movs	r3, #2
 8008930:	73fb      	strb	r3, [r7, #15]
    break;
 8008932:	e008      	b.n	8008946 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008934:	2301      	movs	r3, #1
 8008936:	73fb      	strb	r3, [r7, #15]
    break;
 8008938:	e005      	b.n	8008946 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800893a:	2302      	movs	r3, #2
 800893c:	73fb      	strb	r3, [r7, #15]
    break;
 800893e:	e002      	b.n	8008946 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008940:	2302      	movs	r3, #2
 8008942:	73fb      	strb	r3, [r7, #15]
    break;
 8008944:	bf00      	nop
  }
  return usb_status;
 8008946:	7bfb      	ldrb	r3, [r7, #15]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3714      	adds	r7, #20
 800894c:	46bd      	mov	sp, r7
 800894e:	bc80      	pop	{r7}
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop

08008954 <atoi>:
 8008954:	220a      	movs	r2, #10
 8008956:	2100      	movs	r1, #0
 8008958:	f000 b8b2 	b.w	8008ac0 <strtol>

0800895c <__libc_init_array>:
 800895c:	b570      	push	{r4, r5, r6, lr}
 800895e:	2500      	movs	r5, #0
 8008960:	4e0c      	ldr	r6, [pc, #48]	; (8008994 <__libc_init_array+0x38>)
 8008962:	4c0d      	ldr	r4, [pc, #52]	; (8008998 <__libc_init_array+0x3c>)
 8008964:	1ba4      	subs	r4, r4, r6
 8008966:	10a4      	asrs	r4, r4, #2
 8008968:	42a5      	cmp	r5, r4
 800896a:	d109      	bne.n	8008980 <__libc_init_array+0x24>
 800896c:	f000 f8e0 	bl	8008b30 <_init>
 8008970:	2500      	movs	r5, #0
 8008972:	4e0a      	ldr	r6, [pc, #40]	; (800899c <__libc_init_array+0x40>)
 8008974:	4c0a      	ldr	r4, [pc, #40]	; (80089a0 <__libc_init_array+0x44>)
 8008976:	1ba4      	subs	r4, r4, r6
 8008978:	10a4      	asrs	r4, r4, #2
 800897a:	42a5      	cmp	r5, r4
 800897c:	d105      	bne.n	800898a <__libc_init_array+0x2e>
 800897e:	bd70      	pop	{r4, r5, r6, pc}
 8008980:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008984:	4798      	blx	r3
 8008986:	3501      	adds	r5, #1
 8008988:	e7ee      	b.n	8008968 <__libc_init_array+0xc>
 800898a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800898e:	4798      	blx	r3
 8008990:	3501      	adds	r5, #1
 8008992:	e7f2      	b.n	800897a <__libc_init_array+0x1e>
 8008994:	08008cdc 	.word	0x08008cdc
 8008998:	08008cdc 	.word	0x08008cdc
 800899c:	08008cdc 	.word	0x08008cdc
 80089a0:	08008ce0 	.word	0x08008ce0

080089a4 <memcpy>:
 80089a4:	b510      	push	{r4, lr}
 80089a6:	1e43      	subs	r3, r0, #1
 80089a8:	440a      	add	r2, r1
 80089aa:	4291      	cmp	r1, r2
 80089ac:	d100      	bne.n	80089b0 <memcpy+0xc>
 80089ae:	bd10      	pop	{r4, pc}
 80089b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089b8:	e7f7      	b.n	80089aa <memcpy+0x6>

080089ba <memset>:
 80089ba:	4603      	mov	r3, r0
 80089bc:	4402      	add	r2, r0
 80089be:	4293      	cmp	r3, r2
 80089c0:	d100      	bne.n	80089c4 <memset+0xa>
 80089c2:	4770      	bx	lr
 80089c4:	f803 1b01 	strb.w	r1, [r3], #1
 80089c8:	e7f9      	b.n	80089be <memset+0x4>

080089ca <_strtol_l.isra.0>:
 80089ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089ce:	4680      	mov	r8, r0
 80089d0:	4689      	mov	r9, r1
 80089d2:	4692      	mov	sl, r2
 80089d4:	461e      	mov	r6, r3
 80089d6:	460f      	mov	r7, r1
 80089d8:	463d      	mov	r5, r7
 80089da:	9808      	ldr	r0, [sp, #32]
 80089dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089e0:	f000 f884 	bl	8008aec <__locale_ctype_ptr_l>
 80089e4:	4420      	add	r0, r4
 80089e6:	7843      	ldrb	r3, [r0, #1]
 80089e8:	f013 0308 	ands.w	r3, r3, #8
 80089ec:	d132      	bne.n	8008a54 <_strtol_l.isra.0+0x8a>
 80089ee:	2c2d      	cmp	r4, #45	; 0x2d
 80089f0:	d132      	bne.n	8008a58 <_strtol_l.isra.0+0x8e>
 80089f2:	2201      	movs	r2, #1
 80089f4:	787c      	ldrb	r4, [r7, #1]
 80089f6:	1cbd      	adds	r5, r7, #2
 80089f8:	2e00      	cmp	r6, #0
 80089fa:	d05d      	beq.n	8008ab8 <_strtol_l.isra.0+0xee>
 80089fc:	2e10      	cmp	r6, #16
 80089fe:	d109      	bne.n	8008a14 <_strtol_l.isra.0+0x4a>
 8008a00:	2c30      	cmp	r4, #48	; 0x30
 8008a02:	d107      	bne.n	8008a14 <_strtol_l.isra.0+0x4a>
 8008a04:	782b      	ldrb	r3, [r5, #0]
 8008a06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a0a:	2b58      	cmp	r3, #88	; 0x58
 8008a0c:	d14f      	bne.n	8008aae <_strtol_l.isra.0+0xe4>
 8008a0e:	2610      	movs	r6, #16
 8008a10:	786c      	ldrb	r4, [r5, #1]
 8008a12:	3502      	adds	r5, #2
 8008a14:	2a00      	cmp	r2, #0
 8008a16:	bf14      	ite	ne
 8008a18:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008a1c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008a20:	2700      	movs	r7, #0
 8008a22:	fbb1 fcf6 	udiv	ip, r1, r6
 8008a26:	4638      	mov	r0, r7
 8008a28:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008a2c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008a30:	2b09      	cmp	r3, #9
 8008a32:	d817      	bhi.n	8008a64 <_strtol_l.isra.0+0x9a>
 8008a34:	461c      	mov	r4, r3
 8008a36:	42a6      	cmp	r6, r4
 8008a38:	dd23      	ble.n	8008a82 <_strtol_l.isra.0+0xb8>
 8008a3a:	1c7b      	adds	r3, r7, #1
 8008a3c:	d007      	beq.n	8008a4e <_strtol_l.isra.0+0x84>
 8008a3e:	4584      	cmp	ip, r0
 8008a40:	d31c      	bcc.n	8008a7c <_strtol_l.isra.0+0xb2>
 8008a42:	d101      	bne.n	8008a48 <_strtol_l.isra.0+0x7e>
 8008a44:	45a6      	cmp	lr, r4
 8008a46:	db19      	blt.n	8008a7c <_strtol_l.isra.0+0xb2>
 8008a48:	2701      	movs	r7, #1
 8008a4a:	fb00 4006 	mla	r0, r0, r6, r4
 8008a4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a52:	e7eb      	b.n	8008a2c <_strtol_l.isra.0+0x62>
 8008a54:	462f      	mov	r7, r5
 8008a56:	e7bf      	b.n	80089d8 <_strtol_l.isra.0+0xe>
 8008a58:	2c2b      	cmp	r4, #43	; 0x2b
 8008a5a:	bf04      	itt	eq
 8008a5c:	1cbd      	addeq	r5, r7, #2
 8008a5e:	787c      	ldrbeq	r4, [r7, #1]
 8008a60:	461a      	mov	r2, r3
 8008a62:	e7c9      	b.n	80089f8 <_strtol_l.isra.0+0x2e>
 8008a64:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008a68:	2b19      	cmp	r3, #25
 8008a6a:	d801      	bhi.n	8008a70 <_strtol_l.isra.0+0xa6>
 8008a6c:	3c37      	subs	r4, #55	; 0x37
 8008a6e:	e7e2      	b.n	8008a36 <_strtol_l.isra.0+0x6c>
 8008a70:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008a74:	2b19      	cmp	r3, #25
 8008a76:	d804      	bhi.n	8008a82 <_strtol_l.isra.0+0xb8>
 8008a78:	3c57      	subs	r4, #87	; 0x57
 8008a7a:	e7dc      	b.n	8008a36 <_strtol_l.isra.0+0x6c>
 8008a7c:	f04f 37ff 	mov.w	r7, #4294967295
 8008a80:	e7e5      	b.n	8008a4e <_strtol_l.isra.0+0x84>
 8008a82:	1c7b      	adds	r3, r7, #1
 8008a84:	d108      	bne.n	8008a98 <_strtol_l.isra.0+0xce>
 8008a86:	2322      	movs	r3, #34	; 0x22
 8008a88:	4608      	mov	r0, r1
 8008a8a:	f8c8 3000 	str.w	r3, [r8]
 8008a8e:	f1ba 0f00 	cmp.w	sl, #0
 8008a92:	d107      	bne.n	8008aa4 <_strtol_l.isra.0+0xda>
 8008a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a98:	b102      	cbz	r2, 8008a9c <_strtol_l.isra.0+0xd2>
 8008a9a:	4240      	negs	r0, r0
 8008a9c:	f1ba 0f00 	cmp.w	sl, #0
 8008aa0:	d0f8      	beq.n	8008a94 <_strtol_l.isra.0+0xca>
 8008aa2:	b10f      	cbz	r7, 8008aa8 <_strtol_l.isra.0+0xde>
 8008aa4:	f105 39ff 	add.w	r9, r5, #4294967295
 8008aa8:	f8ca 9000 	str.w	r9, [sl]
 8008aac:	e7f2      	b.n	8008a94 <_strtol_l.isra.0+0xca>
 8008aae:	2430      	movs	r4, #48	; 0x30
 8008ab0:	2e00      	cmp	r6, #0
 8008ab2:	d1af      	bne.n	8008a14 <_strtol_l.isra.0+0x4a>
 8008ab4:	2608      	movs	r6, #8
 8008ab6:	e7ad      	b.n	8008a14 <_strtol_l.isra.0+0x4a>
 8008ab8:	2c30      	cmp	r4, #48	; 0x30
 8008aba:	d0a3      	beq.n	8008a04 <_strtol_l.isra.0+0x3a>
 8008abc:	260a      	movs	r6, #10
 8008abe:	e7a9      	b.n	8008a14 <_strtol_l.isra.0+0x4a>

08008ac0 <strtol>:
 8008ac0:	4b08      	ldr	r3, [pc, #32]	; (8008ae4 <strtol+0x24>)
 8008ac2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ac4:	681c      	ldr	r4, [r3, #0]
 8008ac6:	4d08      	ldr	r5, [pc, #32]	; (8008ae8 <strtol+0x28>)
 8008ac8:	6a23      	ldr	r3, [r4, #32]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	bf08      	it	eq
 8008ace:	462b      	moveq	r3, r5
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	460a      	mov	r2, r1
 8008ad6:	4601      	mov	r1, r0
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f7ff ff76 	bl	80089ca <_strtol_l.isra.0>
 8008ade:	b003      	add	sp, #12
 8008ae0:	bd30      	pop	{r4, r5, pc}
 8008ae2:	bf00      	nop
 8008ae4:	20000180 	.word	0x20000180
 8008ae8:	200001e4 	.word	0x200001e4

08008aec <__locale_ctype_ptr_l>:
 8008aec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008af0:	4770      	bx	lr

08008af2 <__ascii_mbtowc>:
 8008af2:	b082      	sub	sp, #8
 8008af4:	b901      	cbnz	r1, 8008af8 <__ascii_mbtowc+0x6>
 8008af6:	a901      	add	r1, sp, #4
 8008af8:	b142      	cbz	r2, 8008b0c <__ascii_mbtowc+0x1a>
 8008afa:	b14b      	cbz	r3, 8008b10 <__ascii_mbtowc+0x1e>
 8008afc:	7813      	ldrb	r3, [r2, #0]
 8008afe:	600b      	str	r3, [r1, #0]
 8008b00:	7812      	ldrb	r2, [r2, #0]
 8008b02:	1c10      	adds	r0, r2, #0
 8008b04:	bf18      	it	ne
 8008b06:	2001      	movne	r0, #1
 8008b08:	b002      	add	sp, #8
 8008b0a:	4770      	bx	lr
 8008b0c:	4610      	mov	r0, r2
 8008b0e:	e7fb      	b.n	8008b08 <__ascii_mbtowc+0x16>
 8008b10:	f06f 0001 	mvn.w	r0, #1
 8008b14:	e7f8      	b.n	8008b08 <__ascii_mbtowc+0x16>

08008b16 <__ascii_wctomb>:
 8008b16:	b149      	cbz	r1, 8008b2c <__ascii_wctomb+0x16>
 8008b18:	2aff      	cmp	r2, #255	; 0xff
 8008b1a:	bf8b      	itete	hi
 8008b1c:	238a      	movhi	r3, #138	; 0x8a
 8008b1e:	700a      	strbls	r2, [r1, #0]
 8008b20:	6003      	strhi	r3, [r0, #0]
 8008b22:	2001      	movls	r0, #1
 8008b24:	bf88      	it	hi
 8008b26:	f04f 30ff 	movhi.w	r0, #4294967295
 8008b2a:	4770      	bx	lr
 8008b2c:	4608      	mov	r0, r1
 8008b2e:	4770      	bx	lr

08008b30 <_init>:
 8008b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b32:	bf00      	nop
 8008b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b36:	bc08      	pop	{r3}
 8008b38:	469e      	mov	lr, r3
 8008b3a:	4770      	bx	lr

08008b3c <_fini>:
 8008b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3e:	bf00      	nop
 8008b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b42:	bc08      	pop	{r3}
 8008b44:	469e      	mov	lr, r3
 8008b46:	4770      	bx	lr
